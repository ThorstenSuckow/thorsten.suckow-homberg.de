"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"the-geometry-of-the-dot-product","metadata":{"permalink":"/blog/the-geometry-of-the-dot-product","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2025-04-26-the-geometry-of-the-dot-product/index.mdx","source":"@site/blog/2025-04-26-the-geometry-of-the-dot-product/index.mdx","title":"The Geometry of the Dot Product","description":"The Geometry of the Dot Product","date":"2025-04-26T00:00:00.000Z","tags":[{"inline":true,"label":"computer graphics","permalink":"/blog/tags/computer-graphics"},{"inline":true,"label":"linear algebra","permalink":"/blog/tags/linear-algebra"}],"readingTime":0.7,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"the-geometry-of-the-dot-product","title":"The Geometry of the Dot Product","authors":["thorstensuckow"],"tags":["computer graphics","linear algebra"],"enableComments":true},"unlisted":false,"nextItem":{"title":"Contracted Events for Micro Frontend Communication","permalink":"/blog/contracted-events-for-micro-frontend-communication"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\n## The Geometry of the Dot Product\\n\\n#### ... and Applications to Visibility Modeling\\n\\nThe Dot Product is a fundamental building block for vector operations in video games and simulations. A solid understanding  is crucial for applications involving view-related coordinate transformations and even physical modeling within a game world. For many practical use cases, the dot product offers an elegant alternative to constructing explicit visibility cones or relying on computationally expensive raytracing algorithms.\\n\\n\x3c!--truncate--\x3e\\n\\nMy [article](/docs/articles/computer-graphics/the-geometry-of-the-dot-product) provides an introductory exploration of the theory of the dot product and its geometric interpretation.\\n\\nAn example involving field-of-view-calculations illustrates how the dot product can simplify visibility modeling and decision-making in games.\\n\\nAdditional proofs establish key lemmas that support further applications of the dot product and related operations in both 2D and 3D.\\n\\n[Continue reading...](/docs/articles/computer-graphics/the-geometry-of-the-dot-product)"},{"id":"contracted-events-for-micro-frontend-communication","metadata":{"permalink":"/blog/contracted-events-for-micro-frontend-communication","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2024-09-11-contracted-events-for-micro-frontend-communication/index.mdx","source":"@site/blog/2024-09-11-contracted-events-for-micro-frontend-communication/index.mdx","title":"Contracted Events for Micro Frontend Communication","description":"Contracted Events for Micro Frontend Communication","date":"2024-09-11T00:00:00.000Z","tags":[{"inline":true,"label":"frontend","permalink":"/blog/tags/frontend"},{"inline":true,"label":"programming","permalink":"/blog/tags/programming"}],"readingTime":1.96,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"contracted-events-for-micro-frontend-communication","title":"Contracted Events for Micro Frontend Communication","authors":["thorstensuckow"],"tags":["frontend","programming"],"enableComments":true},"unlisted":false,"prevItem":{"title":"The Geometry of the Dot Product","permalink":"/blog/the-geometry-of-the-dot-product"},"nextItem":{"title":"[DE] Betrachtung des Widerspruchsbeweis des speziellen Halteproblems nach Vossen und Witt","permalink":"/blog/betrachtung-des-widerspruchsbeweis-des-speziellen-halteproblems-nach-vossen-und-witt"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\n## Contracted Events for Micro Frontend Communication\\n\\n### A non-formal approach to non-breaking events for displaying information in distributed Frontend Fragments\\n\\nSchema Versioning and Consumer-driven contracts play critical roles in the world of distributed systems, where data structures often evolve across releases. These concepts can be applied to Micro Frontends, where messages need to be exchanged across system boundaries: Release-agnostic systems, which can dynamically enter and exit the system of concern, must be able to properly respond to event messages: Updated message structures must not introduce breaking changes.\\n\\n*In a frontend, provide contracts for data structures consumed by conceptually related modules and process the data according to the individual requirements of the consuming context.*\\n\x3c!--truncate--\x3e\\n### Motivation\\n\\nUsing a Micro Frontend architecture does not require to plan a specific tech stack ahead. Quite the contrary, developers and architects can agree on different approaches that allow for embedding complete parts of applications, or components provided by these applications, into a web frontend.\\n\\nWhat matters is that each of the Micro Frontends strives for low coupling and strong cohesion, just as any building block of a modularized software system does. Low coupling doesn\u2019t necessarily mean that a \xb5Frontend is lashed and stowed within its domain, as it often needs to take part in sending and consuming messages within a frontend application: The big picture shows itself when conceptually related modules process broadcasted messages and offer the data in an informational context, updating visual elements with it. Here, the emphasis is clearly on \u201cvisual\u201d, since triggering business or domain logic would mean a higher degree of coupling between the sender and the receiver. We want to avoid this.\\n\\nThe attempt to process data from events often results in inconsistent visual representation throughout the application, or even worse, runtime errors when the consuming API does not understand the format or the structure of the data the API is expected to process, sometimes due to unintentionally and accidentally changes made to the sender\u2019s API.\\n\\nProviding contracts for consumers with the help of shared source, versioned events and a *must ignore* policy lowers the risk of breaking functionality during runtime when messages of arbitrary source are processed by autonomously developed and independently deployed frontends, while keeping integrity and consistency high and coupling and lockstep release cycles low.\\n\\n[...continue reading](/docs/articles/contracted-events-for-micro-frontend-communication/)"},{"id":"betrachtung-des-widerspruchsbeweis-des-speziellen-halteproblems-nach-vossen-und-witt","metadata":{"permalink":"/blog/betrachtung-des-widerspruchsbeweis-des-speziellen-halteproblems-nach-vossen-und-witt","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2024-09-03-spezielle-halteproblem/index.md","source":"@site/blog/2024-09-03-spezielle-halteproblem/index.md","title":"[DE] Betrachtung des Widerspruchsbeweis des speziellen Halteproblems nach Vossen und Witt","description":"Oft wird der Nachweis, dass das Halteproblem nicht entscheidbar ist, in der Fachliteratur (Sch\xf6ning , Asteroth und Baier , Sipser ) mithilfe einer Turingmaschine und einem Widerspruchsbeweis gezeigt, in etwa:","date":"2024-09-03T00:00:00.000Z","tags":[{"inline":true,"label":"automata theory","permalink":"/blog/tags/automata-theory"},{"inline":true,"label":"algorithms","permalink":"/blog/tags/algorithms"}],"readingTime":5.905,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"betrachtung-des-widerspruchsbeweis-des-speziellen-halteproblems-nach-vossen-und-witt","title":"[DE] Betrachtung des Widerspruchsbeweis des speziellen Halteproblems nach Vossen und Witt","authors":["thorstensuckow"],"tags":["automata theory","algorithms"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Contracted Events for Micro Frontend Communication","permalink":"/blog/contracted-events-for-micro-frontend-communication"},"nextItem":{"title":"[DE] L\xf6sungshinweise Modul prog (Update 15.03.2024)","permalink":"/blog/loesungshinweise-prog-fh-trier"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\n\\nOft wird der Nachweis, dass das Halteproblem nicht entscheidbar ist, in der Fachliteratur (_Sch\xf6ning_ <BibRef name=\\"Sch08\\" pp=\\"119 f.\\" />, _Asteroth und Baier_ <BibRef name=\\"BA02\\" pp=\\"106 f.\\" />, _Sipser_ <BibRef name=\\"Sip12\\" pp=\\"216 f.\\" />) mithilfe einer Turingmaschine und einem Widerspruchsbeweis gezeigt, in etwa:\\n\\nAngenommen,\\n$$\\nK\' = \\\\{w \\\\in \\\\Sigma^*  | w = \\\\langle T \\\\rangle, \\\\text{$T$ stoppt bei Eingabe $w$}\\\\}\\n$$\\nist entscheidbar.  \\n\\nSei $T\'$ ist die Turingmaschine, die $K\'$ entscheidet.  \\nSei $w = \\\\langle T \\\\rangle$ die Codierung[^3] einer Turingmaschine, die wie folgt arbeitet:\\n- $T$ simuliert das Verhalten von $T\'$ bei der Eingabe $w$:\\n    - $T$ stoppt, wenn $T\'$ die Eingabe $w$ verwirft ($w \\\\notin K\'$)\\n    - $T$ stoppt nicht, wenn $T\'$ die Eingabe $w$ akzeptiert ($w \\\\in K\'$)\\n\\n[^3]: Anstatt _G\xf6delnummer_ wird im Folgenden auch einfach der Begriff _Codierung_ verwendet, wobei streng genommen $\\\\tau(T)$ die Codierung einer normierten Turingmaschine ist, bevor ihr eine G\xf6delnummer zugewiesen wird  \\n\\nDamit folgt:\\n$T$ stoppt bei Eingabe $w$ $\\\\Leftrightarrow$ $T\'$ verwirft $w$ $\\\\Leftrightarrow$ $w \\\\notin K\'$ $\\\\Leftrightarrow$ $T$ stoppt nicht\\n\\n**Widerspruch!**\\n\x3c!--truncate--\x3e\\n\\nBei _Vossen und Witt_ wird der Beweis anhand unentscheidbarer Mengen gezeigt - hierzu wird in dem Abschnitt \xfcber **Berechenbarkeit** die Abz\xe4hlbarkeit von Turingmaschinen und analog dazu die Standardnummerierung von $\\\\mathcal{P}$[^1] als theoretischer Unterbau festgelegt, um darauf aufbauend den Nachweis der Semi-Entscheidbarkeit und Unentscheidbarkeit zu f\xfchren. \\nIm Folgenden findet sich die Beweisf\xfchrung nach _Vossen und Witt_ <BibRef name=\\"VW16\\" pp=\\"360 ff.\\" /> mit erg\xe4nzenden Kommentaren. \\n\\n\\n[^1]: $\\\\mathcal{P}$ bezeichnet die Menge der partiell-rekursiven Funktionen. Es gilt $\\\\mathcal{PR} \\\\subset \\\\mathcal{R} \\\\subset \\\\mathcal{P}$, mit $\\\\mathcal{PR}$ als die Menge der primitiv-rekursiven Funktionen, die eine echte Teilmenge der total berechenbaren Funktionen $\\\\mathcal{R}$ sind\\n\\nDie **Standardnummerierung** ist festgelegt als:\\n\\n$$\\n(\\\\mathbb{N}_0, \\\\mathcal{P}, \\\\varphi)\\n$$\\n\\n- $\\\\mathbb{N}_0$: Die Menge aller Turingmaschinen (ein $i \\\\in \\\\mathbb{N}_0$ repr\xe4sentiert die G\xf6delnummer einer Turingmaschine), wobei $\\\\mathcal{T}$ die Menge aller normierten Turingmaschinen ist. Die Abbildung $h: \\\\mathbb{N}_0 \\\\rightarrow \\\\mathcal{T}$ ist definiert durch\\n  $\\n  h(i) = \\\\begin{cases}\\n  T, & \\\\text{falls } p(\\\\tau(T)) = i\\\\\\\\\\n  T_{\\\\omega}, & \\\\text{sonst}\\n  \\\\end{cases}\\n  $\\n  bildet also auf eine nat\xfcrliche Zahl eine Turingmaschine ab.\\n- $\\\\mathcal{P}$: Die Menge aller berechenbaren Funktionen.\\n- $\\\\varphi: \\\\mathbb{N}_0 \\\\rightarrow \\\\mathcal{P}$ ist eine Abz\xe4hlung aller berechenbaren Funktionen. $\\\\varphi$ ist festgelegt durch\\n  $\\n  \\\\varphi(i) = f \\\\Leftrightarrow f_{h(i)} = f\\n  $\\n  Die berechenbare Funktion $\\\\varphi(i)$ wird also durch die $i$-te Turingmaschine berechnet.\\n\\nDie Standardnummerierung ist im Folgenden die Grundlage f\xfcr die Formulierung von **Entscheidbarkeitsproblemen bei Mengen**.\\n\\n## Das spezielle Halteproblem\\n\\nZun\xe4chst wird das **spezielle Halteproblem** (auch *Selbstanwendbarkeitsproblem*) betrachtet.  \\n*Vossen und Witt* definieren es \xfcber folgende Menge:\\n\\n$$\\nK = \\\\{i \\\\mid i \\\\in \\\\text{Def}(\\\\varphi_i)\\\\}\\n$$\\n\\n$K$ enth\xe4lt alle Nummern von Turingmaschinen, die, angewendet auf sich selbst, anhalten:\\n\\n- $i$ ist die Codierung einer Turingmaschine.\\n- $\\\\varphi_i$ ist die berechenbare Funktion, die von der Turingmaschine $p(\\\\tau(T)) = i$ berechnet wird.\\n- $\\\\text{Def}(\\\\varphi_i)$ ist der Definitionsbereich der Funktion $\\\\varphi_i$, also alle erlaubten Eingaben.\\n- $i \\\\in \\\\text{Def}(\\\\varphi_i)$ bedeutet: Die Codierung $i$ der Turingmaschine $p(\\\\tau(T)) = i$, die $\\\\varphi_i$ berechnet, ist eine erlaubte Eingabe.\\n\\n*Vossen und Witt* definieren $K$ als die \\"Menge aller Turingmaschinen, die, [...] anhalten.\\"  \\nDas bedeutet, dass von einer **entscheidbaren Menge** ausgegangen wird:  \\nEs wird angenommen, dass sowohl $K$ als auch $\\\\overline{K}$ semi-entscheidbar sind und die **charakteristische Funktion** $\\\\chi_K$ von $K$ berechenbar ist.\\n\\nMit **Satz 10.7** formulieren *Vossen und Witt* den Kern des Selbstanwendbarkeitsproblems, n\xe4mlich, dass $K$ zwar **semi-entscheidbar**, aber **nicht entscheidbar** ist:\\n\\n:::tip **Satz 10.7:** <BibRef name=\\"VW16\\" pp=\\"361\\" />\\n- $K$ ist rekursiv aufz\xe4hlbar\\n- $K$ ist nicht entscheidbar\\n:::\\n\\nDamit wird behauptet:\\n\\n- $K$ ist **semi-entscheidbar**, da **rekursiv-aufz\xe4hlbar**.  \\n  Wenn $K$ semi-entscheidbar ist, ist auch die semi-charakteristische Funktion von $K$, $\\\\chi\'_K$, berechenbar.  \\n  Wenn $K$ semi-entscheidbar und damit rekursiv aufz\xe4hlbar ist, dann gilt \xe4quivalent dazu: $K$ ist der Definitionsbereich einer berechenbaren Funktion $g: \\\\mathbb{N}_{0} \\\\rightarrow \\\\mathbb{N}_0$ (s. **Folgerung 10.2** <BibRef name=\\"VW16\\" pp=\\"356\\" />).\\n  Es reicht also aus, eine solche Funktion anzugeben, um die Semi-Entscheidbarkeit und damit auch die rekursive Aufz\xe4hlbarkeit nachzuweisen.\\n- Wenn $K$ entscheidbar ist, dann ist auch die charakteristische Funktion $\\\\chi_K$ berechenbar:  $\\\\chi_K$ gibt $1$ aus, wenn die Turingmaschine $T$ angewendet auf $i = p(\\\\tau(T))$ anh\xe4lt (also wenn $\\\\varphi_i(i)$ berechnet wird); und ansonsten ist $\\\\chi_K(i) = 0$, wenn $T$ nicht anh\xe4lt[^2].\\n\\n[^2]: der Widerspruch liest sich hier bereits heraus.\\n\\n### Beweisf\xfchrung\\n\\nDer Beweis wird wie folgt gef\xfchrt:\\n\\n**a)**  *Vossen und Witt* definieren die Funktion $f: \\\\mathbb{N}_0 \\\\rightarrow \\\\mathbb{N}_0$ durch\\n\\n$$\\nf(i) = u_{\\\\varphi}(i, i)\\n$$\\n\\nBei $u_{\\\\varphi}$ handelt es sich um die **universelle Funktion** von $(\\\\mathbb{N}_0, \\\\mathcal{P}, \\\\varphi)$:\\n\\n$$\\nu_{\\\\varphi} : \\\\mathbb{N}_0 \\\\times \\\\mathbb{N}_0 \\\\rightarrow \\\\mathbb{N}_0 \\\\quad \\\\text{definiert durch} \\\\quad u_{\\\\varphi} (i, x) = \\\\varphi_i(x)\\n$$\\n\\n$u_{\\\\varphi}(i, j)$ berechnet die $i$-te berechenbare Funktion f\xfcr die Eingabe $j$.\\n\\nMit $f$ als berechenbare Funktion kann gezeigt werden:\\n\\n$$\\n\\\\begin{align}\\ni \\\\in K &\\\\Leftrightarrow i \\\\in \\\\text{Def}(\\\\varphi_i) \\\\quad \\\\text{(Definition $K$)}\\\\\\\\\\n &\\\\Leftrightarrow (i, i) \\\\in \\\\text{Def}(u_{\\\\varphi}) \\\\quad \\\\text{(Definition $u_{\\\\varphi}$)}\\\\\\\\\\n &\\\\Leftrightarrow i \\\\in \\\\text{Def}(f) \\\\quad \\\\text{(Definition $f$)}\\n\\\\end{align}\\n$$\\n\\nwomit $K = \\\\text{Def}(f)$ ist und damit $K$ **rekursiv-aufz\xe4hlbar** und **semi-entscheidbar** ist.\\n\\n**b)** Angenommen, $K$ ist entscheidbar. Dann ist $\\\\chi_K$ berechenbar.  \\n*Vossen und Witt* definieren eine berechenbare (Hilfs-)Funktion\\n\\n$\\ng: \\\\mathbb{N}_0 \\\\rightarrow \\\\mathbb{N}_0\\n$\\n\\ndurch\\n\\n$$\\ng(x) = \\\\begin{cases}\\nu_{\\\\varphi}(x, x) + 1, & \\\\text{falls }\\\\chi_K(x) = 1\\\\\\\\\\n0, & \\\\text{falls }\\\\chi_K(x) = 0\\n\\\\end{cases}\\n$$\\n\\n$g$ ist total berechenbar: Wenn $\\\\chi_K(x) = 1$, dann ist $x \\\\in \\\\text{Def}(\\\\varphi_x)$, und damit ist $u_\\\\varphi(x, x) + 1 = \\\\varphi_x(x) + 1$.\\n\\nDa $g$ total berechenbar ist ($g \\\\in \\\\mathcal{R} \\\\subset \\\\mathcal{P}$), muss es ein $p \\\\in \\\\mathbb{N}_0$ geben mit $g = \\\\varphi_p$. Es folgt\\n\\n$$\\ng(x) = \\\\varphi_p(x) \\\\quad \\\\forall x \\\\in \\\\mathbb{N}_0\\n$$\\n\\nF\xfcr $g(p)$ werden nun zwei F\xe4lle untersucht:\\n\\n- **Fall 1:** **$g(p) = 0$**\\n   $$\\n   \\\\begin{align}\\n   g(p) = 0 &\\\\Leftrightarrow \\\\chi_K(p) = 0 \\\\quad \\\\text{(Entscheidbarkeit $K$)}\\\\\\\\\\n   & \\\\Leftrightarrow p \\\\notin K \\\\\\\\\\n   & \\\\Leftrightarrow p \\\\notin \\\\text{Def}(\\\\varphi_p) \\\\quad \\\\text{($g = \\\\varphi_p$)}\\\\\\\\\\n   & \\\\Leftrightarrow p \\\\notin \\\\text{Def}(g) \\\\\\\\\\n   & \\\\Leftrightarrow g(p) = \\\\bot \\\\quad \\\\text{(Widerspruch zu $g$ total berechenbar)}\\n   \\\\end{align}\\n   $$\\n   womit insgesamt die widerspr\xfcchliche Aussage folgt:\\n   $$\\n   g(p) = 0 \\\\Leftrightarrow  g(p) = \\\\bot\\n   $$\\n\\n- **Fall 2:** **$g(p) = u_{\\\\varphi}(p,p) + 1$**\\n   $$\\n   \\\\begin{align}\\n   g(p) &= u_{\\\\varphi}(p, p) + 1 \\\\quad \\\\text{(Definition $g$)}\\\\\\\\\\n   &= \\\\varphi_p(p) + 1  \\\\quad \\\\text{($u_{\\\\varphi}(p, p) = \\\\varphi_p(p)$)}\\\\\\\\\\n   &= g(p) + 1   \\\\quad \\\\text{($\\\\varphi_p = g$)}\\n   \\\\end{align}\\n   $$\\n   womit insgesamt die widerspr\xfcchliche Aussage folgt:\\n   $$\\n   g(p) = g(p) + 1\\n   $$\\n\\nInsgesamt wird durch den Beweis gezeigt: Die Anwendung von $g$ auf $p$ - also von $g$ **auf sich selbst** (wegen $g = \\\\varphi_p = f_{h(p)}, \\\\varphi_p(p) = u_{\\\\varphi}(p, p)$) - f\xfchrt in jedem Fall zu einem Widerspruch.  \\nDamit ist gezeigt, dass $\\\\chi_K$ nicht berechenbar und folglich $K$ **nicht entscheidbar** ist.\\n\\n\\n:::info\\nMit dem Wissen um die Unentscheidbarkeit und der Semi-Entscheidbarkeit von $K$ ist es nun m\xf6glich, eine Funktion $f$ anzugeben, mit der sich $K$ auf $H$ reduzieren l\xe4sst, so dass $K \\\\leq_f H$.\\nDa $K$ unentscheidbar ist, ist auch $H$ unentscheidbar. Es muss gezeigt werden, dass auch $H$ semi-entscheidbar ist, da dies nicht allein aus der Reduktion von $K$ auf $H$ folgt (vgl. **Satz 10.5** <BibRef name=\\"VW16\\" pp=\\"358\\" /> sowie **Folgerung 10.3** <BibRef name=\\"VW16\\" pp=\\"359\\" />). Der Beweis erfolgt analog zum Nachweis der rekursiven Aufz\xe4hlbarkeit von $K$ mit **Satz 10.8** <BibRef name=\\"VW16\\" pp=\\"363\\" />.  \\n:::"},{"id":"loesungshinweise-prog-fh-trier","metadata":{"permalink":"/blog/loesungshinweise-prog-fh-trier","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2024-03-15-loesungshinweise-zu-modul-prog/index.md","source":"@site/blog/2024-03-15-loesungshinweise-zu-modul-prog/index.md","title":"[DE] L\xf6sungshinweise Modul prog (Update 15.03.2024)","description":"F\xfcr das Modul prog im Wintersemester 2023/2024 des Fernstudiengangs Informatik (M.C.Sc.) der","date":"2024-03-15T00:00:00.000Z","tags":[{"inline":true,"label":"study","permalink":"/blog/tags/study"},{"inline":true,"label":"java","permalink":"/blog/tags/java"},{"inline":true,"label":"test","permalink":"/blog/tags/test"},{"inline":true,"label":"programmierung","permalink":"/blog/tags/programmierung"}],"readingTime":0.91,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"loesungshinweise-prog-fh-trier","title":"[DE] L\xf6sungshinweise Modul prog (Update 15.03.2024)","authors":["thorstensuckow"],"tags":["study","java","test","programmierung"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] Betrachtung des Widerspruchsbeweis des speziellen Halteproblems nach Vossen und Witt","permalink":"/blog/betrachtung-des-widerspruchsbeweis-des-speziellen-halteproblems-nach-vossen-und-witt"},"nextItem":{"title":"[DE] Shellsort Laufzeitanalyse","permalink":"/blog/shellsort-lauzeitanalyse"}},"content":"F\xfcr das Modul **prog**[^1] im Wintersemester 2023/2024 des Fernstudiengangs Informatik (M.C.Sc.) der\\n[Hochschule Trier](https://www.hochschule-trier.de/) habe ich hier L\xf6sungshinweise zu ausgew\xe4hlten Tests zusammengefasst. Diese stehen als PDF zum Download zur Verf\xfcgung.\\n\\n\x3c!--truncate--\x3e\\n### Repetitorium und L\xf6sungshinweise Musterklausur (22.03.2024)\\n- Das Repetitorium zu dem Modul PROG im WS 23/24 [kann hier heruntergeladen werden](./repetitorium-prog-ws-23-24-fh-trier.pdf)\\n- L\xf6sungsvorschl\xe4ge, Anmerkungen und Erg\xe4nzungen zu der Musterklausur k\xf6nnen\\n[hier heruntergeladen werden](./loesungsvorschlag-musterklausur-prog-ws-23-24-fh-trier.pdf).\\n\\n### L\xf6sungshinweise Test 5 - Such-undSortieralgorithmen (23.01.2024)\\nL\xf6sungshinweise sowie Anmerkungen und Erg\xe4nzungen k\xf6nnen\\n[hier heruntergeladen werden](./loesungshinweise-test5-prog-ws-23-24-fh-trier.pdf).\\n\\n### L\xf6sungshinweise Test 4 - Dynamische Datenstrukturen und spezifische Algorithmen (09.01.2024)\\nL\xf6sungshinweise sowie Anmerkungen und Erg\xe4nzungen k\xf6nnen\\n[hier heruntergeladen werden](./loesungshinweise-test4-prog-ws-23-24-fh-trier.pdf).\\n\\n\\n### L\xf6sungshinweise Test 3 - Objektorientierung (05.12.2023)\\nL\xf6sungshinweise sowie Anmerkungen und Erg\xe4nzungen k\xf6nnen\\n[hier heruntergeladen werden](./loesungshinweise-test3-prog-ws-23-24-fh-trier.pdf).\\n\\nDie L\xf6sungshinweise beinhalten nicht die Testaufgaben, bei denen eine bestimmte Programmausgabe nachvollzogen werden musste.\\n\\nUm Konzepte des Lehrmaterials deutlicher von weiterf\xfchrenden, f\xfcr den Kurs\\nweniger relevante Themen abzugrenzen, sind diese nun unter Exkurs in den jeweiligen Abschnitten zusammengefasst.\\n\\n### L\xf6sungshinweise Test 1 - Klassenbasierte Programmierung (31.10.2023)\\nL\xf6sungshinweise sowie Anmerkungen und Erg\xe4nzungen k\xf6nnen\\n[hier heruntergeladen werden](./loesungshinweise-test1-prog-ws-23-24-fh-trier.pdf).  \\n\\n[^1]: Modulbegleitende Diskussions- und Lerngruppen sind auch auf unserem [Discord-Server](https://discord.gg/3g24RM2qKW) zu finden."},{"id":"shellsort-lauzeitanalyse","metadata":{"permalink":"/blog/shellsort-lauzeitanalyse","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2024-02-03-shellsort-laufzeitanalyse/index.mdx","source":"@site/blog/2024-02-03-shellsort-laufzeitanalyse/index.mdx","title":"[DE] Shellsort Laufzeitanalyse","description":"Donald Shell stellt 1959 in  einen Sortieralgorithmus vor, der sp\xe4ter nach ihm benannt wird: Shellsort.","date":"2024-02-03T00:00:00.000Z","tags":[{"inline":true,"label":"datastructures","permalink":"/blog/tags/datastructures"},{"inline":true,"label":"algorithms","permalink":"/blog/tags/algorithms"}],"readingTime":13.22,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"shellsort-lauzeitanalyse","title":"[DE] Shellsort Laufzeitanalyse","authors":["thorstensuckow"],"tags":["datastructures","algorithms"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] L\xf6sungshinweise Modul prog (Update 15.03.2024)","permalink":"/blog/loesungshinweise-prog-fh-trier"},"nextItem":{"title":"[DE] Zulassungsarbeit M.Sc. Informatik","permalink":"/blog/2023-12-31-zulassungsarbeit-master-of-computer-science"}},"content":"import {BackButton} from \\"../../src/components/BackButton.js\\";\\nimport {UmlEmbed, Embed} from \\"../../src/components/Embed\\";\\nimport {GlosRef, BibRef} from \\"../../src/components/References\\";\\n\\n\\n*Donald Shell* stellt 1959 in <BibRef name=\\"She59\\" /> einen Sortieralgorithmus vor, der sp\xe4ter nach ihm benannt wird: **Shellsort**.<br />\\nDie in dem Algorithmus verwendete Sortiermethode ist auch bekannt als\\n*Sortieren mit abnehmenden Inkrementen* <BibRef name=\\"OW17b\\" pp=\\"88\\" />, das Verfahren ist eine Variation von **Insertion Sort**:\\n\\n> [Shellsort] uses insertion sort on periodic subarrays of the input\\n> to produce a faster sorting algorithm. <BibRef name=\\"CL22\\" pp=\\"48\\" />\\n\\n\\nIn der vorliegenden Implementierung (siehe [Listing 1](#lst:1)) werden $t = log_2(n)$ Inkremente[^1]\\n$h_t$[^2] der Form $\\\\lfloor {\\\\frac{n}{2^i}} \\\\rfloor$ verwendet, um $lg(n)$\\n$h$-sortierte Folgen zu erzeugen. Im letzten Schritt sortiert der\\nAlgorithmus dann in $h_1$ die Schl\xfcssel mit Abstand=$1$.\\n\\nDie Effizienz des Sortierverfahrens ist stark abh\xe4ngig von $h$: So zeigt\\n*Knuth*, dass $O(n^{\\\\frac{3}{2}})$ gilt, wenn f\xfcr $h$ gilt:\\n$h_s = 2^{s+1} - 1$ mit $0 \\\\leq s < t = \\\\lfloor{lg(n)} \\\\rfloor$ (vgl.  <BibRef name=\\"Knu97c\\" pp=\\"91\\" />[^3]. In unserem Fall k\xf6nnen wir von $O(n^2)$ ausgehen.\\n\\n\x3c!--truncate--\x3e\\n\\n### Anzahl der Aufrufe f\xfcr Feldvergleiche\\n\\nGesucht ist die Anzahl der zwischen zwei Feldelementen gemachte Vergleiche f\xfcr gro\xdfe randomisierte Felder.\\nWir vermuten hierf\xfcr einen Wert zwischen $O(n\\\\ lg\\\\ n)$ und $O(n^2)$,\\n\\nUm die Aufrufe der Feldvergleiche zu z\xe4hlen, kann wie in [Listing 1](#lst:1) eine Z\xe4hlvariable $c3$ eingesetzt wird, die\\njeden Aufruf \xfcber ein *increment* protokolliert.\\n\\n<a name=\\"lst:1\\"></a>\\n\\n```java title=\\"Listing 1: Zur Protokollierung der Aufrufe k\xf6nnen in dem Code Z\xe4hlvariablen eingesetzt werden (c1, ... ,c4).\\" {2, 5, 7, 9} showLineNumbers\\nwhile (distanz > 0) {\\n    c1++;\\n    for (i = distanz; i < feld.length; i++) {\\n        j = i - distanz;\\n        c2++;\\n        while (j >= 0) {\\n            c3++;\\n            if (feld[j] > feld[j + distanz]) {\\n                c4++;\\n                swap(feld, j, j+distanz);\\n                j = j - distanz;\\n            } else {\\n                j =-1;\\n            }\\n        }\\n    }\\n    distanz = distanz / 2;\\n}\\n```\\n\\nZur Bestimmung von $c3$ k\xf6nnen randomisierte Felder erzeugt werden, wie\\nes der Test-Code in [Listing 2](#lst:2) demonstriert. Dann wird \xfcberpr\xfcft, in welchen Bereichen sich $c3$ bewegt.\\nDa jeder auf Vergleichsoperationen basierende Sortieralgorithmus zu der Laufzeitklasse $\\\\Omega(n\\\\ log\\\\ n)$\\ngeh\xf6rt, kann im Mittel $c3 \\\\geq n\\\\ log\\\\ n$ angenommen werden:\\n\\n> Jedes allgemeine Sortierverfahren ben\xf6tigt zum Sortieren von N\\n> verschiedenen Schl\xfcsseln sowohl im schlechtesten Fall als auch im\\n> Mittel wenigstens $\\\\Omega(N\\\\ log\\\\ N)$ Schl\xfcsselvergleiche.\\n>\\n>  <BibRef name=\\"OW17b\\" pp=\\"154\\" />\\n\\n\\nAllerdings wird $n^{1.3}$ ab $n=982$ schneller wachsen als $n\\\\ log\\\\ n$\\n(siehe [Abbildung 1](#fig:lognplot)), was in der Auswertung ber\xfccksichtigt\\nwerden muss. Sonst k\xf6nnte man f\xe4lschlicherweise folgern, das in dem geg.\\nFall die Laufzeit im Durchschnitt $n\\\\ log\\\\ n$ betr\xe4gt.\\n\\n<a name=\\"lst:2\\"></a>\\n\\n```java title=\\"Listing 2: Code zum Erzeugen randomisierter Felder zum Testen von Shellsort.\\" showLineNumbers\\nint epochs = 2000;\\nwhile(epochs-- >= 0) {\\n    int[] tests = new int[]{10, 100, 1000, 100_000, 1_000_000};\\n    java.util.Random r = new java.util.Random();\\n    for (int i = 0; i < tests.length; i++) {\\n        int l = tests[i];\\n        int[] arr = new int[l];\\n\\n        for (int j = l; j > 0; j--) {\\n            arr[l - j] = r.nextInt(l + 1);\\n        }\\n\\n        ShellSort.sort(Arrays.copyOfRange(arr, 0, arr.length));\\n    }\\n}\\n```\\n\\n:::info\\nMit einem Wert von $100$ f\xfcr die Epochen und einer Feldgr\xf6\xdfe von\\n$2.000.000$ liefert der Test in [Listing 2](#lst:2) folgende Ausgabe:\\n\\n$nlgn < n^{1.3} < x < n^2: 74$ <br />\\n$nlgn < x < n^{1.3}: 26$\\n:::\\n\\n\\nimport LognPlotPng from \\"./img/lognplot.png\\";\\n\\n<a name=\\"fig:lognplot\\"></a>\\n<Embed\\n    modeAware={true}\\n    width={640}\\n    figure={1}\\n    title={\\"Ab <i>n=982</i> w\xe4chst n<sup>(4/3)</sup> schneller al <i>n log n</i>.\\" }\\n><img src={LognPlotPng}  /></Embed>\\n\\n\\n\\nWegen $\\\\Omega(n\\\\ log\\\\ n)$ interessieren wir uns f\xfcr die Intervalle:\\n\\n-   $n\\\\ log\\\\ n \\\\leq c3 \\\\leq n^{1.3}$\\n\\n-   $n\\\\ log\\\\ n \\\\leq n^{1.3} \\\\leq c3 \\\\leq n^2$\\n\\nDie Ausf\xfchrung des Tests zeigt, dass die Aufrufanzahl von $c3$ bei\\ngro\xdfen $n$ unterhalb $n^{1.3}$ oder zwischen $n^{1.3}$ und $n^2$ liegt:\\n\\n> It appears that the time required to sort $n$ elements is proportional\\n> to $n^{1.226}$.[^4] <BibRef name=\\"She59\\" pp=\\"31\\" />\\n\\n## Laufzeitanalyse\\n\\nF\xfcr die nachfolgenden Betrachtungen sei eine Eingabegr\xf6\xdfe $n = 2^p$\\ngegeben. Die Inkremente $h$ entsprechen der \xfcber die Implementierung\\nvorgegebenen Folge $h$ mit\\n\\n<center>\\n\\n$h_t = \\\\frac{n}{2}, h_{t-1} = \\\\frac{n}{4}, \\\\dots, h_1 = 1$\\n\\n</center>\\n\\nF\xfcr die Analyse ist die **Shellsort**-Implementierung in\\n[Listing 3](#lst:shellsort) gegeben.\\n\\n<a name=\\"lst:shellsort\\"></a>\\n\\n```java title=\\"Listing 3: Implementierung des Shellsort-Algorithmus.\\" showLineNumbers\\npublic static int[] sort(int[] arr) {\\n\\n    int n = arr.length;\\n    int delta = n/2;\\n    int min;\\n    int j;\\n\\n    while (delta > 0) { // c1\\n\\n        for (int i = delta; i < arr.length; i++) {\\n\\n            // c2\\n\\n            min = arr[i];\\n            j = i;\\n\\n            while (j - delta >= 0 && min < arr[j - delta]) {\\n\\n                // c3;\\n\\n                arr[j] = arr[j - delta];\\n                j -= delta;\\n            }\\n            arr[j] = min;\\n        }\\n\\n        delta = delta / 2;\\n\\n    }\\n    return arr;\\n}\\n```\\n\\nIm Folgenden betrachten wir die Anzahl f\xfcr die im Code durch Kommentare\\nmarkierten Stellen $c1$ in Zeile 8, $c2$ in Zeile 12 und $c3$ in Zeile\\n19.\\n\\n\\nF\xfcr eine erste *worst-case*-Analyse ist ein Feld der L\xe4nge $16$ gegeben,\\nin absteigender Reihenfolge sortiert (s. [Abbildung 2](#fig:bestcase)):\\n\\n\\nimport BestcaseSequence from \\"./img/bestcase-sequence.png\\";\\n\\n<a name=\\"fig:bestcase\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={2}\\n    title={\\"Die f\xfcr die Laufzeitabsch\xe4tzung verwendete Eingabefolge <i>16..1</i>.\\" }\\n><img src={BestcaseSequence}  /></Embed>\\n\\n\\n\\nGanz offensichtlich gilt f\xfcr **c3**, dass es $lg(n)$-mal aufgerufen\\nwird[^5].\\n**c2** befindet sich im Block der durch die in Zeile 11 definierten\\nZ\xe4hlschleife.\\n\\nDer Startwert f\xfcr `i` ist in jedem Durchgang des Blocks $c1$ der aktuelle\\nWert von `delta` [^6], und l\xe4uft jeweils bis $n - 1$.\\n\\nIn einem kompletten Durchlauf der Schleife entspricht die Anzahl der\\nAufrufe von $c2$ also\\n\\n<center>\\n\\n$(n - 1) - delta + 1 = n - delta$\\n\\n</center>\\n\\n:::info\\n**Hinweis:**\\nF\xfcr das Beispiel betrachten wir der Einfachheit halber Feldl\xe4ngen der\\nForm $2^p$.\\nF\xfcr den allgemeinen Fall gilt f\xfcr die Anzahl der Aufrufe von $c2$: <br />\\n<center>\\n\\n$\\\\sum_{i=1}^{\\\\lfloor lg(n) \\\\rfloor} n - \\\\lfloor \\\\frac{n}{2^i} \\\\rfloor = n * lg(n) - \\\\sum_{i=1}^{\\\\lfloor lg(n) \\\\rfloor} \\\\lfloor \\\\frac{n}{2^i} \\\\rfloor$\\n</center>\\n\\n:::\\n\\nF\xfcr die Gesamtzahl der Aufrufe von $c2$ ergibt sich somit unter\\nBer\xfccksichtigung von $c1$\\n\\n<center>\\n\\n$\\\\sum_{i=1}^{lg(n)} n - \\\\frac{n}{2^{i-1}}$\\n\\n</center>\\nwas nach Aufl\xf6sen\\n\\n<center>\\n\\n$n * lg(n) - n + 1$\\n\\n</center>\\n\\nentspricht, und f\xfcr unser Beispiel\\n\\n<center>\\n\\n$16 * lg(16) - 16 + 1 = 49$\\n\\n</center>\\n\\nist.\\n\\n:::info\\n  Die Aufrufzahlen f\xfcr $c2$ f\xfcr verschiedene $n$. Schl\xfcsselvergleiche finden erst sp\xe4ter statt.\\n  Mit $n > 2156$ w\xe4chst $O(n^\\\\frac{4}{3})$ schneller als $c2$ und mit $n >= 982$ schneller als\\n  $O(n\\\\ log\\\\ n)$.\\n\\n\\n\\n|   **n**   |   **c2**   | **$O(n^{1.1})$** | **$O(n^{1.3})$** | **$O(n\\\\ log\\\\ n)$** | **$O(n^2)$**  |\\n|:---------:|:----------:|:---------------:|:---------------:|:-------------------:|:------------:|\\n|     8     |     17     |        9        |        14       |          24          |      64      |\\n|    16     |     49     |       21        |        36       |          64          |     256      |\\n|    32     |    129     |       45        |        90       |         160          |    1024      |\\n|    64     |    321     |       97        |       222       |         384          |    4096      |\\n|   128     |    769     |      207        |       548       |         896          |   16.384     |\\n|   256     |   1793     |      445        |      1351       |        2048          |   65.536     |\\n|   1024    |   9217     |      2048       |      8192       |       10240          | 1.048.576    |\\n|   2156    |   21.565   |    4.645,29     |    21.564,69    |      23.875,84       | 4.648.336    |\\n|   2157    |   21.576   |    4.647,66     |    21.577,70    |      23.888,36       | 4.652.649    |\\n|   2158    |   21.586   |    4.650,03     |    21.590,70    |      23.900,88       | 4.656.964    |\\n|   ...     |    ...     |      ...        |       ...       |         ...          |     ...      |\\n|  10.000   |  120.005   |     25.118      |     158.489     |       132.877        |    1.0E8     |\\n| 100.000   | 1.500.006  |     316.227     |    3.162.277    |      1.660.964      |    1.0E10    |\\n| 200.000   | 3.200.006  |     677.849     |    7.786.440    |      3.521.928      |    4.0E10    |\\n| 500.000   | 8.500.007  |   1.857.235     |    2.56..E7     |      9.465.784      |    2.5E11    |\\n| 1.000.000 | 18.000.007 |   3.981.071     |    6.30..E7     |      1.99..E7       |    1.0E12    |\\n\\n:::\\n\\nIn der `while`-Schleife in Zeile 17 findet die eigentliche\\nArbeit des Algorithmus statt: Es wird \xfcberpr\xfcft, ob $delta$-entfernte\\nElemente in aufsteigender Reihenfolge sortiert angeordnet sind.<br />\\n\\nIst das nicht der Fall, werden die Elemente an den Stellen $j$ und\\n$j - delta$ ausgetauscht, bis die $h$-Folge sortiert ist. <br />\\nF\xfcr den ersten Durchgang des Algorithmus an dieser Stelle mit $h_4 = 8$\\nergibt sich somit die in [Abbildung 3](#fig:bestcase-it1) dargestellte Reihenfolge der Schl\xfcssel:\\n\\n\\nimport BestcaseIt1 from \\"./img/bestcase-it1.png\\";\\n\\n<a name=\\"fig:bestcase-it1\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={3}\\n    title={\\"Nach dem ersten Durchgang sind die Schl\xfcssel in den Abst\xe4nden <i>h<sub>4</sub> = 8</i> sortiert, es ergeben sich zwei sortierte Teilfolgen der L\xe4nge <i>8</i>.\\" }\\n><img src={BestcaseIt1}  /></Embed>\\n\\n\\nDie weiteren Durchg\xe4nge des Algorithmus sortieren das Feld entsprechend\\nder Gr\xf6\xdfe $h$: Es sind danach jeweils Schl\xfcssel mit den Abst\xe4nden $4$ ([Abbildung 4](#fig:bestcase-it2) und $2$\\n([Abbildung 5](#fig:bestcase-it3)) sortiert; im letzten Schritt dann vollst\xe4ndig ([Abbildung 6](#fig:bestcase-it4)):\\n\\n\\nimport BestcaseIt2 from \\"./img/bestcase-it2.png\\";\\n\\n<a name=\\"fig:bestcase-it2\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={4}\\n    title={\\"Die Sortierung f\xfcr <i>h<sub>3</sub> = 4</i>, es sind 4 Folgen deren Schl\xfcssel jeweils den Abstand <i>4</i> zueinander haben.\\" }\\n><img src={BestcaseIt2}  /></Embed>\\n\\n\\n\\nimport BestcaseIt3 from \\"./img/bestcase-it3.png\\";\\n\\n<a name=\\"fig:bestcase-it3\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={5}\\n    title={\\"Im vorletzten Sortierschritt sind <i>8</i> Folgen der L\xe4nge <i>2</i> sortiert.\\" }\\n><img src={BestcaseIt3}  /></Embed>\\n\\nimport BestcaseIt4 from \\"./img/bestcase-it4.png\\";\\n\\n<a name=\\"fig:bestcase-it4\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={6}\\n    title={\\"Der letzte Durchgang des Algorithmus vergleicht Schl\xfcssel mit Distanzfolgen der L\xe4nge <i>1</i>, also direkt benachbarte Schl\xfcssel.\\" }\\n><img src={BestcaseIt4}  /></Embed>\\n\\n\\nF\xfcr die Berechnung der Anzahl der Aufrufe von $c3$ stellt man fest, das\\nin diesem Fall in jedem Schritt *immer* 2 Elemente, die eine Distanz von\\n$h_s$ aufweisen, falsch sortiert sind.\\n\\nDer Algorithmus tauscht daraufhin in jedem Durchgang alle\\nSchl\xfcssel untereinander aus, die er \xfcber `min < arr[j-delta]` miteinander vergleicht, was\\nfolglich die maximale Anzahl von Schl\xfcsselvertauschungen in dieser\\nvergleichsbasierten Implementierung f\xfcr ein Feld der Gr\xf6\xdfe $n$ ergibt,\\nn\xe4mlich $\\\\frac{n}{2}$. Insgesamt finden dadurch f\xfcr $c3$\\n\\n<center>\\n\\n$lg(n) * \\\\frac{n}{2}$\\n\\n</center>\\n\\nAufrufe statt.\\n\\nMit der Anzahl der berechneten Aufrufe $c1, c2, c3$ ergibt sich somit\\nf\xfcr die Laufzeit $T(n)$ f\xfcr diesen Fall\\n\\n<center>\\n\\n$lg(n) + n * lg(n) - n + 1 +  lg(n) * \\\\frac{n}{2}$\\n\\n</center>\\n\\nund zusammengefasst\\n\\n<center>\\n\\n$f(n) = \\\\frac{3}{2} * n * lg(n) + lg(n) - n + 1$\\n\\n</center>\\n\\nwas nach Einsetzen zu\\n\\n<center>\\n\\n$lg(16) + 16 * lg(16) - 16 + 1 +  lg(16) * \\\\frac{16}{2} = 85$\\n\\n</center>\\n\\nAufrufen f\xfcr unser Beispiel f\xfchrt.\\n\\n## Nachweis der Komplexit\xe4tsklasse\\n\\nUm $O$ zu ermitteln, werden nun alle Konstanten der\\nFunktion\\n\\n<center>\\n\\n$f(n) = \\\\frac{3}{2} * n * lg(n) + lg(n) - n + 1$\\n\\n</center>\\n\\n\\neliminiert, und der \\"dominante\\" Summand in Abh\xe4ngigkeit von $n$ betrachtet, der in diesem Fall $lg(n) * n$ ist.\\n\\nWir vermuten ein $N-log-N$-Wachstum[^7] (vgl. <BibRef name=\\"OW17a\\" pp=\\"5\\" />), und wollen\\nnun zeigen, dass $T(n)$ in $O(n\\\\ log\\\\ n)$ liegt.<br />\\nHierf\xfcr m\xfcssen wir ein geeignetes $c$ und ein $n_0$ finden, so dass gilt:\\n\\n<center>\\n\\n$f \\\\in O(n\\\\ log\\\\ n): \\\\leftrightarrow \\\\exists n_0 \\\\in \\\\mathbb{N}, c \\\\in \\\\mathbb{R}, c > 0: \\\\forall n \\\\geq n_0: f(n) \\\\leq c * n*lg(n)$\\n\\n</center>\\n\\n(vgl. <BibRef name=\\"GD18a\\" pp=\\"11\\" />).\\n\\n\\nZu zeigen ist\\n\\n<center>\\n\\n$\\\\frac{3}{2} * n * lg(n) + lg(n) - n + 1 \\\\leq c * n * lg(n)$\\n\\n</center>\\n\\nWir w\xe4hlen f\xfcr $n_0 = 1$ und $c = \\\\frac{3}{2}$, denn es gilt sicher\\n\\n<center>\\n\\n$\\\\forall n \\\\geq n_0: \\\\frac{3}{2} * n * lg(n)  \\\\leq \\\\frac{3}{2} * n * lg(n)$.\\n\\n</center>\\n\\nAusserdem gilt stets $\\\\forall n \\\\in \\\\mathbb{N}: lg(n) < n$, woraus\\n$lg(n) - n < 0$ folgt, und damit auch $lg(n) - n + 1 \\\\leq 0$.\\n\\nInsgesamt gilt also\\n\\n<center>\\n\\n$n_0 = 1, c = \\\\frac{3}{2}: \\\\forall n \\\\geq n_0: \\\\frac{3}{2} * n * lg(n) + lg(n) - n + 1 \\\\leq c * n * lg(n)$\\n\\n</center>\\n\\nwomit $f = O(n * log(n))$ gezeigt ist. \u25fb\\n\\n\\n## Worst-Case-Analyse {#worst-case-analyse .unnumbered}\\n\\nUnter der Annahme, dass ein in umgekehrter Reihenfolge sortiertes Feld\\nzu einer Laufzeit von $O(n^2)$ bei dem **Shellsort**-Algorithmus f\xfchrt,\\nkonnten wir mit dem in dem vorherigen Abschnitt gew\xe4hlten Parametern nur\\neine Laufzeit von $O(n\\\\ log\\\\ n)$ nachweisen.<br />\\nTats\xe4chlich stellt der Anwendungsfall _nicht_ den worst-case f\xfcr den\\nAlgorithmus dar, da ja gerade diese Form von Sortierreihenfolge dem\\nAlgorithmus die Vorsortierung der $h$-Folgen erm\xf6glicht:\\n\\n> The idea underlying Shellsort is that moving elements of A long\\n> distances at each swap in the early stages, then shorter distances\\n> later, may reduce this $O(n^2)$ bound. <BibRef name=\\"Pra72\\" pp=\\"3\\" />\\n\\n\\nEs gilt also, die Vorsortierung auszuhebeln.<br />\\nF\xfcr **Insertion-Sort** ist die Laufzeit im worst-case $O(n^2)$\\n(vgl. <BibRef name=\\"OW17b\\" pp=\\"87\\" />). Da Shellsort mindestens im letzten Schritt diese\\nSortiermethode auf Distanzfolgen der L\xe4nge $1$ anwendet, muss der\\nAlgorithmus eine Folge als Eingabe erhalten, die durch die ersten\\n$lg(n) - 1$-Durchg\xe4nge (mit $h_s = 2^{s - 1}, 1 \\\\leq s < lg(n)$)\\n**keine \xc4nderungen** erf\xe4hrt, um dann\\nim allerletzten Schritt **auf einen Schlag** sortiert wird, was\\nmaximal $\\\\frac{n}{2}$ Inversionen[^8] bedeutet, und damit ebenso viele Vertauschungen (zuz\xfcglich der ben\xf6tigten\\nVerschiebe-Operationen).<br />\\nHierzu kann wie im vorherigen Beispiel f\xfcr $n=16$ ein Feld mit folgender\\nSchl\xfcsselanordnung verwendet werden: Felder mit geradem Index enthalten\\nkleinere Schl\xfcssel als Felder mit ungeradem Index. Hier gilt f\xfcr alle\\nElemente aus dem Feld $A$:\\n\\n<center>\\n\\n$\\\\forall i, j \\\\in \\\\mathbb{N}_{[0, n - 1]}, 2 \\\\mid i, 2 \\\\nmid j:  A[i] < A[j] \\\\land A[i] < A[i + 1] \\\\land A[j] < A[j +1]$\\n\\n</center>\\n\\n[Abbildung 7](#fig:worstcase-sequence) veranschaulicht die Anordnung.\\n\\nimport WorstcaseSeq from \\"./img/worstcase-sequence.png\\";\\n\\n<a name=\\"fig:worstcase-sequence.png\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={7}\\n    title={\\"Eine <b>worst-case</b> Schl\xfcsselfolge f\xfcr Shellsort. Felder mit geradem Index enthalten kleinere Schl\xfcssel als Felder mit ungeradem Index.\\" }\\n><img src={WorstcaseSeq}  /></Embed>\\n\\n\\nMarkiert sind die direkt benachbarten Felder, die eine *Inversion*\\naufweisen, die im letzten Schritt des Algorithmus eine bzw. mehrere\\nVerschiebungen bedingen.<br/>\\nIn den vorherigen Schritten - also bei den Durchg\xe4ngen mit Distanzfolgen\\n$h_s > 1$  - findet der Algorithmus jeweils Schl\xfcssel in korrekter\\nSortierreihenfolge vor.\\n\\nMit $h_4 = 8$ werden die Felder $A[0..7]$ mit den Feldern $A[8..15]$\\nverglichen - hier gilt in jedem Fall, dass die Schl\xfcssel\\n$A[i] < A[j] (\\\\forall i < j, j - i = 8)$ sind.\\n\\nAuch im darauffolgenden Durchgang ($h_3 = 4, j - i = 4$) finden keine\\nVerschiebungen statt, da keine Inversion gefunden wird. Erst im letzten\\nSchritt, in dem direkt benachbarte Elemente miteinander verglichen\\nwerden, werden die Inversionen ermittelt und die Verschiebung der\\nElemente findet statt (s. [Abbildung 8](#fig:worstcase-sortsequence).\\n\\nimport WorstcaseSortSeq from \\"./img/worstcase-sortsequence.png\\";\\n\\n<a name=\\"fig:worstcase-sortsequence.png\\"></a>\\n<Embed\\n    modeAware={true}\\n    figure={8}\\n    title={\\"F\xfcr die <b>worst-case</b> Schl\xfcsselfolge werden im letzten Schritt 7 Inversionen festgestellt. Jede dieser Fehlstellung bedingt eine Verschiebung um die angegebene Anzahl von Positionen.\\" }\\n><img src={WorstcaseSortSeq}  /></Embed>\\n\\n\\nIn diesem Fall wird $c3$ insgesamt $32$ mal aufgerufen.\\n\\nDa jeweils zwei Schl\xfcssel bereits korrekt sortiert sind ($A[0]$ und\\n$A[n-1]$) existieren noch $\\\\frac{n}{2} - 1$ Inversionen. Jede Inversion\\nerzwingt eine Verschiebung des gr\xf6\xdften Elements um $\\\\frac{i}{2}$\\nPositionen nach links.\\n\\nF\xfcr die Berechnung der Laufzeitkomplexit\xe4t ergibt sich somit der Term\\n\\n<center>\\n\\n$\\\\sum_{i=1}^{\\\\frac{n}{2} - 1} i = \\\\frac{\\\\frac{n}{2}(\\\\frac{n}{2} - 1)}{2} = \\\\frac{n^2 - 2n}{8}$\\n\\n</center>\\n\\nund unter Ber\xfccksichtigung der Terme f\xfcr $c1$, $c2$, $c3$ die Funktion\\n\\n<center>\\n\\n$f(n) = lg(n) + n * lg(n) - n + 1 +  \\\\frac{n^2 - 2n}{8}$\\n\\n</center>\\n\\nwas zu einer Laufzeitabsch\xe4tzung von $O(n^2)$ f\xfchrt.\\n\\n\\n[^1]: mit $n =$ L\xe4nge des zu sortierenden Feldes. Im folgenden $lg$ f\xfcr\\n$log_2$.\\n\\n[^2]: vgl. <BibRef name=\\"Knu97c\\" pp=\\"84\\" />\\n\\n[^3]: *Knuth* bezieht sich hier auf die Arbeit von *Papernov und Stasevich* (<BibRef name=\\"PS65\\" />). Weitere Verweise auf\\nLaufzeiten in Abh\xe4ngigkeit von $n$ und $h$ fasst \xfcbersichtlich der Wikipedia-Artikel zusammen: [https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort) (abgerufen 23.01.2024).\\n\\n[^4]: *Shell* f\xfchrt in seinem Paper keinen Beweis auf. Er st\xfctzt seine\\n    Behauptung auf Messungen, die er selber in Tests durchgef\xfchrt hat:\\n    \\"\\\\[\\\\...\\\\] an analytical determination of the expected speed has\\n    eluded the writer. However, experimental use has established its\\n    speed characteristics.\\" (ebenda)\\n\\n[^5]: hier wie im folgenden ohne Betrachtung der Schleifenbedingung, die\\n    an dieser Stelle insgesamt $lg(n) + 1$-mal aufgerufen wird\\n\\n[^6]: ${8, 4, 2, 1}$ f\xfcr das gegebene Beispiel\\n\\n[^7]: mit $O(log\\\\ n)$ bzw $O(n\\\\ log\\\\ n)$ nehmen wir f\xfcr die $O$-Notation\\n    wieder die in der Fachliteratur gebr\xe4uchlichere Schreibweise auf.\\n    Sowohl *G\xfcting und Dieker* als auch *Ottmann und Widmayer* weisen in <BibRef name=\\"GD18a\\" pp=\\"15\\" /> bzw. <BibRef name=\\"OW17a\\" pp=\\"5\\" /> darauf hin,\\n        dass die Angabe der Basis\\n    keine Rolle spielt, da sich Logarithmen mit verschiedenen Basen\\n    ohnehin nur durch einen konstanten Faktor unterscheiden (es gilt $log_a(x) = \\\\frac{log_b(x)}{log_b(a)}$).\\n\\n[^8]: in diesem Zusammenhang bedeutet Inversion: *Fehlstellung*\\n    (vgl. <BibRef name=\\"OW17b\\" pp=\\"87\\" />)"},{"id":"2023-12-31-zulassungsarbeit-master-of-computer-science","metadata":{"permalink":"/blog/2023-12-31-zulassungsarbeit-master-of-computer-science","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-12-31-zulassungsarbeit-master-of-computer-science/index.mdx","source":"@site/blog/2023-12-31-zulassungsarbeit-master-of-computer-science/index.mdx","title":"[DE] Zulassungsarbeit M.Sc. Informatik","description":"Man darf behaupten, dass im Jahr 2023 das Thema K\xfcnstliche Intelligenz endg\xfcltig in der Gesellschaft angekommen ist. Mit der Ver\xf6ffentlichung von ChatGPT Ende 2022 ist \\"KI\\" pl\xf6tzlich f\xfcr jeden begreifbar. Einmal mehr rutschen def\xe4tistische Prophezeiungen auf die Titelseiten der Boulevard-Presse.","date":"2023-12-31T00:00:00.000Z","tags":[{"inline":true,"label":"study","permalink":"/blog/tags/study"},{"inline":true,"label":"university","permalink":"/blog/tags/university"},{"inline":true,"label":"artificial intelligence","permalink":"/blog/tags/artificial-intelligence"},{"inline":true,"label":"trier university of applied sciences","permalink":"/blog/tags/trier-university-of-applied-sciences"}],"readingTime":5.19,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"2023-12-31-zulassungsarbeit-master-of-computer-science","title":"[DE] Zulassungsarbeit M.Sc. Informatik","authors":["thorstensuckow"],"tags":["study","university","artificial intelligence","trier university of applied sciences"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] Shellsort Laufzeitanalyse","permalink":"/blog/shellsort-lauzeitanalyse"},"nextItem":{"title":"Perceptron Function Plotting with Python","permalink":"/blog/2023/07/11/perceptron-function-plotting-in-python"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n![](img/zulassungsarbeit.jpg)\\n\\n\\nMan darf behaupten, dass im Jahr 2023 das Thema **K\xfcnstliche Intelligenz** endg\xfcltig [in der Gesellschaft angekommen ist](https://wikimediafoundation.org/news/2023/12/05/announcing-wikipedias-most-popular-articles-of-2023/). Mit der Ver\xf6ffentlichung von ChatGPT Ende 2022 ist \\"KI\\" pl\xf6tzlich f\xfcr jeden ~~be~~greifbar. Einmal mehr rutschen [def\xe4tistische Prophezeiungen auf die Titelseiten der Boulevard-Presse](https://www.bild.de/news/ausland/news-ausland/experten-warnen-ki-so-gefaehrlich-wie-pandemien-und-atomkrieg-84130180.bild.html).\\n\\nAls Software Entwickler mit Schwerpunkt Design und Architektur hatte ich _K\xfcnstliche Intelligenz_ bis dahin weitestgehend in den akademischen Bereich verortet.\\n\\nDann hatte ich das Gl\xfcck, mich ausgiebig mit K\xfcnstlicher Intelligenz im Rahmen meiner [Zulassungsarbeit](https://www.hochschule-trier.de/informatik/fernstudium/studium/masterfernstudium/mcsc-zulassung/informationen-zur-eignungspruefung/eignungspruefung-inhalt) f\xfcr den Fernstudiengang Informatik (M.C.Sc.) an der [Hoschschule Trier](https://www.hochschule-trier.de/) besch\xe4ftigen zu d\xfcrfen.\\n\\n Entstanden ist eine Arbeit, in dem ich mathematische Modelle k\xfcnstlicher Neuronen vorstelle. Auf dem Weg dorthin bin ich in die fr\xfchen Anf\xe4nge der Neurowissenschaft, der Kybernetik und Rechnerarchitektur eingetaucht. Es hat meine Sichtweise auf vieles, was mir bis dahin (un)verst\xe4ndlich gewesen ist, ge\xe4ndert.\\n\x3c!--truncate--\x3e\\n F\xfcr meine Kommilitonen, die die Eignungspr\xfcfung noch vor sich haben, habe ich in diesem Post meine Erfahrungen zum Thema _Wissenschaftliches Arbeiten_ zusammengefa\xdft.\\n\\n## Thema\\nF\xfcr 2023 stand die [Zulassungsarbeit zum Master-Fernstudiengang Informatik](https://www.hochschule-trier.de/informatik/fernstudium/studium/masterfernstudium/mcsc-zulassung/informationen-zur-eignungspruefung/eignungspruefung-inhalt) an der [Hoschschule Trier](https://www.hochschule-trier.de/)\\nunter dem Thema **Funktionsprinzipien und Anwendung k\xfcnstlicher Intelligenz (KI) in der Medizin**.\\n\\nDas Thema wurde Ende Mai 2023 bekannt gegeben, als Bearbeitungszeitraum wurde der 01.07. - 02.10.2023 vorgegeben.\\n\\n## Vorbereitung\\n\\nZur Einarbeitung in das Thema hat mir **Grundkurs K\xfcnstliche Intelligenz** <BibRef name=\\"Ert21\\" /> von [Prof. Dr. Wolfgang Ertel](https://www.hs-weingarten.de/~ertel/de) (Hochschule Ravensburg-Weingarten) geholfen. Das Buch hat mich auf die (formalen) Grundlagen der Aussagenlogik und Pr\xe4dikatenlogik vorbereitet sowie einf\xfchrend maschinelles Lernen und Neuronale Netze erkl\xe4rt, was mir die anschliessende Arbeit mit [Russel](https://people.eecs.berkeley.edu/~russell/) & [Norvig](https://www.norvig.com/)\'s <BibRef name=\\"RN12\\" /> erleichterte. Das Standardwerk zum Thema **K\xfcnstliche Intelligenz**  geht detailliert (in Teilen auch sehr formal) auf Agentenmodelle, Probleml\xf6sungen, Logik, Entscheiden und Lernen ein.\\n\\nDa nicht nur K\xfcnstliche Intelligenz als Thema vorgeben gewesen ist, sondern auch _Medizin_, habe ich dar\xfcber hinaus <BibRef name=\\"Pfa22\\" /> (quer)gelesen, um mir einen \xdcberblick \xfcber die verschiedenen Anwendungsgebiete von KI im Gesundheitswesen zu verschaffen. Erg\xe4nzend dazu habe ich mit gro\xdfem Interesse den Podcast [Dr. med. KI](https://www.ki-campus.org/podcasts/drmedki) von [Prof. Dr. Kerstin Ritter](https://psychiatrie-psychotherapie.charite.de/metas/person/person/address_detail/prof_dr_rer_nat_kerstin_ritter/) (Charit\xe9 Berlin) und [Mike Bernd](https://stifterverband.org/ueber_uns/mitarbeiter/bernd_mike) (Stifterverband f\xfcr die Deutsche Wissenschaft e.V.) verfolgt, in dem Themen aus den Bereichen Medizin, Informatik und Ethik zusammengefasst und Hintergr\xfcnde, Problematiken und Ausblicke in Zusammenhang mit KI diskutiert werden.\\n\\n## Eingrenzung des Themas und Ausarbeitung\\nIm Juli des gleichen Jahres habe ich dann mit der Ausarbeitung begonnen, das Thema hatte ich - noch etwas unscharf - auf den Einsatz von KI bei bildgebenden Verfahren in der Medizin eingegrenzt. Da hier KI \xfcberwiegend in Form neuronaler Netze stattfindet, musste ich mich also noch in dieses Thema einarbeiten: W\xe4hrend die Vorbereitung im Juni also das Verst\xe4ndnis um K\xfcnstliche Intelligenz gesch\xe4rft hatte, wurde mir schnell klar, dass das ein blo\xdfes Kratzen an der Oberfl\xe4che gewesen ist. Um Modelle neuronaler Netze nachvollziehen zu k\xf6nnen, musste ich zun\xe4chst das biologische Vorbild verstehen, was mich zu den Neurowissenschaften f\xfchrte.\\n\\nDie Literatur, die ich bis zu diesem Zeitpunkt durchgearbeitet habe, hatte meinem Empfinden nach die tierische Nervenzelle als Mittel zum Zweck gesehen: Signalweiterleitung und verrechnende Einheiten in einem neuronalen Netze wurde zwar als Abstraktion biochemischer Vorg\xe4nge im Gehirn verstanden, aber das **Warum** und **Wie** wurde wenig ausf\xfchrlich erkl\xe4rt.\\n\\nEs war mir also ein gro\xdfes Anliegen,die komplexen biochemischen Vorg\xe4nge im Nervensystem zu verstehen und als fachlichen Hintergrund der Arbeit voranzustellen, um die gro\xdfen Erfolge, die der Einsatz K\xfcnstlicher Intelligenz in den letzten Jahren in der Medizin vorweisen konnte, dem Leser besser verst\xe4ndlich zu machen.\\n\\nFolglich legte ich das Thema meiner Arbeit fest:\\n\\n**Eine Einf\xfchrung in mathematische Modelle der biologischen Nervenzelle als Bausteine k\xfcnstlicher neuronaler Netze und deren Anwendung im Gesundheitswesen**.\\n\\nEs sollte die Signalweiterleitung im biologischen Neuron erkl\xe4ren, erste, fr\xfche Modelle k\xfcnstlicher Neuronen vorstellen, den Bogen zu k\xfcnstlichen neuronalen Netzen spannen und dann Anwendungsbeispiele aus dem Gesundheitswesen auff\xfchren.\\n\\n\\n## Abgabe und Bewertung\\nIch hatte damit begonnen, erste Entw\xfcrfe in Markdown zu schreiben, damit mir eine sp\xe4tere \xdcberf\xfchrung der Arbeit in eine lesbare Form auf meine Webseite erleichtert wird. Die Hochschule stellt Word- und Latex-Vorlagen zur Verf\xfcgung - die ich im Anschluss f\xfcr eine Portierung nutzen wollte.\\n\\nAls ich mit dem ersten Entwurf meiner Arbeit  - ca. Mitte September - fertig war, hatte ich nach Korrektur und meiner (bescheidenen) Z\xe4hlweise nach gut und gerne 20 - 30 DIN A4 Seiten Text (ohne Illustrationen und Tabellen) - an der Stelle war mir aber schon klar, dass ich den ein oder anderen Abschnitt eher ausf\xfchrlich als kompakt beschrieben habe, weshalb ich noch eine Woche Lektorat eingeplant hatte.\\n\\nNach der \xdcberf\xfchrung in Latex, die ca. eine Woche gedauert hat, z\xe4hlte ich - unter Verwendung der Vorlage, die Trier zur Verf\xfcgung gestellt hat, ca. 80 Seiten - ohne Inhalts-, Literatur- und Abbildungsverzeichnis. Das Lektorat umfasste also nicht nur inhaltliche und formale Korrekturen, sondern teilweise auch das komplette Umschreiben des ein oder anderen Kapitels, weil viel Stoff in den Anhang wechseln musste: Vor allem Biografien von Pers\xf6nlichkeiten, die sich in Forschung und Wissenschaft um das Thema verdient gemacht haben, sowie Begriffe und Erg\xe4nzungen rund um das Thema Neurobiologie.\\n\\nDie korrigierte Fassung, die als Vorlage der finalen Abgabeversion diente, umfasste dann knapp 45 Seiten, mit ungef\xe4hr 50 Seiten Anhang.\\n\\nF\xfcr die Abgabeversion wurde also noch einmal inhaltlich soweit gek\xfcrzt, dass die Intention einer \\"Einf\xfchrung\\" weitestgehend erhalten blieb - mir war aber auch klar, dass eine Arbeit, die Neurobiologie, Neurowissenschaften, Informatik, Mathematik und Medizin unter dem Thema \\"K\xfcnstliche Intelligenz\\" auf 20 (Vorgabe Pr\xfcfungsausschuss) Seiten zusammenfasst, keine Einf\xfchrung mehr sein kann. Die Abgabeversion wurde kurzum umbenannt in\\n\\n**Mathematische Modelle der biologischen Nervenzelle als Bausteine k\xfcnstlicher neuronale Netze und deren Anwendung im Gesundheitswesen**\\n\\nund umfasst 30 Seiten, inkl. Tabellen und Illustrationen. Der Anhang ist komplett entfallen, Fu\xdfnoten, die in der Ursprungsversion zahlreich vorhanden sind und viele Erg\xe4nzungen bieten, rausgek\xfcrzt.\\n\\nDie Abgabeversion entsprach somit den formalen Vorgaben, was sich auch in der Bewertung der Arbeit widerspiegelte.\\n\\n\\n## Download\\n\\nDie Arbeit liegt in zwei Versionen vor: Eine ausf\xfchrliche Ausarbeitung der wichtigen Themen, die einen einf\xfchrenden Charakter besitzt, sowie die gek\xfcrzte Fassung, die den formalen Vorgaben entspricht.\\n\\nIn beide Versionen wurden bereits Anmerkungen und Korrekturen aus dem Errata \xfcbernommen. Gl\xfccklicherweise beschr\xe4nkten sich diese weitestgehend auf wenige Fehler in der Orthographie und einen Fehler in der formalen Herleitung des McCulloch-Pitts-Netzes als Graph in Abschnitt 3.1.4 (ungek\xfcrzte Version, entfallen in der Abgabeversion).\\n\\n - [Download ungek\xfcrzte Version (pdf)](/pdf/einfuehrung-in-mathematische-modelle-der-biologischen-nervenzelle-als-bausteine-kuenstlicher-neuronaler-netze.pdf)\\n - [Download gek\xfcrzte Abgabeversion (pdf)](/pdf/zulassungsarbeit-eignungspruefung-informatik-fh-trier-2023.pdf)"},{"id":"/2023/07/11/perceptron-function-plotting-in-python","metadata":{"permalink":"/blog/2023/07/11/perceptron-function-plotting-in-python","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-07-11-perceptron-function-plotting-in-python/index.md","source":"@site/blog/2023-07-11-perceptron-function-plotting-in-python/index.md","title":"Perceptron Function Plotting with Python","description":"I have updated my Perceptron-implementation with","date":"2023-07-11T00:00:00.000Z","tags":[{"inline":true,"label":"machine learning","permalink":"/blog/tags/machine-learning"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"perceptron","permalink":"/blog/tags/perceptron"},{"inline":true,"label":"neural network","permalink":"/blog/tags/neural-network"}],"readingTime":2.84,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"Perceptron Function Plotting with Python","authors":["thorstensuckow"],"tags":["machine learning","ai","perceptron","neural network"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] Zulassungsarbeit M.Sc. Informatik","permalink":"/blog/2023-12-31-zulassungsarbeit-master-of-computer-science"},"nextItem":{"title":"[DE] \\"Beweisen lernen\\" - Errata","permalink":"/blog/2023/05/01/errata-beweisen-lernen"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\nI have updated my **[Perceptron](https://en.wikipedia.org/wiki/perceptron)**-implementation with \\na plotting function that allows for visualizing the adjustments of the Perceptron\'s weight-vector through the epochs.\\n\\nThe source-code can be found at https://github.com/ThorstenSuckow/pylabs.\\n\\n## Usage\\n\\nCreate input data and the associated output values. As an example, the following represents the logical **AND**-function:\\n\x3c!--truncate--\x3e\\n```python\\nimport numpy as np\\nfrom Perceptron import Perceptron\\n\\n# input\\nX = np.array([\\n    [0, 0], [0, 1], [1, 0], [1, 1]\\n])\\n\\n# output\\ny = np.array([0, 0, 0, 1])\\n```\\n\\nIn the next step, the `Perceptron` is created.\\n\\n```python \\np = Perceptron(50, 0.3)\\n```\\n\\nOnce a `Perceptron`-instance is available, you can pass the input- and output-values to `learn()`:\\n\\n```python \\np.learn(X, y)\\n```\\n\\nand test data with\\n\\n```python \\nresult = p.test([0, 0])\\n```\\n\\n`result` holds the computed weight vector if the training data could be separated within the `epochs`. If that failed,\\n`None` is returned.\\n\\nNote: The `bias` is available with `p.bias`\\n\\nA log is available for all steps processed by `learn()`:\\n\\n```python\\nfor step in p.log:\\n    print(step)\\n```\\n\\nYou can pass the log to the `PerceptronPlotter` which will recreate the computation visually.\\n\\n\\n## Examples \\n\\n### `and`\\n\\n\\nThe `and`-function with a Perceptron.\\n\\n| $A$ | $B$ | $A \\\\land B$ |\\n|-----|-----|-------------|\\n| 1   | 1   | 1           |\\n| 1   | 0   | 0           |\\n| 0   | 1   | 0           |\\n| 0   | 0   | 0           |\\n\\n\\n```python\\nX = np.array([\\n    [0, 0], [0, 1], [1, 0], [1, 1]\\n])\\n\\ntitle= \\"\\\\\\"AND\\\\\\"\\"\\ny = np.array([0, 0, 0, 1])\\n\\np = Perceptron(50)\\np.learn(X, y)\\n\\nplotter = PerceptronPlotter(p.log, X, y, title)\\nanim = plotter.animate(500)\\n```\\n\\n![](./img/and_perceptron.gif)\\n\\n### `or`\\n\\nThe `or`-function with a Perceptron.\\n\\n| $A$ | $B$ | $A \\\\lor B$ |\\n|-----|-----|------------|\\n| 1   | 1   | 1          |\\n| 1   | 0   | 1          |\\n| 0   | 1   | 1          |\\n| 0   | 0   | 0          |\\n\\n```python\\nX = np.array([\\n    [0, 0], [0, 1], [1, 0], [1, 1]\\n])\\n\\ntitle= \\"\\\\\\"OR\\\\\\"\\"\\ny = np.array([0, 1, 1, 1])\\n\\np = Perceptron(50)\\np.learn(X, y)\\n\\nplotter = PerceptronPlotter(p.log, X, y, title)\\nanim = plotter.animate(500)\\n```\\n\\n![](./img/or_perceptron.gif)\\n\\n### `xor`\\n\\nThe `xor`-function with a Perceptron.\\n\\n| $A$ | $B$ | $A \\\\oplus B$ |\\n|-----|-----|--------------|\\n| 1   | 1   | 0            |\\n| 1   | 0   | 1            |\\n| 0   | 1   | 1            |\\n| 0   | 0   | 0            |\\n\\n\\n```python\\nX = np.array([\\n    [0, 0], [0, 1], [1, 0], [1, 1]\\n])\\n\\ntitle= \\"\\\\\\"OR\\\\\\"\\"\\ny = np.array([0, 1, 1, 0])\\n\\np = Perceptron(50)\\np.learn(X, y)\\n\\nplotter = PerceptronPlotter(p.log, X, y, title)\\nanim = plotter.animate(500)\\n```\\n\\nWith the Perceptron as a linear discriminant function, the algorithm can not properly create a separator for `XOR` <BibRef name=\\"MIN69\\" />.\\nThe Plotter shows the `Epoch`-label marked as red, which tells that the algorithm was not able to find a separator in 50 epochs.\\n\\n\\n![](./img/xor_perceptron.gif)\\n\\n### Cluster Example\\n\\nThe following uses isotropic Gaussian blobs generated by [`sklearn.datasets.make_blobs`](https://scikit-learn.org/stable/datasets/sample_generators.html#sample-generators).\\nThe `animate`-method is called with an `interval` of `100` to speed up epoch-runs. The interplay of a larger set of data and the re-adjusting of the separator if accuracy does not reach `1` for a full epoch can be observed nicely.\\n\\n```python\\ntitle = \\"Clusters\\"\\nX, y = make_blobs(n_samples=50, n_features=2, centers=2, cluster_std=2.5)\\n\\n\\np = Perceptron(50)\\np.learn(X, y)\\n\\nplotter = PerceptronPlotter(p.log, X, y, title)\\n\\nanim = plotter.animate(100)\\n```\\n\\n![](./img/cluster_perceptron.gif)\\n\\n\\n\\n---------------\\nResources\\n\\n- https://github.com/ThorstenSuckow/pylabs"},{"id":"/2023/05/01/errata-beweisen-lernen","metadata":{"permalink":"/blog/2023/05/01/errata-beweisen-lernen","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-05-01-errata-beweisen-lernen/index.md","source":"@site/blog/2023-05-01-errata-beweisen-lernen/index.md","title":"[DE] \\"Beweisen lernen\\" - Errata","description":"Errata f\xfcr Beweisen lernen (Springer Verlag 2020) von [Junk","date":"2023-05-01T00:00:00.000Z","tags":[{"inline":true,"label":"mathematics","permalink":"/blog/tags/mathematics"}],"readingTime":8.34,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"[DE] \\"Beweisen lernen\\" - Errata","authors":["thorstensuckow"],"tags":["mathematics"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Perceptron Function Plotting with Python","permalink":"/blog/2023/07/11/perceptron-function-plotting-in-python"},"nextItem":{"title":"[DE] Verf\xe4llt ein Big Ball of Mud?","permalink":"/blog/2023/04/14/big-ball-of-mud-decay"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\n\\nErrata f\xfcr [Beweisen lernen (Springer Verlag 2020)](https://www.math.uni-konstanz.de/mmath/de/book/) von [Junk\\n](https://www.math.uni-konstanz.de/numerik/personen/junk/) und [Treude](https://www.math.uni-konstanz.de/~treude/vita.html).\\nIch hoffe, dass meine Notizen dem Autorenteam zur \xdcberpr\xfcfung und ggf. Korrektur n\xfctzlich sind.\\n\\nZum Hintergrund dieses Blog-Posts gibt es [weiter unten](#hintergrund-aufgabe-178-und-das-kleine-man\xf6ver-das-kostete) mehr Informationen.\\n\\n\x3c!--truncate--\x3e\\n\\n## Errata\\n\\n:::info\\nStand 21.06.2023. Meine gesammelten Notizen habe ich komplett \xfcberf\xfchrt. Das Kapitel \\"D Tipps zu den \xdcbungen\\" wurde von mir nicht bearbeitet.\\n\\nLieber Google-Nutzer, das offizielle Errata findet sich unter https://www.math.uni-konstanz.de/mmath/de/book/material/errata (abgerufen 21.06.2023). \\n:::\\n\\n\\n### Vergleichsl\xf6sungen\\n\\n| Seite              | Fehlerstelle                                                                            | Korrekturvorschlag                                                                      | Bemerkung                                                                                                                                                                                                 |\\n|--------------------|-----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\\n| 326 (ML261)        | $0 = dist_d(x, A)inf D_{x,A}$                                                           | $0 = dist_d(x, A) = inf D_{x,A}$                                                        |                                                                                                                                                                                                           |\\n| \\"                  | $a < inf D_{x,A} + \\\\epsilon$                                                            | $u < inf D_{x,A} + \\\\epsilon$                                                            |                                                                                                                                                                                                           |\\n| 321 (ML240)        | und $b \\\\in Min(b)$ gegeben                                                              | und $b \\\\in Min(B)$ gegeben                                                              |                                                                                                                                                                                                           |\\n| 318 (ML230)        | Zu zeigen ist $\\\\exists D \\\\in \\\\R: \\\\forall y,z \\\\in A : d(x,y) \\\\le D$                      | Zu zeigen ist $\\\\exists D \\\\in \\\\R: \\\\forall y,z \\\\in A : d(y, z) \\\\le D$                     | In der ML wird weiter $d(x,y)$ genutzt, obwohl sich der Allquantor auf $y,z$ bezieht. Das w\xe4re im Weiteren zu \xfcberpr\xfcfen, da wir mit der Def. von $B_r^d(x)$ auch $d(x, y) < r$ verstehen.\\n| 316 (ML226)        | Wir definieren $g: \\\\N_{\\\\le N} \\\\rarr \\\\R,$...                                             | Wir definieren $g: \\\\N_{\\\\le n} \\\\rarr \\\\R,$...                                             |\\n| 315 (ML224)        | $d_2(r \\\\cdot u, s \\\\cdot) =$...                                                          | $d_2(r \\\\cdot u, s \\\\cdot u) =$...                                                        |\\n| 312 (ML214)        | $L_y = \\\\{\\\\alpha - 3\\\\beta, 3\\\\alpha + 2\\\\beta, 0)/11 + t \\\\cdot (0,2,1)\\\\vert t \\\\in \\\\R\\\\}$    | $L_y = \\\\{3\\\\alpha + 2\\\\beta, \\\\alpha - 3\\\\beta, 0)/11 + t \\\\cdot (0,2,1)\\\\vert t \\\\in \\\\R\\\\}$    | $u, v$ vertauscht\\n| 308 (ML194, Ende)  | Da $r \\\\in [u]_\\\\text{\\\\textasciitilde}$ auf $u \\\\in X$ und $u \\\\text{\\\\textasciitilde} x$... | Da $r \\\\in [u]_\\\\text{\\\\textasciitilde}$ auf $u \\\\in X$ und $u \\\\text{\\\\textasciitilde} r$... |\\n| 302 (ML178 unten)  | $p(f(b), z) \\\\in P_{f, n-1}(X \\\\setminus \\\\{a\\\\})$                                          | $p(f(b), z) \\\\in P_{f, n}(X \\\\setminus \\\\{a\\\\})$                                            |                                                                                                                                                                                                           |\\n| 302 (ML178 mittig) | \\\\[Wegen Aufgabe 153 gilt\\\\] $\\\\exists x \\\\in U: P_{f, n}(X \\\\setminus \\\\{x\\\\})$               | $\\\\exists x \\\\in U: P_{f, n}(X \\\\setminus \\\\{a\\\\})$                                          | Die Menge, auf die Bezug genommen wird, ist hier $X \\\\setminus \\\\{a\\\\}$                                                                                                                                      |\\n| 299 (ML172)        | zeigt Aufgabe 163                                                                       | zeigt Aufgabe **171**                                                                   |                                                                                                                                                                                                           |\\n| 297 (ML168)        | sei dazu $A \\\\in D_{\\\\alpha \\\\cdot f, n + 1}$                                              | sei dazu $A \\\\in D_{f, n + 1}$                                                           |                                                                                                                                                                                                           |\\n| 295 (unten)        | $z + f(b) \\\\in S_{n-1}(X \\\\setminus \\\\{a\\\\})$                                               | $z + f(b) \\\\in S_{n}(X \\\\setminus \\\\{a\\\\})$                                                 |\\n| 288, 289 (ML147)   |                                                                                         |                                                                                         | Es wird auf (3.16) Bezug genommen, aber $\\\\forall n \\\\in \\\\N_{>1}: n - 1 \\\\in \\\\N$ ist Axiom **(3.18)**                                                                                                        |\\n| 277 (ML106)        |                                                                                         |                                                                                         | f\xfcr \\"$\\\\impliedby$\\" m\xfcsste noch $y \\\\in U$ gezeigt werden   \\n| 272 (ML89)         |                                                                                         |                                                                                         | Es wird auf eine Symmetrie von $\\\\le$ Bezug genommen, aber in dem Kontext ist $\\\\le$ Antisymmetrisch (**Satz 3.11** und \xdc89)\\n| 269 (ML78)         | was auf den Widerspruch $0 \\\\ge 1$ f\xfchrt                                                 | was auf den Widerspruch $1 \\\\ge 2$ f\xfchrt                                                 | $x \\\\in \\\\N$, also $x \\\\ne 0$. Im indirekten Beweis wird $x \\\\ge x + 1$ mit $x=0$ verwendet\\n| 258 (ML44)         | mit $A$ anstelle von $A$ und $B$ anstelle von $B$                                       | mit $A$ anstelle von $E$ und $B$ anstelle von $F$                                       | \\n\\n### Ideen: Metrische R\xe4ume\\n\\n| Seite                 | Fehlerstelle             | Korrekturvorschlag                | Bemerkung                                                                                           |\\n|-----------------------|--------------------------|-----------------------------------|-----------------------------------------------------------------------------------------------------\\n| 166 (\xdc274)            | $B_r(A)$                 | $B_r^d(A)$                        |                                                                                                     |\\n| 167                   | $B_r(u)$                 | $B_r^d(u)$                        | Mehrfachnennung auf dieser Seite, ohne auf die Metrik Bezug zu nehmen                               |\\n| 156 (\xdc248)            | $s < sup M$              | $u \\\\in M: u < sup M$              | $s$ ist vorgegeben mit $s \\\\in O_M$, damit gilt ja bereits $s \\\\ge sup M$ und damit auch $s \\\\ge m$    |\\n| 154 (\xdc240)            | $Min(b)$                 | $Min(B)$                          |                                                                                                     |\\n| 147 (\xdc226)            | $D: X^n \\\\times X^n$, ... | $D: X^n \\\\times X^n \\\\rarr \\\\R$, ... |  |\\n\\n### Ideen: \xc4quivalenzklassen\\n\\n| Seite                  | Fehlerstelle                                                                   | Korrekturvorschlag                                                                        | Bemerkung                                                                                          |\\n|------------------------|--------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------\\n| 132 (unten)            | $R([a \\\\cdot u]_\\\\text{\\\\textasciitilde}) = R([a \\\\cdot u]_\\\\text{\\\\textasciitilde})$ | $R(a \\\\boxdot [u]_\\\\text{\\\\textasciitilde}) = R([a \\\\cdot u]_\\\\text{\\\\textasciitilde})$         |                                                                                                    |\\n\\n\\n\\n### Training\\n\\n| Seite     | Fehlerstelle                                                       | Korrekturvorschlag                                                 | Bemerkung                                                              |\\n|-----------|--------------------------------------------------------------------|--------------------------------------------------------------------|------------------------------------------------------------------------|\\n| 94        | $\\\\{t \\\\in U^3: ((t_1 \\\\in A) \\\\land (t_2 \\\\in B)) \\\\land (t_3 \\\\in C)\\\\}$ | $\\\\{t \\\\in U^3: (t_1 \\\\in A) \\\\land (t_2 \\\\in B) \\\\land (t_3 \\\\in C)\\\\}$   |                                                                        | |\\n| 83 (oben) | f\xfchrt zur Langform $U = \\\\{y \\\\in \\\\Z: \\\\exists x \\\\in \\\\Z : y = g(z)\\\\}$ | f\xfchrt zur Langform $U = \\\\{y \\\\in \\\\Z: \\\\exists x \\\\in \\\\Z : y = g(x)\\\\}$ | in (3.10) wird f\xfcr die Gleichung ebenfalls die falsche Variable genutzt | |\\n| 82 (\xdc102) | Zeige $\\\\exists a \\\\in \\\\R : g [R_{\\\\ge 0}] = \\\\R_{\\\\ge a}$.             | Zeige $\\\\exists a \\\\in \\\\R : g [\\\\R_{\\\\ge 0}] = \\\\R_{\\\\ge a}$.            |  | |\\n\\n### Rechtschreibung / Grammatik / Druckfehler\\n\\n\\n| Seite                                               | Fehlerstelle                                                             | Korrekturvorschlag                                                               | \\n|-----------------------------------------------------|--------------------------------------------------------------------------|----------------------------------------------------------------------------------|\\n| 325 (ML259)                                         | Insebsondere ist $dist_d(x,A) = 0$                                       | ~~Insebsondere~~ Insbesondere ist $dist_d(x,A) = 0$                              |\\n| 295 (ML160)                                         | die Argumentation wurde ist dir eventuell                                | die Argumentation ~~wurde~~ ist dir eventuell                                    |\\n| 294                                                 | zu zeigen ist $P(A)\\\\mid = 2^{\\\\mid A \\\\mid}$                               | zu zeigen ist $\\\\mid P(A)\\\\mid = 2^{\\\\mid A \\\\mid}$                                  |\\n| 290                                                 | ergibt $m = \\\\mid n \\\\mid - \\\\mid A \\\\mid \\\\in \\\\N$                            | ergibt $m = n - \\\\mid A \\\\mid \\\\in \\\\N$                                              |\\n| 284 (ML132)                                         | und mit Aufgabe 132 ergibt sich schliesslich                             | und mit Aufgabe **131** ergibt sich schliesslich                                 |\\n| 166 (unten)                                         | dass sie sich garnicht scheiden                                          | dass sie sich garnicht ~~scheiden~~ schneiden                                    |\\n| 149                                                 | In einer Kugel mit em Radius                                             | In einer Kugel mit ~~em~~ dem Radius                                             |\\n| 125 (unten)                                         | und mit Aufgabe 179 dann                                                 | und mit Aufgabe ~~179~~ 180 dann                                                 |\\n| 120 (oben)                                          | Mit Teil (b) von Aufgabe 179 folgt hieraus                               | Mit Teil (b) von Aufgabe ~~179~~ 180 folgt hieraus                               |\\n| 117                                                 | Ausgangspizza in $a_2 \\\\cdot b_2$ Teile auftritt                          | Ausgangspizza in $a_1 \\\\cdot b_2$ Teile auftritt                                  |\\n| 104 (unten)                                         | in F\xfcr-Alle-Aussage \xfcber $\\\\N_0$ zu verwandeln                            | in F\xfcr-Alle-~~Aussage~~Aussagen \xfcber $\\\\N_0$ zu verwandeln                        |\\n| 102 (oben)                                          | auf $\\\\emptyset$ gibt es nur ein einzige Funktion                         | auf $\\\\emptyset$ gibt es nur ~~ein~~ eine einzige Funktion                        |\\n| 37 (unten)                                          | Dies folgt durch Anwendung von Satz 2.11 bei Ersetzung von $A$ durch $E$ | Dies folgt durch Anwendung von Satz ~~2.11~~ 2.9 bei Ersetzung von $A$ durch $E$ |\\n| 37 (unten, folgt der vorher erw\xe4hnten Fehlerstelle) | Dies folgt durch Anwendung von Satz 2.9 bei Ersetzung                    | Dies folgt durch Anwendung von Satz ~~2.9~~ 2.11 bei Ersetzung                   |\\n### Anmerkungen\\n\\n| Seite                    | Bemerkung                                                                                            |\\n|--------------------------|------------------------------------------------------------------------------------------------------\\n| 148 **Definition 5.9**   | vielleicht bietet es sich hier bereits an, in der Definition den Begriff \\"offene Kugel\\" zu verwenden |\\n| 118 **Definition 4.1** | Sei $\\\\text{\\\\textasciitilde}$ eine \xc4quivalenzrelation auf einer **nicht leeren**  Menge $X$                            |\\n| 91 **Definition 3.24** | Informatiker w\xfcrden sich hier \xfcber die Erw\xe4hnung \\"partielle Funktion\\" freuen                         |\\n\\n<sup>*</sup>ML = Musterl\xf6sung\\n\\n<sup>*</sup>\xdc = \xdcbung\\n\\n\\n\\n## Hintergrund: Aufgabe 178 und das kleine Man\xf6ver, das kostete\\n\\nIn der L\xf6sung zu **Aufgabe 178** aus [Beweisen lernen](https://www.math.uni-konstanz.de/mmath/de/book/) - und der hierzu vorbereitenden **Aufgabe 158** - bin ich bei der Nachbereitung des L\xf6sungsvorschlages nicht zu dem gleichen Ergebnis gekommen - der Definitionsbereich einer Funktion wurde falsch angegeben. Den Versuch, die Falschaussage nachzuweisen, habe ich hier in diesem Post dokumentiert. \\n\\n![](img/whiteboard.png)\\n\\nWeitere Notizen bzgl. eventueller Fehler hinsichtlich Logik- und Druck fasse ich in dem o.a. [Errata](#errata) zusammen. \\n\\n\\n## Aufgabe 158\\n\\n##### Notation\\n$U$: Elementuniversum\\n\\n$\\\\Epsilon_n$: Menge aller endlichen Mengen mit der M\xe4chtigkeit $n$\\n\\n$P(K)$: Potenzmenge von $K$ mit $K \\\\subset U$\\n\\n### Aufgabenstellung\\nEs ist per Induktion zu beweisen, das\\n\\n$\\\\forall n \\\\in \\\\N_0: \\\\forall k \\\\in (N_0)_{\\\\le n}: \\\\forall X \\\\in D_k: | S_k(X)| = 1$\\n\\nFolgendes steht mit den Voraussetzungen zur Verf\xfcgung:\\n\\n$f: X \\\\mapsto R$\\n\\n$D_n:=\\\\{X \\\\in \\\\Epsilon_n : X \\\\subset Def(f) \\\\}$\\n\\n$S_0: D_0 \\\\to P(\\\\R),\\\\space X \\\\mapsto \\\\{0\\\\}$\\n\\n$S_{n+1}: D_{n+1} \\\\to P(\\\\R),\\\\space X \\\\mapsto \\\\{f(x) + s \\\\space | \\\\space (x, s) \\\\in X \\\\times S_{n}(X \\\\setminus \\\\{x\\\\})\\\\}$\\n\\n### Induktionsschritt\\nDie Autoren wollen die Eindeutigkeit des Elementes $x \\\\in U: x \\\\in S_{n+1}(X)$ \xfcber\\n\\n$\\\\exists! x \\\\in U: x \\\\in S_{n+1}(X)$\\n\\nzeigen. Hierzu muss die Existenz und die Eindeutigkeit des Elementes gezeigt werden, so dass wegen $\\\\forall u,v \\\\in S_{n+1}(X): u = v$\\nauch $|S_{n+1}(X)| = 1$ folgt (u.a. wegen **Aufgabe 99** und **Aufgabe 153**).\\n\\n### Argumentation\\nHierzu sei\\n\\n$u:= f(a)+s, v:= f(b)+t$\\n\\nDie Autoren zeigen einige Schritte weiter, dass mit der Induktionsvoraussetzung f\xfcr $s$ folgt:\\n\\nDa $f(a) + s \\\\in S_{n+1}(X)$, ist $s \\\\in S_n(X \\\\setminus \\\\{a\\\\})$.\\n\\nMit $b \\\\in X \\\\setminus \\\\{a\\\\}$ soll dann $s = f(b) + z$ gezeigt werden, wobei wieder die Induktionsvoraussetzung angewendet wird und $z \\\\in S_{n-1}(X \\\\setminus \\\\{a\\\\} \\\\setminus \\\\{b\\\\})$ gefunden wird.\\n\\n### Fehlerstelle\\nIn einem weiteren Schritt wird dann behauptet, dass $f(b) + z \\\\in S_{n-1}(X \\\\setminus\\\\{a\\\\})$ ist, und deswegen $f(b)+z \\\\in \\\\{s\\\\}$ und folglich $f(b) + z = s$. Das scheint der Fehler zu sein, denn f\xfcr $s$ wurde gezeigt: $s \\\\in S_n(X \\\\setminus \\\\{a\\\\})$:\\n\\nWenn $s \\\\in S_n(X \\\\setminus \\\\{a\\\\})$ und $s \\\\in S_{n-1}(X \\\\setminus\\\\{a\\\\})$ gelten w\xfcrde, dann w\xfcrde f\xfcr\\n\\n$f(c)+s \\\\in S_n(X \\\\setminus \\\\{a\\\\})$ und $f(b)+t \\\\in S_{n-1}(X \\\\setminus \\\\{a\\\\})$ auch $f(c)+s = f(b)+t$ gelten (f\xfcr $c, b \\\\in X \\\\setminus \\\\{a\\\\}$).\\n\\nDa $s = f(b) + t$ wegen $f(b) + t \\\\in S_{n-1}(X \\\\setminus \\\\{a\\\\})$ und $s \\\\in S_{n-1}(X \\\\setminus\\\\{a\\\\})$ folgt dann auch\\n$f(c) + s = s$, was im Widerspruch zu $f(c) + s = f(c) + s$ steht und offensichtlich nicht $\\\\forall c \\\\in X \\\\setminus \\\\{a\\\\}$ gilt."},{"id":"/2023/04/14/big-ball-of-mud-decay","metadata":{"permalink":"/blog/2023/04/14/big-ball-of-mud-decay","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-04-14-big-ball-of-mud-decay/index.md","source":"@site/blog/2023-04-14-big-ball-of-mud-decay/index.md","title":"[DE] Verf\xe4llt ein Big Ball of Mud?","description":"Ein Kommentar zu einem Kommentar zu Eberhard Wolff\'s Episode 159 - Big Ball of Mud als Teil von Software-Architektur im Stream. Eine englische \xdcbersetzung findet sich hier.","date":"2023-04-14T00:00:00.000Z","tags":[{"inline":true,"label":"Software Architecture","permalink":"/blog/tags/software-architecture"},{"inline":true,"label":"Comment","permalink":"/blog/tags/comment"},{"inline":true,"label":"Personal","permalink":"/blog/tags/personal"}],"readingTime":7.185,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"[DE] Verf\xe4llt ein Big Ball of Mud?","authors":["thorstensuckow"],"tags":["Software Architecture","Comment","Personal"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] \\"Beweisen lernen\\" - Errata","permalink":"/blog/2023/05/01/errata-beweisen-lernen"},"nextItem":{"title":"bcc-header issues with Horde_Mime_Mail","permalink":"/blog/2023/03/20/horde-mail-ignores-bcc"}},"content":"import {GlosRef, BibRef} from \\"../../src/components/References\\";\\nimport {BackButton} from \\"../../src/components/BackButton.js\\";\\n\\n\\n:::info \\n_Ein Kommentar zu einem Kommentar zu [Eberhard Wolff\'s](https://ewolff.com/) [Episode 159 - Big Ball of Mud](https://software-architektur.tv/2023/03/31/folge159.html) als Teil von [Software-Architektur im Stream](https://software-architektur.tv)_. Eine englische \xdcbersetzung findet sich [hier](/blog/2023/04/14/big-ball-of-mud-decay/index_en).\\n:::\\n\\n## Verf\xe4llt ein Big Ball of Mud?\\n\\nDurch den Fortschritt der Technologie und der Arbeit von Leuten wie [Brooks](https://en.wikipedia.org/wiki/Fred_Brooks), [Buschmann](https://en.wikipedia.org/wiki/Pattern-Oriented_Software_Architecture) und [Booch](https://en.wikipedia.org/wiki/Grady_Booch) wurde uns Entwicklern der Weg vom mikroskopischen ins makroskopische geebnet. Lang vorbei sind die Zeiten, in denen schrankhohe Rechnersysteme nah an der Infrastruktur programmiert werden mu\xdften. <br />\\nJedoch, wer heute den Mythischen Mann-Monat <BibRef name=\\"MMM\\" /> liest und \xfcber die damals zur Verf\xfcgung stehende Technik schmunzelt, der wird sp\xe4testens bei der Aktualit\xe4t der anderen erw\xe4hnten Probleme betreffs Organisation und Planung von Projekten rasch in die Gegenwart zur\xfcckgeworfen. Aus Eskapismus wird ein erhobener Finger: Das Lesevergn\xfcgen mahnt pl\xf6tzlich zur Reflektion. Die Probleme von damals sind heute immer noch aktuell, und die Entwicklung der Technik verlief bis dato offensichtlich ungleich schneller als die von **Planung und Organisation**.\\n\x3c!--truncate--\x3e\\nDie Motivation und das Wissen darum, wie man heutzutage Schablonen f\xfcr die Erstellung von Objekten und Klassen nutzt und all seine Erfahrung in das Schneiden und Zusammenstecken derselben zur Abstraktion einer Fachlichkeit einfliessen l\xe4sst, ist dann nicht zuletzt auch der Gang of Four <BibRef name=\\"Gof\\" /> zu verdanken, die Entwurfsmuster en vogue gemacht haben und in einer ganzen Generation von Programmierern das Interesse an Software Design zu wecken wussten. Aber: Der Schreiner mag in der Lage sein, einen Satz Fensterrahmen passend zu dem \xe4usseren Erscheinungsbild des Hauses zu zimmern. Das h\xfcbscheste Fenster hilft aber nichts, wenn niemand weiss wie man es einbaut, geschweige denn \xf6ffnet und wieder schliesst.\\n\\nWir machen den gedanklichen Sprung zur\xfcck in unsere Dom\xe4ne und wissen: Solche Elemente werden dann in Menge problematisch, wenn ihre Vereinigung in einem System funktional sein und nat\xfcrlich ein m\xf6glichst wartbares Gesamtgebilde ergeben soll. Auch hier helfen Erfahrung und bew\xe4hrte Blaupausen, damit sich Entwickler*in  nicht in einem undurchdringlichen Dickicht von Verantwortlichkeiten und Assoziationen verliert. <br />\\nLeider gelingt das nicht ganz so oft so gut.  Wenn wir nach einem frischen Pull \xfcber das Sein des Spaghetti-Codes eines Kollegen sinnieren, oder wir uns  selbst dabei ertappen, Schichten durch das freitag-mittagliche Voranstellen eines `new` vor einer low-level-Klasse in einer high-level-Klasse zu durchbrechen, dann ist man ihm schon einen Schritt n\xe4her, dem ber\xfcchtigten **<GlosRef name=\\"Big Ball of Mud\\" file=\\"sd.bigballofmud\\" />** (**BBOM**), den [Eberhard Wolff](https://ewolff.com) in der Folge 159 seiner Reihe [**Softwarearchitektur im Stream**](https://software-architektur.tv/2023/03/31/folge159.html) mit gewohnter Pr\xe4zision vorgestellt und in Ursache und Wirkung analysiert hat.  \\n\\nIn der Folge beruft er sich auf das Paper von [Foote und Yoder](http://www.laputan.org/mud/), in dem - vor \xfcber 20 Jahren - die Frage gestellt wurde, inwieweit denn so ein **Big Ball of Mud** \xfcberhaupt ein **Anti-Pattern** sei: Das man diese quellcodegewordene Negation einer Struktur so h\xe4ufig in Systemen vorfindet sollte doch eigentlich den Schluss zulassen, dass es sich hierbei gar nicht um ein **Anti-Pattern**, sondern gegebenenfalls um ein erprobtes und bew\xe4hrtes Konzept in der Software-Entwicklung handelt, n\xe4mlich das des **geringsten Widerstandes**. Dieser kennzeichnet sich hier durch die Vermeidung von Up-Front Architektur. Stattdessen richtet sich der Fokus direkt auf die Umsetzung von Features und Funktionalit\xe4t, auch, aber nicht ausschlie\xdflich, wenn Architektur als zu vermeidender Kostenfaktor verstanden wird: \\n\\n> _\\"Therefore, focus first on features and functionality, then focus on architecture and performance.\\"_ [<sup>[1]</sup>](#bbompaper)\\n\\nMan k\xf6nnte daraus schlie\xdfen, man solle mehr Verst\xe4ndnis f\xfcr den Entwickler zeigen, der diesen Weg w\xe4hlt oder w\xe4hlen mu\xdf. Auch, wenn infolgedessen der Ansatz eines durch die Zuarbeit verschiedener Teams entstehenden Software-Fundamentes \xfcber das Fehlen von allgemein als gesch\xe4ftswertig erachteter Best Practices mit jedem Commit ein bisschen mehr verhindert oder aufgel\xf6st wird. Die Frage hat wohl auch _Foote und Yoder_ besch\xe4ftigt: \\n\\n> _\\"[\u2026] we seek not to cast blame upon those who must wallow in these mires. In part, our attitude is to \u2018hate the sin, but love the sinner\u2018\\"_. [<sup>[1]</sup>](#bbompaper)\\n\\nWenn der **Big Ball of Mud** als Konsequenz dieses Konzeptes als Struktur eines Systems erkannt wird, das keine Struktur beinhaltet, dann k\xf6nnen wir _ex falso quodlibet_ auch jede beliebige Aussage als g\xfcltig annehmen, wenn wir uns bei der Beschreibung dieses Systems darauf berufen, dass diesem System eben eine Struktur innewohnt: Und also ist ein **Big Ball of Mud** eben ein Entwurfsmuster. **Aber!** So ein Gebilde bekommt man ganz gut beliebig hin, so wie ein Zimmermann sicher auch ohne Kenntnis dar\xfcber, wie man M\xf6rtel anr\xfchrt, irgendwie in der Lage sein wird, Ziegelsteine um seine Fenster herum zu stapeln.\\n\\nUnter gewissen Umst\xe4nden kann das bewusste Zulassen zunehmender Entropie in einem Software System dabei helfen, Kontexte zu identifizieren und die Fachlichkeit zu verstehen, um Schichten herauszumeisseln und Grenzen zu schneiden. [Evans](https://www.domainlanguage.com/), [Fowler](https://martinfowler.com) und auch _Foote und Yoder_ sind sich in jedem Fall einer Sache sicher: **Refactoring** muss st\xe4ndig erfolgen, um nicht die Kontrolle zu verlieren. \\n\\n> _\\"The way to arrest entropy in software is to refactor it.\\"_ [<sup>[1]</sup>](#bbompaper)\\n\\nDabei ist man sich aber auch des zweiten Hauptsatzes der Thermodynamik bewusst: Die Entropie kann nicht abnehmen, sie kann gleich bleiben, oder sie kann zunehmen. Will man letzteres verhindern, r\xe4t Evans  dazu, den **BBOM** zu demarkieren:\\n\\n> _\\"Draw a boundary around the entire mess and designate it a big ball of mud. Do not try to apply sophisticated modeling within this context. Be alert to the tendency for such systems to sprawl into other contexts.\\"_ <BibRef name=\\"DDDR\\" pp=\\"38\\" />\\n\\n_Foote und Yoder_ haben eine \xe4hnliche Empfehlung, die sie in dem Paper etwas schwungvoller mit [_\\"Sweeping it under the rug\\"_](http://www.laputan.org/mud/mud.html#SweepingItUnderTheRug) bezeichnen:\\n\\n> _\\"Therefore, if you can\u2019t easily make a mess go away, at least cordon it off. This restricts the disorder to a fixed area, keeps it out of sight, and can set the stage for additional refactoring.\\"_ [<sup>[1]</sup>](#bbompaper)\\n\\nEgal ob Grenzen gezogen werden oder man den **BBOM** unter den Teppich schaufelt: Eben so kommen wir \xfcber grobgranulare Schnittstellen an ausgew\xe4hlte Funktionalit\xe4t, und wir lassen gleichzeitig nicht zu, dass die z\xe4he Masse aus dem **BBOM** in unser System tropft und dort Gestalt annimmt (oder eben auch nicht). Konsequent katalogisiert [Robert C. Martin](https://en.wikipedia.org/wiki/Robert_C._Martin) dann auch **Viscosity** in die Kategorie **Design Smell** ein <BibRef name=\\"ASD\\" pp=\\"88\\" />.\\n\\n[Mein Kommentar w\xe4hrend der Folge lautete](https://youtu.be/Gqs8zLXei7Q?t=2200), dass es in Anbetracht all dessen ohnehin erschwerend hinzukommen kann, dem Management die Sinnhaftigkeit von Tests zu vermitteln.\\nDer Antwort von _Eberhard Wolff_ darauf entnahmen ich, dass in den von ihm beschriebenen Szenarien Tests _a priori_ als sinnvoll verstanden werden und damit Teil der Entwicklung sind (zumindest aber Tests durch entsprechende Fachkr\xe4fte): Umso wichtiger sind diese Tests, wenn sich schon zu Beginn des Projektes zeigt, dass wegen fehlender Architekturplanung und wahrscheinlich diffuser Funktions- und Modulgrenzen Funktionalit\xe4t sichergestellt werden _muss_.\\n\\nVon dieser Implikation bin ich in meinem Kommentar nicht ausgegangen. Was ich meinte, war: Wenn Architektur keinen Gesch\xe4ftswert hat, und dies zu einem **BBOM** f\xfchrt, dann kann das auch zu dem [Broken Window Effekt](https://en.wikipedia.org/wiki/Broken_windows_theory) f\xfchren. _Hunt und Thomas_ raten dazu: _\\"Dont live with broken Windows.\\"_ <BibRef name=\\"PP\\" pp=\\"7\\" />, und _Foote und Yoder_ beziehen aus \xe4hnlichen Erfahrungen die Ensicht:\\n\\n> _\\"If such sprawl continues unabated, the structure of the system can become so badly compromised that it must be abandoned. As with a decaying neighborhood, a downward spiral ensues.\\"_ [<sup>[1]</sup>](#bbompaper)\\n\\nWenn Geld und Zeit in einem Projekt knapp sind, und Architektur damit einhergehend als nicht zielf\xfchrend verstanden wird, dann ist die Wahrscheinlichkeit eher nicht gering, dass auch das Testing der Software \u2013 ich meine hiermit die Art von Tests, die der Entwickler selber schreibt, um sein System zu verifizieren - ebenfalls als negativer Kostenfaktor gef\xfchrt wird. Sollte das Gegenteil der Fall sein, dann k\xf6nnte die fehlende Architektur und der entstehende **BBOM** das eingeworfene Fenster in der Nachbarschaft sein, das dazu f\xfchrt, dass noch  mehr Fenster eingeworfen werden. Der Entwickler, der sich bewusst nicht innerhalb der Schichten bewegt, sondern vor allem dazwischen, sieht sich dazu veranlasst, seinen Code nicht durch Tests zu dokumentieren, weil er dem System die Sinnhaftigkeit ob der fehlenden Struktur aberkennt. Die Projektbeteiligten akzeptieren ein eingeworfenes Fenster wahrscheinlich eher, wenn daneben schon eins existiert.\\n\\nWenn alle Projektbeteiligten sich darauf verst\xe4ndigen, dass Grenzen und Fachlichkeiten auch durch unstrukturiertes, organisches Wachstum erkannt werden k\xf6nnen, und das System erst sp\xe4ter \\"ent-steht\\", k\xf6nnen Strukturen also sp\xe4ter nachgezogen werden: Letztendlich ist eine z\xe4he Masse etwas Formbaren \xe4hnlich, und die Dynamik unserer Handwerkskunst steckt in dem Namen **Soft**ware. Besteht das Fundament m\xf6glichst nicht aus einem **Throw Away**, dann sollte auch allen Projektbeteiligten die Notwendigkeit von Tests klar sein: Die R\xe4son aller Verantwortlichen verhindern somit ein erstes eingeworfenes Fenster, und es ist an Fachexperten und Programmierern, dass es nicht zu weiteren kommt. \\n\\n\\n---- \\nReferences\\n\\n - [<sup>[1]</sup> Foote, Yoder: \\"Big Ball of Mud\\"; University of Illinois, 1999](http://www.laputan.org/mud/mud.html#SweepingItUnderTheRug) <a name=\\"bbompaper\\"></a>\\n - [Eberhard Wolff: \\"Software-Architektur im Stream, Folge 159: Big Ball of Mud\\"](https://software-architektur.tv/2023/03/31/folge159.html)"},{"id":"/2023/03/20/horde-mail-ignores-bcc","metadata":{"permalink":"/blog/2023/03/20/horde-mail-ignores-bcc","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-03-20-horde-mail-ignores-bcc/index.md","source":"@site/blog/2023-03-20-horde-mail-ignores-bcc/index.md","title":"bcc-header issues with Horde_Mime_Mail","description":"bcc-header issues with HordeMimeMail","date":"2023-03-20T00:00:00.000Z","tags":[{"inline":true,"label":"php","permalink":"/blog/tags/php"},{"inline":true,"label":"horde","permalink":"/blog/tags/horde"},{"inline":true,"label":"bug","permalink":"/blog/tags/bug"}],"readingTime":2.695,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"bcc-header issues with Horde_Mime_Mail","authors":["thorstensuckow"],"tags":["php","horde","bug"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] Verf\xe4llt ein Big Ball of Mud?","permalink":"/blog/2023/04/14/big-ball-of-mud-decay"},"nextItem":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs"}},"content":"## `bcc`-header issues with `Horde_Mime_Mail`\\n\\nThis issue caused some uncertainty since I was not sure if the headers were broken due to missing quotes. \\nSee https://github.com/conjoon/php-lib-conjoon/issues/17.\\n\\nTurns out that the way I assembled an email from a full text and converting it back to an instance of `Horde_Mime_Mail`\\ndoes not consider the type of the internal representation of the `bcc`-field properly. It\'s related to\\n`Horde_Mail_Rfc822_List::_normalize` and how values passed from `Horde_Mime_Mail::send()` are processed by it.\\n\x3c!--truncate--\x3e\\nHere\'s a code snippet that shows how I use a full text message as input, then converting it back to an instance of `Horde_Mime_Mail`\\nwith headers processed by `Horde_Mime_Headers::parseHeaders()`. \\nThe original message has a `bcc` header-field:\\n\\n(Original code [can be found here](https://github.com/conjoon/php-lib-conjoon/blob/ec170f351c0ff8dbdc390c8712dc24c47745abf6/src/Horde/Mail/Client/Imap/HordeClient.php#L648)).\\n\\n```php title=\\"HordeClient.php\\"\\n         $target = $item->getFullMsg(false);\\n         // ... \\n         $headers = Horde_Mime_Headers::parseHeaders($target);\\n\\n         $mail = new Horde_Mime_Mail($headers);\\n         $part = Horde_Mime_Part::parseMessage($target);\\n         $mail->setBasePart($part);\\n\\n         $mailer = $this->getMailer($account);\\n         $mail->send($mailer);   \\n```\\n\\n`Horde_Mime_Mail` temporarily removes the `bcc` header and stores it in a property named `_bcc`, then uses this value to add \\nit to the recipients\' addresses later on in `send()`. This is so the `bcc`-header is not appearing in the source of the message \\nthe recipients receive (see [https://www.ietf.org/rfc/rfc2822.txt](https://www.ietf.org/rfc/rfc2822.txt), Section **3.6.3** and **5**):\\n\\n> _\\"The \\"Bcc:\\" field (where the \\"Bcc\\" means \\"Blind Carbon Copy\\") contains\\naddresses of recipients of the message whose addresses are not to be\\nrevealed to other recipients of the message.\\"_ [https://www.ietf.org/rfc/rfc2822.txt, Section **3.6.3**](https://www.ietf.org/rfc/rfc2822.txt)\\n\\nThis is a part of [`Horde_mime_Mail::send()`](https://github.com/horde/Mime/blob/d9c11439bd82b7887b03271d595b998123b9fa0a/lib/Horde/Mime/Mail.php#L463):\\n\\n```php title=\\"Horde/Mime/Mail.php\\"\\n\\n        /* Build recipients. */\\n        $recipients = clone $this->_recipients;\\n        foreach (array(\'to\', \'cc\') as $header) {\\n            if ($h = $this->_headers[$header]) {\\n                $recipients->add($h->getAddressList());\\n            }\\n        }\\n        if ($this->_bcc) {\\n            $recipients->add($this->_bcc);\\n        }\\n```\\n\\nThe source above shows that for `to` / `cc` the method `getAddressList()` is being called, while the value of `_bcc` gets \\npassed to the `add()` method.  However, `_bcc` holds in this case an instance of `Horde_Mime_Headers_Addresses`, \\nwhich `Horde_Mail_Rfc822_List::_normalize()` does not consider. The value is ultimately ignored, Emails are not being \\nsent to the addresses mentioned in the `bcc` header.\\n\\nHere\'s the implementation of [`normalize()`](https://github.com/horde/Mail/blob/5458e457a2b6c333a7aed8cd2d720e83aae2f381/lib/Horde/Mail/Rfc822/List.php#L302):\\n\\n```php  title=\\"Horde/Mail/Rfc822/List.php\\"\\n\\n    protected function _normalize($obs)\\n    {\\n        $add = array();\\n\\n        if (!($obs instanceof Horde_Mail_Rfc822_List) &&\\n            !is_array($obs)) {\\n            $obs = array($obs);\\n        }\\n\\n        foreach ($obs as $val) {\\n            if (is_string($val)) {\\n                $rfc822 = new Horde_Mail_Rfc822();\\n                $val = $rfc822->parseAddressList($val);\\n            }\\n\\n            if ($val instanceof Horde_Mail_Rfc822_List) {\\n                $val->setIteratorFilter(self::BASE_ELEMENTS);\\n                foreach ($val as $val2) {\\n                    $add[] = $val2;\\n                }\\n            } elseif ($val instanceof Horde_Mail_Rfc822_Object) {\\n                $add[] = $val;\\n            }\\n        }\\n\\n        return $add;\\n    }\\n\\n```\\n\\nA possible fix is to call `getAddressList()` on `_bcc` in `Horde_Mime_Mail::send()` or check for this type in the \\n`normalize()`-method of `Horde_Mail_Rfc822_List`:\\n\\n```diff  title=\\"Horde/Mail/Rfc822/List.php.diff\\"\\n\\n    protected function _normalize($obs)\\n    {\\n        $add = array();\\n\\n\\n+       if ($obs instanceof Horde_Mime_Headers_Addresses) {\\n+           $obs = $obs->getAddressList();\\n+       }\\n     \\n        if (!($obs instanceof Horde_Mail_Rfc822_List) &&\\n            !is_array($obs)) {\\n            $obs = array($obs);\\n        }\\n```\\n\\nFixing this in `Horde/Mime/Mail.php` is also possible, although I do not know if that would cause any side effect since I \\ncould not find the expected type of `_bcc`. It gets checked in \'_normalize()\' (see above) so I guess this would be the\\nbetter place to apply the fix, instead of doing this:\\n\\n```diff title=\\"Horde/Mime/Mail.php.diff\\"\\n\\n        /* Build recipients. */\\n        $recipients = clone $this->_recipients;\\n        foreach (array(\'to\', \'cc\') as $header) {\\n            if ($h = $this->_headers[$header]) {\\n                $recipients->add($h->getAddressList());\\n            }\\n        }\\n        if ($this->_bcc) {\\n-            $recipients->add($this->_bcc);\\n+            $recipients->add($this->_bcc->getAddressList()); \\n        }\\n```\\n\\n--------\\nUpdate 21.03.2023: PR available [here](https://github.com/maintaina-com/Mail/pull/3)"},{"id":"/2023/02/19/fix-missing-favicon-in-extjs","metadata":{"permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-02-19-fix-missing-favicon-in-extjs/index.md","source":"@site/blog/2023-02-19-fix-missing-favicon-in-extjs/index.md","title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","description":"Fix: Missing favicon.ico in Sencha ExtJS production builds","date":"2023-02-19T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"sencha","permalink":"/blog/tags/sencha"},{"inline":true,"label":"extjs","permalink":"/blog/tags/extjs"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","authors":["thorstensuckow"],"tags":["javascript","sencha","extjs"],"enableComments":true},"unlisted":false,"prevItem":{"title":"bcc-header issues with Horde_Mime_Mail","permalink":"/blog/2023/03/20/horde-mail-ignores-bcc"},"nextItem":{"title":"Releasing conjoon V1.0","permalink":"/blog/Releasing-conjoon-V1.0"}},"content":"## Fix: Missing favicon.ico in Sencha ExtJS production builds\\n\\nFixing missing favicon.ico in Ext JS applications.\\n\\n*The original issue is tracked here: [https://github.com/conjoon/conjoon/issues/24](https://github.com/conjoon/conjoon/issues/24)*\\n\\n### The issue\\n\\nI\u2019m not quite sure *when *and *why *it broke, but it looks like production builds of Sencha Ext JS applications do not contain any **favicon.ico** originally existing in the development build (*anymore*).\\n\x3c!--truncate--\x3e\\nWhile everything seems to be okay with development builds (that\u2019s easy, they refer to the development\u2019s root folder in most cases and do not copy and move files around like the production build does), deploying to production will show the default icon coming with your vendor\u2019s browser for any Sencha ExtJS application, at least when your environment is using the following package versions:\\n\\n```\\n    webpack v4.39.3n/a\\n    ext-webpack-plugin v7.6.0 \\n    Ext JS v7.6.0.41 \\n    Sencha Cmd v7.6.0.87\\n``\\n\\nA call to\\n\\n```bash\\n    $ cross-env webpack \\n          --env.profile=desktop \\n          --env.environment=production \\n          --env.treeshake=yes \\n          --env.cmdopts=--uses\\n```\\n\\nwill produce the production build, but the production build will not contain the favicon.ico. Here\u2019s proof (\u2026 sort of):\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*XGxSX1p43oVtk3cif5mE2Q.png)\\n\\n### The fix\\n\\nI did not invest too much investigating the reason why this file is omitted. Instead, I added the copy-webpack-plugin to the project and made sure the the favicon is copied over when running npm run build.\\n\\nIf you\u2019re reading this post, you most likely stumbled across the same issue. Here\u2019s how to fix it.\\n\\n1. Add copy-webpack-plugin to your project\\n\\nI\u2019m still sporting **webpack v4.39.3 **so I had to fall back to an older version of the plugin. I\u2019m using **copy-webpack-plugin@6.4.1** in this case:\\n\\n```bash\\n    $ npm i -D copy-webpack-plugin@6.4.1\\n```\\n\\n2. Add a few more modules to your project\u2019s webpack.config.js\\n\\nAdd the following two lines to the head of the file:\\n\\n```javascript\\n    // ....\\n    const CopyWebpackPlugin = require(\\"copy-webpack-plugin\\");\\n    const fs = require(\\"fs\\");\\n    //...\\n```\\n\\nWhy fs? I couldn\u2019t find an easy way to access the application\u2019s name at this point of the build step through the variables available, so I\u2019m using fs to parse the project\'s app.json. The value of its name-property is then used for computing the destination folder for the *copy*-operation.\\n\\n3. Add the **copy-webpack-plugin** to the list of plugins in the script\\n\\nYou\u2019ll easily find the location that has to be edited when looking for the **@sencha/ext-webpack-plugin**-configuration:\\n\\n```javascript\\n    const plugins = [\\n      new ExtWebpackPlugin({\\n        // ...\\n      }),\\n      new CopyWebpackPlugin({\\n        patterns: [{\\n          from: path.resolve(__dirname, \'./favicon.ico\'),\\n          to: path.join(\\n              __dirname,\\n              \\"build\\",\\n              environment,\\n              JSON.parse(\\n                fs.readFileSync(\\n                  path.resolve(__dirname, \'./app.json\')\\n                )\\n              ).name\\n          )\\n        }]\\n      })\\n    ]\\n```\\n\\nSubsequent builds will now contain the **favicon.ico**."},{"id":"Releasing-conjoon-V1.0","metadata":{"permalink":"/blog/Releasing-conjoon-V1.0","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-11-16-releasing-conjoon-v1.0/index.md","source":"@site/blog/2022-11-16-releasing-conjoon-v1.0/index.md","title":"Releasing conjoon V1.0","description":"Releasing conjoon V1.0","date":"2022-11-16T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"conjoon","permalink":"/blog/tags/conjoon"},{"inline":true,"label":"open source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"email","permalink":"/blog/tags/email"}],"readingTime":1.14,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"slug":"Releasing-conjoon-V1.0","title":"Releasing conjoon V1.0","authors":["thorstensuckow"],"tags":["release","conjoon","open source","email"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs"},"nextItem":{"title":"Easily create Siesta tests for your applications","permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application"}},"content":"## Releasing conjoon V1.0\\n\\nI\u2019m happy to announce conjoon 1.0, the very first major release of the Open Source JavaScript Email client.\\n\\nFor updating to the latest version, simply use our [installer](https://www.conjoon.org/blog/2022/11/14/docs/api/misc/@conjoon/create-conjoon). It will let you select the latest release when opting for the version to install.\\n\x3c!--truncate--\x3e\\n![](https://cdn-images-1.medium.com/max/3126/0*0A2MPF6zRkH3ks2E.png)\\n\\n## Highlights[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#highlights)\\n\\nv1.0.0 marks the first major release for our JavaScript Email frontend, over 100 tickets related to [bugfixes, optimizations and minor features](https://github.com/orgs/conjoon/projects/3) across all projects where closed.\\n\\nThis release focuses on providing a stable frontend in conjunction with [lumen-app-email](https://www.conjoon.org/docs/api/backends/@conjoon/lumen-app-email).\\n\\nBesides the features already introduced with the release candidates, the following features have been added:\\n\\n### Plugins[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#plugins)\\n\\n* Plugin [mail-internal-mailtohandler](https://www.conjoon.org/docs/api/plugins/@conjoon/extjs-app-webmail/mail-internal-mailtohandler): Plugin for registering conjoon as the protocol handler for mailto-links\\n\\n![](https://cdn-images-1.medium.com/max/2004/0*iehzFekzIAWO5vfh.png)\\n\\n### Installer and CLI actions for lumen-app-email[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#installer-and-cli-actions-for-lumen-app-email)\\n\\nThe installation for lumen-app-email has been simplified with the help of Artisan and CLI commands. To get an instance of lumen-app-email running, use\\n\\n```bash\\n    $ composer create-project conjoon/lumen-app-email {targetDir} {version}\\n```\\n\\nwhich will start the installation process. For more information, refer to the [official guide](https://www.conjoon.org/docs/api/backends/@conjoon/lumen-app-email#installation-1).\\n\\n![](https://cdn-images-1.medium.com/max/3218/0*X1lMoQ8gvmbMwhAF.png)\\n\\n### Docker Container[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#docker-container)\\n\\n[ddev-ms-email](https://www.conjoon.org/docs/api/backends/@conjoon/ddev-ms-email) has been updated to utilize the installer of lumen-app-email and additionally provides integration options for conjoon so that the container can be used for serving both the backend and the frontend.\\n\\n    $ ddev create-conjoon\\n\\nwill start the installation of conjoon. For more information, refer to the [official guide](https://www.conjoon.org/docs/api/backends/@conjoon/ddev-ms-email).\\n\\nHappy coding! \ud83c\udf88"},{"id":"/2022/07/15/easily-create-siesta-tests-for-your-application","metadata":{"permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-07-15-easily-create-siesta-tests-for-your-application/index.md","source":"@site/blog/2022-07-15-easily-create-siesta-tests-for-your-application/index.md","title":"Easily create Siesta tests for your applications","description":"Easily create Siesta tests for your applications","date":"2022-07-15T00:00:00.000Z","tags":[{"inline":true,"label":"npm","permalink":"/blog/tags/npm"},{"inline":true,"label":"tooling","permalink":"/blog/tags/tooling"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":2.49,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"Easily create Siesta tests for your applications","authors":["thorstensuckow"],"tags":["npm","tooling","javascript"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Releasing conjoon V1.0","permalink":"/blog/Releasing-conjoon-V1.0"},"nextItem":{"title":"JavaScript, function-as-object and the internet","permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet"}},"content":"## Easily create Siesta tests for your applications\\n\\n[Siesta](https://www.bryntum.com/products/siesta/) is a JavaScript unit and UI testing tool originally written by [Mats Bryntse](https://bryntum.com) which allows for running tests (for **Ext JS** (view-) components, amongst others) directly in the web browser (or headless in case you want to use it with your ci tools).\\n\\nIt is [conjoon](https://conjoon.org)\u2019s favorite among the various testing tools out there (we\u2019re also working with [**Jest**\ud83c\udccf](https://jestjs.io/) when there\u2019s no **Ext JS** involved) and without it, it\u2019s clear that End-to-End tests of some of the features and changes that have made it into conjoon would have slowed the project down due to their cyclic complexity \u2014 or even worse, make the software stuck in regression.\\n\x3c!--truncate--\x3e\\n[extjs-app-webmail](https://www.conjoon.org/docs/api/packages/@conjoon/extjs-app-webmail) alone sports more than 5000 unit and ui tests created with Siesta and they all make sure that the frontend behaves as intended and is free from unwelcomed side effects for any edge case that might occur (we know that\u2019s a [bold statement](https://dilbert.com/strip/2017-10-02?creator=Dilbert_Daily)).\\n\\nTo ease the process of setting up a functional **Siesta** environment, we\u2019re introducing the cli tool create-siesta which can be used with any JavaScript framework that requires a functional **Siesta** application running in a web browser, or at least a fully fledged infrastructure for running Siesta tests. However, by providing integrated build options for the **Ext JS** SDK, it is best suited for environments where the **Sencha** framework is already being used or will be used.\\n\\nFor using the tool, all that is required is a working [Node.js](https://node.js/) installation on your machine. The scaffolding process can then be started by typing\\n\\n```bash\\n$ npx create-siesta@latest\\n```\\n\\non the console. create-siesta will then guide you through the installation process and also consider the environment (aka *current working directory*) it was invoked in, by falling back to already existing **Ext JS** sources for example, or any other package requirements already available.\\n\\n![](https://cdn-images-1.medium.com/max/2400/1*ZOS1V_X-mg5T0ohzpH7GKg.gif)\\n\\nOnce create-siesta is finished, a folder (defaulting to tests) will be available with your project that contains a scaffolded **Siesta** environment with templates for additional and future tests you and your team can implement. Tests can then be started with\\n\\n```bash\\n$ npm run siesta:test\\n```\\n\\ncreate-siesta builds upon an already available helper tool for creating tests with Siesta, namely [**@coon-js/siesta-lib-helper](https://github.com/coon-js/siesta-lib-helper)** which is already widely used throughout the **conjoon** project and the packages it depends on. This means that you will have an additional control at hand with the Siesta application that allows for switching between toolkit dependent tests and dynamically changing timeout values used with\\n\\n```javascript\\n    t.waitForMs()\\n```\\n\\nin tests.\\n\\n![*The additional control made available by siesta-lib-helper allows for switching between the modern M and classic C toolkit and provides a list of timeout values that can be globally used with t.waitForMs() in tests.*](https://cdn-images-1.medium.com/max/2000/1*ThrsLBT_i7hVXw7df_kmtg.png)\\n\\n## Documentation[\u200b](http://localhost:3000/blog/2022/07/15/create-siesta#documentation)\\n\\nThe documentation for create-siesta can be found [here](https://www.conjoon.org/docs/api/misc/@coon-js/create-siesta), the sources are available with the [coon.js](https://github.com/coon-js) organization at **GitHub**, which provides a collection of useful tools for rapid **Sencha Ext JS** application development, and spawned from the [conjoon open source project](https://conjoon.org)."},{"id":"/2022/06/14/javascript-function-as-object-and-the-internet","metadata":{"permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-14-javascript-function-as-object-and-the-internet/index.md","source":"@site/blog/2022-06-14-javascript-function-as-object-and-the-internet/index.md","title":"JavaScript, function-as-object and the internet","description":"JavaScript, function-as-object and the internet","date":"2022-06-14T00:00:00.000Z","tags":[{"inline":true,"label":"social","permalink":"/blog/tags/social"},{"inline":true,"label":"internet","permalink":"/blog/tags/internet"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":0.6,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"JavaScript, function-as-object and the internet","authors":["thorstensuckow"],"tags":["social","internet","javascript"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Easily create Siesta tests for your applications","permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application"},"nextItem":{"title":"conjoon installer updates","permalink":"/blog/2022/06/08/conjoon-installer-updates"}},"content":"## JavaScript, function-as-object and the internet\\n\\nThe internet \u2122\ufe0f has caught up on an ad by [FERCHAU](https://www.linkedin.com/company/ferchau/), found \u2014 amongst others \u2014 somewhere within the depths of the Berlin subway.\\n\x3c!--truncate--\x3e\\n[![](./img/kitze-twitter.png)](https://twitter.com/thekitze/status/1535951647477846016)\\n\\n\\nSome devs cringe at the code used with the ad \u2014 turns out it can easily get de-mystified with JavaScript\u2019s [function-as-object](http://www.cs.uni.edu/~wallingf/patterns/envoy.pdf) style:\\n\\n[![](./img/twitter-thorstensuckow.png)](https://twitter.com/thorstensuckow/status/1536479447234248708)\\n\\n```javascript\\n    const careerStuck = () => {};\\n    careerStuck.stop = () => {};\\n```\\n\\nOpinions regarding semantics may differ:\\n\\n\\n```javascript\\n    if (careerStuck() === true) {\\n        careerStuck.stop();\\n        beSmart(); // \ud83d\udc40\\n    }\\n```\\n\\n### Further reading\\n\\nMartin Fowler on **FunctionAsObject** in an [article from 2017](https://martinfowler.com/bliki/FunctionAsObject.html). The pattern goes back to the last century when Eugene Wallingford coined the name \u201cFunction as Object\u201d in his [1999 pattern language \u201cEnvoy\u201d](http://www.cs.uni.edu/~wallingf/patterns/envoy.pdf)."},{"id":"/2022/06/08/conjoon-installer-updates","metadata":{"permalink":"/blog/2022/06/08/conjoon-installer-updates","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-08-conjoon-installer-updates/index.md","source":"@site/blog/2022-06-08-conjoon-installer-updates/index.md","title":"conjoon installer updates","description":"conjoon installer updates","date":"2022-06-08T00:00:00.000Z","tags":[{"inline":true,"label":"npm","permalink":"/blog/tags/npm"},{"inline":true,"label":"tooling","permalink":"/blog/tags/tooling"},{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"conjoon","permalink":"/blog/tags/conjoon"}],"readingTime":1.025,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"conjoon installer updates","authors":["thorstensuckow"],"tags":["npm","tooling","javascript","conjoon"],"enableComments":true},"unlisted":false,"prevItem":{"title":"JavaScript, function-as-object and the internet","permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet"},"nextItem":{"title":"Releasing conjoon 1.0.0-beta.0","permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta"}},"content":"![](https://cdn-images-1.medium.com/max/2186/1*jfdWSDOHVoTAkKJmlsSYqQ.gif)\\n\\n## conjoon installer updates\\n\\nCreating a custom labeled version of [conjoon](https://conjoon.org) has never been easier.\\n\\nThe installer (i.e. [initializer](https://docs.npmjs.com/cli/v8/commands/npm-init)) for conjoon received an update to make setting up a local installation of the frontend more convenient and more intuitive.\\n\x3c!--truncate--\x3e\\nThe installer requires [Node.js](https://nodejs.org/) 16.14 or above and is started by typing\\n\\n```bash\\n$ npx create-conjoon@latest\\n```\\n\\non the command line. Additionally, you have the option to initiate the [quick install](https://www.conjoon.org/assets/files/create-conjoon-ceb95c48fd2585e918c38d15f61bebca.md#install-type) right away by providing the name and the target directory for the installation:\\n\\n```bash\\n$ npx create-conjoon@latest \\"my webmail\\" ~/webmail\\n```\\n\\nThe *quick install* will continue the installation process by picking **the latest release** from the package registry (**including **pre-releases) and configure the installation with fake endpoints returning demo data. You can still connect to production systems later on by using appropriate settings.\\n\\n>  _If you prefer a guided installation for configuring endpoints for existing [backends](https://www.conjoon.org/assets/files/overview-8db4359943e06906e553f7195535e9dd.md) right away, you can omit any of the arguments. The installer will then present various options to make sure your requirements are met!_\\n\\nIn both cases, target directory will contain the files required for developing conjoon and a production build available in the build folder, which is served by typing npm run stage in the target directory."},{"id":"/2022/06/07/releasing-conjoon-1-0-0-beta","metadata":{"permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-07-releasing-conjoon-1-0-0-beta/index.md","source":"@site/blog/2022-06-07-releasing-conjoon-1-0-0-beta/index.md","title":"Releasing conjoon 1.0.0-beta.0","description":"Releasing conjoon 1.0.0-beta.0","date":"2022-06-07T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/blog/tags/release"},{"inline":true,"label":"conjoon","permalink":"/blog/tags/conjoon"},{"inline":true,"label":"open source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"email","permalink":"/blog/tags/email"}],"readingTime":0.64,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"Releasing conjoon 1.0.0-beta.0","authors":["thorstensuckow"],"tags":["release","conjoon","open source","email"],"enableComments":true},"unlisted":false,"prevItem":{"title":"conjoon installer updates","permalink":"/blog/2022/06/08/conjoon-installer-updates"},"nextItem":{"title":"Fix: Ext JS Simlets and omitting the status code","permalink":"/blog/2022/04/15/extjs-simlets-and-omitting-the-status-code"}},"content":"![](https://cdn-images-1.medium.com/max/2736/0*HWdUhNVaz3OI-bRw.png)\\n\\n## Releasing conjoon 1.0.0-beta.0\\n\\n\ud83c\udf89 5 years after the (almost) [first commit](https://github.com/conjoon/conjoon/commit/ca075e548a644011e0d9fbaa3321bcff7aa8f998) to conjoon\u2019s [new home](https://github.com/conjoon/conjoon), I\u2019m happy to announce the immediate availability of the first public pre-release of [**conjoon](https://conjoon.org)**, an open source email client built with JavaScript, PHP and great tools from the open source community.\\n\\nTo install the latest release on your local machine, type\\n\\n```bash\\n$ npx create-conjoon@latest\\n```\\n\\nthen follow the instructions on screen.\\n\x3c!--truncate--\x3e\\nDon\u2019t miss out on the [documentation](https://www.conjoon.org/docs) for more information about available install and build types.\\n\\nWhile I\u2019m confident that conjoon can take its first steps in a production environment, expect a stable first release to be available in the coming days. Until then, a few additions to the documentation and the [guides](https://www.conjoon.org/docs/category/guides) will be made.\\n\\nHappy coding! \ud83c\udf88"},{"id":"/2022/04/15/extjs-simlets-and-omitting-the-status-code","metadata":{"permalink":"/blog/2022/04/15/extjs-simlets-and-omitting-the-status-code","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-04-15-extjs-simlets-and-omitting-the-status-code/index.md","source":"@site/blog/2022-04-15-extjs-simlets-and-omitting-the-status-code/index.md","title":"Fix: Ext JS Simlets and omitting the status code","description":"Fix: Ext JS Simlets and omitting the status code","date":"2022-04-15T00:00:00.000Z","tags":[{"inline":true,"label":"javascript","permalink":"/blog/tags/javascript"},{"inline":true,"label":"sencha","permalink":"/blog/tags/sencha"},{"inline":true,"label":"extjs","permalink":"/blog/tags/extjs"}],"readingTime":2.51,"hasTruncateMarker":true,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"Fix: Ext JS Simlets and omitting the status code","authors":["thorstensuckow"],"tags":["javascript","sencha","extjs"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Releasing conjoon 1.0.0-beta.0","permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta"}},"content":"## Fix: Ext JS Simlets and omitting the status code\\n\\nI recently stumbled upon a mean error that was hard to track down. Luckily, the issue was caused by a simple carelessness regarding fully configured response-objects of Simlets used in the dev-environment of the conjoon-project and did not require any large refactoring.\\n\\n*The original issue is tracked here: [https://github.com/conjoon/extjs-app-webmail/issues/196](https://github.com/conjoon/extjs-app-webmail/issues/196)*\\n\x3c!--truncate--\x3e\\n### The issue\\n\\nThe problem was related to batch-operations in Ext JS: When any operation of the batch fails, the pauseonexception-setting is considered and further processing of any remaining operation is halted. The user then has the option to retry the last failed operation, continuing with the remaining operations if this was finally successful.\\nHowever, retrying some of the failed operations gave the following error:\\n\\n![](https://cdn-images-1.medium.com/max/2000/0*_Lq8JlNRBBEutuGY.png)\\n\\nThe operation that failed \u2014 and which is now about to be retried \u2014 was already destroyed by Ext JS internal garbage-collector.\\n\\n### The fix\\n\\nIt took some time to find out that the operation was destroyed and that some of the properties required for re-running it were already de-referenced. This took me to the internals of response-handling of XMLHttpRequests of Ext JS and finally to the code where the HTTP status of a request was inspected. Take note that I\u2019m mainly developing with Simlets to avoid costly network roundtrips to any backend.\\n\\n> _It is mandatory for the Simlets to properly treat mocked backend-errors by also providing the appropriate status-code._\\n\\nIt was assumed that simply setting the success-property in any of the delete/put/...-methods of a simlet treating the request would later on be parsed internally; setting the status-code of the response automatically to anything other than 200. That is not the case. It is mandatory for the Simlets to properly treat mocked backend-errors by also providing the appropriate status-code.\\n\\nThe flaw was too often overseen since the status-field was **not set,** as the following code examples show (examples represent code in any of the delete/post/put/...-methods of a Json-Simlet; see Ext.ux.ajax.Simlet):\\n\\nThe following leaves the ret.status-property undefined:\\n\\n```javascript\\n    //....\\n    const ret = {};\\n    ret.responseText = Ext.JSON.encode({\\n        success: false\\n    });\\n    return ret;\\n```\\n\\n\u2026 while the following re-uses the predefined value of 200 for the status, even if success=false should indicate that the request could not be processed as expected:\\n\\n```javascript\\n    const \\n        me = this,\\n        ret = {};\\n\\n    Ext.Array.forEach(me.responseProps, function (prop) {\\n        if (prop in me) {\\n            ret[prop] = me[prop];\\n        }\\n    });\\n\\n    ret.responseText = Ext.JSON.encode({\\n        success: false\\n    });\\n\\n    return ret;\\n```\\n\\nIn both cases, Ext.data.request.Ajax would parse the response and its status in the onComplete-method:\\n\\n```javascript\\n    result = Ext.data.request.Ajax.parseStatus(xhr.status, xhr);\\n```\\n\\nAn undefined status would cause the response to be treated as **not successful** (example 1), while anything other than undefined would be parsed and interpreted according to its HTTP-status representative (successful: 200; failure: 404, 500 etc.).\\n\\nExtJS would assume that a successful operation is not needed anymore; it is automatically destroyed then. This was unexpected behavior in this case, since the code marked the operation as a failure, but not via the status-code, which was required."}]}}')}}]);