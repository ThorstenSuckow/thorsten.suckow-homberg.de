(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[4130],{477:()=>{},2172:(n,e,i)=>{"use strict";i.d(e,{$z:()=>d,C9:()=>p,IX:()=>f,ZX:()=>h,eJ:()=>g,uR:()=>u});var o=i(6540),a=i(4882),t=i(8069),s=i(4945),l=i.n(s),r=i(2897),c=(i(3271),i(4848));function p(n){let{width:e,children:i,title:o,figure:t,figref:s,modeAware:l}=n;return(0,c.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,c.jsxs)("div",{style:{maxWidth:e,textAlign:"center",margin:20},children:[s&&(0,c.jsx)("a",{name:`fig_${s}`}),(0,c.jsx)("div",{className:!1!==l?"umlImg":"",children:i}),(0,c.jsx)("div",{style:{textAlign:"center"},children:(0,c.jsxs)("sup",{children:[(0,c.jsx)("b",{children:a.A.isString(t)?t:`Figure ${t??s??1}`})," ",(0,c.jsx)("span",{dangerouslySetInnerHTML:{__html:o}})]})})]})})}function g(n){let{id:e,source:i,title:o}=n;return(0,c.jsx)(p,{modeAware:!1,title:o,figure:`Source ${i}`,children:(0,c.jsx)(r.A,{id:e})})}function d(n){let{url:e,figure:i,title:o}=n;return(0,c.jsx)(p,{modeAware:!1,figure:i,title:o,children:(0,c.jsx)("img",{alt:"{title}",src:e})})}function u(n){let{children:e,figure:i,title:o}=n;return(0,c.jsx)(p,{modeAware:!0,figure:i,title:o,children:e})}function h(n){let{when:e,where:i}=n;const[o,a]=i;return(0,c.jsxs)("div",{children:["This article was originally published in ",e," at ",(0,c.jsx)("a",{target:"_blank",href:a,children:o}),". Some formatting might have get lost during the migration to this site: If you think you spotted an issue caused by malformed formatting, feel free to open a ",(0,c.jsx)("a",{href:"https://github.com/ThorstenSuckow/thorsten.suckow-homberg.de",children:"Pull Request"})," or ",(0,c.jsx)("a",{href:"mailto:thorsten@suckow-homberg.de",children:"send me an Email"}),"."]})}function f(n){let{url:e}=n;const[i,a]=o.useState("");return l()(e).then((n=>{n.text().then((n=>a(n)))})),(0,c.jsx)(t.A,{language:"php",children:i})}},2495:(n,e,i)=>{"use strict";i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","title":"Part 3: Configuration Details and defining Plugins","description":"Managing and configuring Plugins","source":"@site/docs/articles/creating-extjs-applications-with-coon-js/3-configuration-details-and-plugins.mdx","sourceDirName":"articles/creating-extjs-applications-with-coon-js","slug":"/articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","permalink":"/docs/articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/articles/creating-extjs-applications-with-coon-js/3-configuration-details-and-plugins.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1754904417000,"sidebarPosition":3,"frontMatter":{"title":"Part 3: Configuration Details and defining Plugins","description":"Managing and configuring Plugins"},"sidebar":"docs","previous":{"title":"Part 2: Packages and Configuration Options","permalink":"/docs/articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options"},"next":{"title":"Part 4: Registering services and using the Service Locator","permalink":"/docs/articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator"}}');var a=i(4848),t=i(8453),s=i(2172);const l={title:"Part 3: Configuration Details and defining Plugins",description:"Managing and configuring Plugins"},r=void 0,c={},p=[{value:"Environment-specific configuration files",id:"environment-specific-configuration-files",level:2},{value:"Layout of an application-configuration file",id:"layout-of-an-application-configuration-file",level:3},{value:"Sections considered within an application configuration file",id:"sections-considered-within-an-application-configuration-file",level:3},{value:"Dynamic Package Loading",id:"dynamic-package-loading",level:2},{value:"Package Configurations",id:"package-configurations",level:2},{value:"Accessing Package Configuration during runtime",id:"accessing-package-configuration-during-runtime",level:3},{value:"Configuring Plugins for PackageControllers",id:"configuring-plugins-for-packagecontrollers",level:2},{value:"Using the package\u2019s name to automatically set up the plugin",id:"using-the-packages-name-to-automatically-set-up-the-plugin",level:3},{value:"Passing arguments to a controller plugin\u2019s constructor",id:"passing-arguments-to-a-controller-plugins-constructor",level:3},{value:"Configuring Plugins for the Application",id:"configuring-plugins-for-the-application",level:2},{value:"Configuring Component Plugins",id:"configuring-component-plugins",level:2},{value:"Advise on using plugins",id:"advise-on-using-plugins",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"Real world examples",id:"real-world-examples",level:2}];function g(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsx)(s.ZX,{when:"April 2022",where:["medium.com","https://medium.com/@thorstensuckow/creating-ext-js-applications-with-coon-js-part-3-configuration-details-and-defining-plugins-a9e8e99b280a"]})}),"\n",(0,a.jsxs)(e.p,{children:["This part of the article series focuses on details of the configuration options available when using coon.core.app.Application from the ",(0,a.jsx)(e.em,{children:"coon.js"}),"-package; we will also take an extended look at configuration options for an application itself, namely how to configure ",(0,a.jsx)(e.strong,{children:"controller-"}),", ",(0,a.jsx)(e.strong,{children:"application-"})," and ",(0,a.jsx)(e.strong,{children:"component-"})," plugins globally."]}),"\n",(0,a.jsxs)(e.p,{children:["In the ",(0,a.jsx)(e.a,{href:"/docs/articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options",children:"previous part"})," of this article series I gave an introduction to the theory behind configuration options with ",(0,a.jsx)(e.em,{children:"coon.js"}),"-driven Sencha Ext JS applications. This article assumes that you are familiar with the topics covered therein."]}),"\n",(0,a.jsx)(e.h2,{id:"environment-specific-configuration-files",children:"Environment-specific configuration files"}),"\n",(0,a.jsxs)(e.p,{children:["Application and Package configuration files will be looked up in the resource path, followed by the folder that was configured with the coon-js-section of the application's app.json. Example (",(0,a.jsx)(e.em,{children:"app.json"}),"):"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "production": {\n            "coon-js" : {\n                "resourcePath": "files",\n                "env": "prod"\n            }\n        },\n        "development": {\n            "coon-js" : {\n                "resourcePath": "files",\n                "env": "dev"\n            }\n        }\n    }\n'})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Environment-specific configuration files will always be given precedence over the default-configuration files."})}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Depending on the build you are using (in this case either the production- or the development-build), configuration-files will be looked up in resources/files (note that the resources-folder is the folder-name/path returned by a call to Ext.getResourcePath())."}),"\n",(0,a.jsxs)(e.p,{children:["A ",(0,a.jsx)(e.em,{children:"coon.js"}),"-Application will first query configuration files for the build that is being used (by using the name pattern [application_name].[coon-js.env].conf.json), and if that file could not be loaded and results in a HTTP error-code, loading will fall back to [application_name].conf.json. In short, environment-specific configuration files will always be given precedence over the default-configuration files."]}),"\n",(0,a.jsxs)(e.p,{children:["For using specific ",(0,a.jsx)(e.strong,{children:"package configuration files"}),", see the section about ",(0,a.jsx)(e.strong,{children:"Dynamic Package Loading"}),"."]}),"\n",(0,a.jsx)(e.h3,{id:"layout-of-an-application-configuration-file",children:"Layout of an application-configuration file"}),"\n",(0,a.jsx)(e.p,{children:"An application\u2019s configuration file needs to contain valid JSON. The configuration needs to be an object keyed under [application_name].config. For an application with the name conjoon, the structure needs to be initially laid out as follows:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "conjoon": {\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"Note how the configuration has to be introduced with the name of the application the configuration is used in, in this case conjoon."}),"\n",(0,a.jsx)(e.h3,{id:"sections-considered-within-an-application-configuration-file",children:"Sections considered within an application configuration file"}),"\n",(0,a.jsxs)(e.p,{children:["The following sections are considered when reading out a ",(0,a.jsx)(e.em,{children:"coon.js"}),"-application configuration file:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"application: runtime related configuration for the application. Will be available via coon.core.ConfigManager.get([application_name])"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"plugins: Controller-/Component-Plugins that need to be registered for various controllers and/or components"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"packages: Configuration for packages used by the application. Can also be used to disable/enable packages in a given build"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"dynamic-package-loading",children:"Dynamic Package Loading"}),"\n",(0,a.jsxs)(e.p,{children:["For dynamic package loading, ",(0,a.jsx)(e.em,{children:"coon.js"})," queries Ext.manifest for packages which are part of the used-configuration in an application's app.json. Those packages need to have a coon-js section configured with a package-entry:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "autoLoad" : true\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"If autoLoad is set to true, these packages will be loaded by this application implementation dynamically upon startup.\nIf configured with the registerController-options set to true, this package's PackageController - if any - will be registered with the application, and during startup, it's preLaunchHook-method is called when the application is ready to settle into its launch()-method. If any of the registered PackageControllers preLaunchHook()-methods return false, the application's launch() will not be called."}),"\n",(0,a.jsxs)(e.p,{children:["More details on ",(0,a.jsx)(e.strong,{children:"Package Controllers"})," on how they help to modularize an application will be part of the next article in this series."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "autoLoad" : {\n                    "registerController": true\n                }\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"package-configurations",children:"Package Configurations"}),"\n",(0,a.jsxs)(e.p,{children:["You can add ",(0,a.jsx)(e.strong,{children:"individual configuration files"})," for your packages \u2014 those files must follow the naming scheme [package_name].conf.json, and it\u2019s generally a good idea to save them in the resources-folder as described in the previous section about the ",(0,a.jsx)(e.em,{children:"coon.js"}),"-environment variable, since this folder can serve as the root for all configuration files for your application."]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Package configuration files"})," will be considered if a package has the following section set in its ",(0,a.jsx)(e.em,{children:"package.json"}),", or globally in the application configuration file:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : {}\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"or"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : true\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"or"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : "filename"\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"While the first two entries will fall back to file names given the pattern [package_name].conf.json, the last example will define the file name explicitly."}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.em,{children:["Using specific configuration files for packages instead of placing the configuration itself in their ",(0,a.jsx)(e.em,{children:"package.json"})," can be beneficial when applying larger configurations to packages."]})}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"By default, package configuration files will be looked up in the package's resource-folder. If an additional path is specified, this path is interpreted and resolved:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Resolving to the resource-path of the owning package:"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n    "autoLoad": {\n        "registerController": true\n    },\n    "config": "extjs-app-webmail.conf.json"\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"or"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "autoLoad": {\n            "registerController": true\n        },\n        "config": "${package.resourcePath}/extjs-app-webmail.conf.json"\n    }\n'})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Resolving to the application\u2019s resource-path"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["The following resolves to resources/[coon-js.resourcePath]/extjs-app-webmail.conf.json. In this case, configuration will be read out from the resources-folder of the application, not the package itself. This spares developers the tedious task of looking up individual files throughout packages in the file system; it makes it possible to have all configuration centralized at one place, maintaining this one file with ",(0,a.jsx)(e.em,{children:".gitignore"}),", if necessary."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "autoLoad": {\n            "registerController": true\n        },\n        "config": "${coon-js.resourcePath}/extjs-app-webmail.conf.json"\n    }\n'})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.em,{children:["Package configuration files will completely overwrite configuration defined in the ",(0,a.jsx)(e.em,{children:"package.json"}),"-files of the owning package."]})}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"accessing-package-configuration-during-runtime",children:"Accessing Package Configuration during runtime"}),"\n",(0,a.jsx)(e.p,{children:"The configuration\u2019s data is registered with the coon.core.ConfigManager and can be queried by using calls to coon.core.ConfigManager.get([package_name]."}),"\n",(0,a.jsx)(e.h2,{id:"configuring-plugins-for-packagecontrollers",children:"Configuring Plugins for PackageControllers"}),"\n",(0,a.jsxs)(e.p,{children:["coon.core.app.PackageControllers are application controllers that wire additional functionality into the ",(0,a.jsx)(e.em,{children:"coon.js"}),"-application their used with, such as automizing routing or providing navigation options to their package\u2019s views."]}),"\n",(0,a.jsx)(e.p,{children:"They can have an arbitrary number of plugins of the type coon.core.app.plugin.ControllerPlugin which are called by the application during its preLaunchHook-process \u2014 which gets called prior to the application\u2019s launch-method."}),"\n",(0,a.jsx)(e.p,{children:"Regardless of the state of the return-value of a PackageController's preLaunchHook(), all registered plugins will be executed during the preLaunchHookProcess, making sure one can add additional setup instructions prior to calling a package controller\u2019s preLaunchHook."}),"\n",(0,a.jsx)(s.$z,{title:"The preLaunchHookProcess() of coon.core.app.Application will visit every configured controller plugin first, but only calls each controller\u2019s preLaunchHook() until the first \u201cfalse\u201d is detected as a return value",url:"https://cdn-images-1.medium.com/max/2000/1*T4vK3Qp2NYviCue9K9HcZw.png",figure:1}),"\n",(0,a.jsx)(e.p,{children:"For registering PluginControllers, either create them and add them to the PackageController manually by using coon.core.app.PackageController#addPlugin(), or use the package\u2019s configuration."}),"\n",(0,a.jsx)(e.h3,{id:"using-the-packages-name-to-automatically-set-up-the-plugin",children:"Using the package\u2019s name to automatically set up the plugin"}),"\n",(0,a.jsxs)(e.p,{children:["You can use the package-name to specify a single ControllerPlugin out of ",(0,a.jsx)(e.em,{children:"this"})," individual package. The plugin will then be looked up in the specified package\u2019s ",(0,a.jsx)(e.em,{children:"app"}),"-folder given the naming pattern [package-namespace].app.plugin.ControllerPlugin), or by specifying the fully qualified namespace of the ControllerPlugins to load."]}),"\n",(0,a.jsxs)(e.p,{children:["*Example: *\nplug-cn_themeutil has the namespace coon.plugin.themeutil; ",(0,a.jsx)(e.em,{children:"coon.js"})," tries to create coon.plugin.themeutil.app.plugin.ControllerPlugin during application startup; the class must therefore be defined and registered so the dependency can be properly resolved by Sencha Ext JS \u2014 this simply means that you need to make sure that the defining package of the plugin is defined as a dependency for the application itself, in either the app.json\u2019s requires or uses-property."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : {\n                    "plugins" : {\n                        "controller" : ["plug-cn_themeutil"]\n                    }\n                }\n            }\n        }\n    }\n'})}),"\n",(0,a.jsxs)(e.p,{children:["The following is the same as above, but this time we specify the ",(0,a.jsx)(e.em,{children:"fqn"})," of the plugin (coon.plugin.themeutil.app.plugin.ControllerPlugin)"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : {\n                    "plugins" : {\n                        "controller" :["coon.plugin.themeutil.app.plugin.ControllerPlugin"]\n                    }\n                }\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.h3,{id:"passing-arguments-to-a-controller-plugins-constructor",children:"Passing arguments to a controller plugin\u2019s constructor"}),"\n",(0,a.jsxs)(e.p,{children:["A controller plugin can also be configured with arguments that get applied to the constructor of the ControllerPlugin. For specifying constructor arguments, the configuration for the controller plugin has to be an object with the keys xclass holding the ",(0,a.jsx)(e.em,{children:"fqn"})," of the controller plugin, and args, which is an array of arguments that get passed to the plugin\u2019s constructor."]}),"\n",(0,a.jsxs)(e.p,{children:["In the following example, ",(0,a.jsx)(e.code,{children:'{property: "value"}'})," is passed as the first argument to the plugin\u2019s constructor:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "coon-js": {\n            "plugins": {\n                "controller": [\n                    {\n                        "xclass": "conjoon.plugin.ControllerPlugin",\n                        "args": [\n                            {\n                                "property": "value"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.p,{children:"Note: Plugins for PackageControllers will only be registered if the PackageController itself is configured as such in the owning package\u2019s configuration (i.e. coon-js.package.controller)."}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.em,{children:["You can add as many plugins as you\u2019d like in the configuration, and mix and match package names with ",(0,a.jsx)(e.em,{children:"fqn"}),"s of the ControllerPlugins."]})}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"configuring-plugins-for-the-application",children:"Configuring Plugins for the Application"}),"\n",(0,a.jsxs)(e.p,{children:["A ",(0,a.jsx)(e.em,{children:"coon.js"}),"-",(0,a.jsx)(e.strong,{children:"application"})," can also be configured with plugins (read: ",(0,a.jsx)(e.strong,{children:"application plugins"}),"). These plugins are loaded globally into the application, and do not depend on PackageControllers per se."]}),"\n",(0,a.jsxs)(e.p,{children:["The configuration of application plugins follows the same principles as configuring controller plugins when it comes to resolving dependencies, given either the package name the application plugin can be found in, or the ",(0,a.jsx)(e.em,{children:"fqn"})," of the application plugin."]}),"\n",(0,a.jsx)(e.p,{children:"There are two (obvious) differences:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["When not using the ",(0,a.jsx)(e.em,{children:"fqn"}),", application plugins will be looked up given the naming pattern [package_namespace].app.plugin.ApplicationPlugin"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"application plugins must be configured in the **application configuration **(see the previous section in this article regarding application configuration), namely in the [application_name].plugins.application section"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Example:"})}),"\n",(0,a.jsx)(e.p,{children:"The following registers coon.plugin.themeutil.app.plugin.ApplicationPlugin as an application plugin for the owning application:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'    {\n        "conjoon" : {\n            "plugins": {\n                "application" : [\n                    "extjs-plug-themeutil"\n                ]\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"configuring-component-plugins",children:"Configuring Component Plugins"}),"\n",(0,a.jsxs)(e.p,{children:["coon.jsprovides funtionality to specify component-plugins using both the application configuration or package configurations.\nTo properly resolve component plugins as dependencies, they need to be loaded by defining them as classes owned by packages (e.g. by specifying those packages in the requires- or uses-section in the app.json) \u2014 or in any other way so the Ext JS\u2019 microloader is aware of them.\nA **component plugin configuration **has the following key/value-pairs (and can be placed in either the ",(0,a.jsx)(e.em,{children:"application configuration"})," or a ",(0,a.jsx)(e.em,{children:"package configuration"}),"):"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"cmp: A valid component query the application uses to look up the component for which this plugin should be registered"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"event: The name of the event that should be listened to for instantiating and registering the plugin"}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:["pclass/fclass: The ",(0,a.jsx)(e.em,{children:"fqn"})," for the plugin to use. If you are using a plugin that extends Ext.plugin.Abstract, use pclass. If you are referencing a grid-feature (i.e. extending Ext.grid.feature.Feature), use fclass"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"args: An array of arguments that get passed to the constructor of the plugin"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.em,{children:"Internally, the mixin coon.core.app.plugin.ComponentPluginMixin is used by the coon.core.app.Application and coon.core.app.PackageController to manage component plugins."})}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",metastring:'title="Example for specifying component plugins using the application configuration"',children:'    {\n        "conjoon" : {\n            "plugins": {\n                "components": [\n                    {\n                        "cmp": "cn_navport-tbar",\n                        "pclass": "conjoon.ModeSwitchPlugin",\n                        "event": "beforerender",\n                        "args": [{"defaultMode": "dark"}]\n                    },\n\n                    {\n                        "cmp": "cn_mail-mailmessagegrid",\n                        "fclass": "conjoon.PreviewTextLazyLoad",\n                        "event": "cn_init"\n                    }\n                ]\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",metastring:'title="Example for specifying component plugins using a package configuration"',children:'    {\n        "coon-js": {\n            "package" : {\n                "config" : {\n                    "plugins" : {\n                        "controller" : [\n                            "plug-cn_themeutil"\n                        ],\n                        "components": [\n                            {\n                                "cmp": "cn_navport-tbar",\n                                "pclass": "conjoon.ModeSwitchPlugin",\n                                "event": "beforerender",\n                                "args": [{"defaultMode": "dark"}]\n                            },\n                            {\n                                "cmp": "cn_mail-mailmessagegrid",\n                                "fclass": "conjoon.PreviewTextLazyLoad",\n                                "event": "cn_init"\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"advise-on-using-plugins",children:"Advise on using plugins"}),"\n",(0,a.jsx)(e.p,{children:"Use Application Plugins when you want to"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"add optional functionality to an application"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Use Controller Plugins when you want to"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"add optional functionality to a package"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Use Component Plugins when you want to"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"add optional functionality to a specific component"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,a.jsxs)(e.p,{children:["It is recommended to use the packages-section of the **application configuration **to make sure ",(0,a.jsx)(e.strong,{children:"configuration can be edited at a central place"}),".\nSpecifying the packages-section in the application configuration file will make sure that packages configurations defined here completely overwrite the settings found in their original package.json.\nConfiguration of packages in the application configuration is the same as configuring packages in their associated package.json, except for section keys used."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",metastring:'title="Example for package configuration in the application configuration file"',children:'    {\n        "conjoon": {\n            "packages" : {\n                "extjs-app-webmail" : {\n                    "autoLoad": {\n                        "registerController": true\n                    },\n                    "config": "${coon-js.resourcePath}/mail.conf.json"\n                },\n                "extjs-app-imapuser": {\n                    "autoLoad": {\n                        "registerController": true\n                    },\n                    "config": {\n                        "service": {\n                            "rest-imapuser": {\n                                "base": "https://rest-imapuser/api/v0"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n'})}),"\n",(0,a.jsx)(e.h2,{id:"real-world-examples",children:"Real world examples"}),"\n",(0,a.jsxs)(e.p,{children:["A large configurable application built with ",(0,a.jsx)(e.em,{children:"coon.js"})," can be found in the ",(0,a.jsx)(e.a,{href:"https://github.com/conjoon/conjoon",children:"conjoon"}),"-repository."]}),"\n",(0,a.jsx)(e.p,{children:"The next part in this article series will take a look at the concept and usage of PackageControllers."})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(g,{...n})}):g(n)}},3271:(n,e,i)=>{"use strict";i.d(e,{R5:()=>a,I8:()=>a,Dn:()=>t,lA:()=>s,E4:()=>a,$1:()=>s});i(6540);var o=i(4848);function a(n){let{name:e,pp:i,add:a}=n;const t=`#bibref-${e.toLowerCase()}`;return(0,o.jsxs)("a",{href:t,children:["[",(0,o.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",e]}),a?`, ${a} `:"",i?`, ${i.includes("-")?"pp":"p"}. ${i}`:"","]"]})}function t(n){let{idx:e}=n;return(0,o.jsx)("a",{href:`#fig_${e}`,children:(0,o.jsxs)("span",{className:"bibRef",children:["Figure ",e]})})}function s(n){let{name:e,file:i,url:a}=n;i=i||(a||""),Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((n=>{let[e,o]=n;if(i.startsWith(`${e}.`))return i=i.replace(`${e}.`,`${o}.`),!0}));const t=`/docs/wiki/${i}`;return(0,o.jsx)("a",{href:t,className:"glosRef",children:e})}},8453:(n,e,i)=>{"use strict";i.d(e,{R:()=>s,x:()=>l});var o=i(6540);const a={},t=o.createContext(a);function s(n){const e=o.useContext(t);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);