"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Articles","items":[{"type":"link","label":"On Software Craftsmanship","href":"/docs/articles/software-craftsmanship/","docId":"articles/software-craftsmanship/index","unlisted":false},{"type":"category","label":"Computer Graphics","items":[{"type":"link","label":"The Geometry of the Dot Product","href":"/docs/articles/computer-graphics/the-geometry-of-the-dot-product","docId":"articles/computer-graphics/dot-product","unlisted":false}],"collapsed":false,"collapsible":true,"href":"/docs/articles/computer-graphics/"},{"type":"link","label":"[DE] Modeling Biological Neurons: Foundations of Neural Networks in Healthcare","href":"/docs/articles/modeling-biological-neurons/","docId":"articles/modeling-biological-neurons/index","unlisted":false},{"type":"link","label":"Approaching Contracted Events for Micro Frontend Communication","href":"/docs/articles/contracted-events-for-micro-frontend-communication/","docId":"articles/contracted-events-for-micro-frontend-communication/index","unlisted":false},{"type":"link","label":"Accessor Automation with PHP Attributes","href":"/docs/articles/getter-setter-automation-with-php-attributes/","docId":"articles/getter-setter-automation-with-php-attributes/index","unlisted":false},{"type":"category","label":"The Payroll System","items":[{"type":"link","label":"Use Case 1 - Adding a new employee","href":"/docs/articles/agp-the-payroll-system/Use-Case-1-Adding-a-new-employee","docId":"articles/agp-the-payroll-system/use-case-1-adding-a-new-employee","unlisted":false}],"collapsed":false,"collapsible":true,"href":"/docs/articles/agp-the-payroll-system/introduction"},{"type":"link","label":"Dependency Injection in JavaScript","href":"/docs/articles/dependency-injection-in-javascript/","docId":"articles/dependency-injection-in-javascript/index","unlisted":false},{"type":"link","label":"Ext JS - Beyond ES5","href":"/docs/articles/sencha-extjs-beyond-es5/","docId":"articles/sencha-extjs-beyond-es5/index","unlisted":false},{"type":"link","label":"Using PHP enums as method calls","href":"/docs/articles/using-php-enums-as-method-calls/","docId":"articles/using-php-enums-as-method-calls/index","unlisted":false},{"type":"link","label":"Downloadable Assets with GitHub Actions","href":"/docs/articles/downloadable-assets-with-github-actions/","docId":"articles/downloadable-assets-with-github-actions/index","unlisted":false},{"type":"category","label":"Creating ExtJS applications with coon.js","items":[{"type":"link","label":"Part 1: Introduction","href":"/docs/articles/creating-extjs-applications-with-coon-js/introduction","docId":"articles/creating-extjs-applications-with-coon-js/introduction","unlisted":false},{"type":"link","label":"Part 2: Packages and Configuration Options","href":"/docs/articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options","docId":"articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options","unlisted":false},{"type":"link","label":"Part 3: Configuration Details and defining Plugins","href":"/docs/articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","docId":"articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","unlisted":false},{"type":"link","label":"Part 4: Registering services and using the Service Locator","href":"/docs/articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator","docId":"articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator","unlisted":false}],"collapsed":false,"collapsible":true,"href":"/docs/articles/creating-extjs-applications-with-coon-js/"},{"type":"link","label":"JavaScript Promises \u2014 Return Values and Error Handlers","href":"/docs/articles/javascript-promises-return-values-and-error-handlers/","docId":"articles/javascript-promises-return-values-and-error-handlers/index","unlisted":false},{"type":"link","label":"Fluent Interface for JavaScript Promises","href":"/docs/articles/a-fluent-interface-for-javascript-promises/","docId":"articles/a-fluent-interface-for-javascript-promises/index","unlisted":false},{"type":"link","label":"PHP, default time zones and DST","href":"/docs/articles/php-default-time-zones-and-dst/","docId":"articles/php-default-time-zones-and-dst/index","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs/articles/"}],"toolbox":[{"type":"category","label":"Catalogue","items":[{"type":"category","label":"Java","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Constructors","href":"/docs/toolbox/Java/java.constructors","docId":"toolbox/Java/java.constructors","unlisted":false}],"href":"/docs/toolbox/Java/"},{"type":"link","label":"Actor","href":"/docs/toolbox/uml.actor","docId":"toolbox/uml.actor","unlisted":false},{"type":"link","label":"Aggregate","href":"/docs/toolbox/ddd.aggregate","docId":"toolbox/ddd.aggregate","unlisted":false},{"type":"link","label":"Aggregation","href":"/docs/toolbox/uml.aggregation","docId":"toolbox/uml.aggregation","unlisted":false},{"type":"link","label":"Aliasing","href":"/docs/toolbox/computerscience.aliasing","docId":"toolbox/computerscience.aliasing","unlisted":false},{"type":"link","label":"Anemic Domain Model","href":"/docs/toolbox/ddd.anemicdomainmodel","docId":"toolbox/ddd.anemicdomainmodel","unlisted":false},{"type":"link","label":"Application Layer","href":"/docs/toolbox/softwarearchitecture.applicationlayer","docId":"toolbox/softwarearchitecture.applicationlayer","unlisted":false},{"type":"link","label":"Association","href":"/docs/toolbox/uml.association","docId":"toolbox/uml.association","unlisted":false},{"type":"link","label":"Big Ball of Mud","href":"/docs/toolbox/softwaredesign.bigballofmud","docId":"toolbox/softwaredesign.bigballofmud","unlisted":false},{"type":"link","label":"BoundedContext","href":"/docs/toolbox/ddd.boundedcontext","docId":"toolbox/ddd.boundedcontext","unlisted":false},{"type":"link","label":"Composition","href":"/docs/toolbox/uml.composition","docId":"toolbox/uml.composition","unlisted":false},{"type":"link","label":"Core Domain","href":"/docs/toolbox/ddd.coredomain","docId":"toolbox/ddd.coredomain","unlisted":false},{"type":"link","label":"Dependency","href":"/docs/toolbox/uml.dependency","docId":"toolbox/uml.dependency","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/docs/toolbox/softwaredesign.dependencyinjection","docId":"toolbox/softwaredesign.dependencyinjection","unlisted":false},{"type":"link","label":"Dependency-Inversion Principle","href":"/docs/toolbox/softwaredesign.dependencyinversionprinciple","docId":"toolbox/softwaredesign.dependencyinversionprinciple","unlisted":false},{"type":"link","label":"Domain","href":"/docs/toolbox/softwaredesign.domain","docId":"toolbox/softwaredesign.domain","unlisted":false},{"type":"link","label":"Domain Driven Design","href":"/docs/toolbox/ddd.domaindrivendesign","docId":"toolbox/ddd.domaindrivendesign","unlisted":false},{"type":"link","label":"Domain Layer","href":"/docs/toolbox/ddd.domainlayer","docId":"toolbox/ddd.domainlayer","unlisted":false},{"type":"link","label":"Domain Model","href":"/docs/toolbox/ddd.domainmodel","docId":"toolbox/ddd.domainmodel","unlisted":false},{"type":"link","label":"System Driver Types","href":"/docs/toolbox/linux.drivertypes","docId":"toolbox/linux.drivertypes","unlisted":false},{"type":"link","label":"Entity","href":"/docs/toolbox/softwaredesign.entity","docId":"toolbox/softwaredesign.entity","unlisted":false},{"type":"link","label":"Eventual Consistency","href":"/docs/toolbox/softwaredesign.eventualconsistency","docId":"toolbox/softwaredesign.eventualconsistency","unlisted":false},{"type":"link","label":"Facade","href":"/docs/toolbox/softwaredesign.facade","docId":"toolbox/softwaredesign.facade","unlisted":false},{"type":"link","label":"Factory Method","href":"/docs/toolbox/softwaredesign.factorymethod","docId":"toolbox/softwaredesign.factorymethod","unlisted":false},{"type":"link","label":"First-Class Citizen","href":"/docs/toolbox/computerscience.firstclasscitizen","docId":"toolbox/computerscience.firstclasscitizen","unlisted":false},{"type":"link","label":"Higher-Order Function","href":"/docs/toolbox/computerscience.higherorderfunction","docId":"toolbox/computerscience.higherorderfunction","unlisted":false},{"type":"link","label":"Keyword","href":"/docs/toolbox/uml.keyword","docId":"toolbox/uml.keyword","unlisted":false},{"type":"link","label":"\u03bb Calculus","href":"/docs/toolbox/computerscience.lambdacalculus","docId":"toolbox/computerscience.lambdacalculus","unlisted":false},{"type":"link","label":"Layered Architecture","href":"/docs/toolbox/softwarearchitecture.layeredarchitecture","docId":"toolbox/softwarearchitecture.layeredarchitecture","unlisted":false},{"type":"link","label":"Liskov Substitution Principle","href":"/docs/toolbox/softwaredesign.liskovsubstitutionprinciple","docId":"toolbox/softwaredesign.liskovsubstitutionprinciple","unlisted":false},{"type":"link","label":"Metaclass","href":"/docs/toolbox/computerscience.metaclass","docId":"toolbox/computerscience.metaclass","unlisted":false},{"type":"link","label":"Method Signature","href":"/docs/toolbox/computerscience.methodsignature","docId":"toolbox/computerscience.methodsignature","unlisted":false},{"type":"link","label":"Pure Function","href":"/docs/toolbox/computerscience.purefunction","docId":"toolbox/computerscience.purefunction","unlisted":false},{"type":"link","label":"Referential Transparency","href":"/docs/toolbox/computerscience.referentialtransparency","docId":"toolbox/computerscience.referentialtransparency","unlisted":false},{"type":"link","label":"Repository","href":"/docs/toolbox/softwaredesign.repository","docId":"toolbox/softwaredesign.repository","unlisted":false},{"type":"link","label":"Separate Query From Modifier","href":"/docs/toolbox/refactoring.separatequeryfrommodifier","docId":"toolbox/refactoring.separatequeryfrommodifier","unlisted":false},{"type":"link","label":"Separation of Concerns","href":"/docs/toolbox/softwaredesign.separationofconcerns","docId":"toolbox/softwaredesign.separationofconcerns","unlisted":false},{"type":"link","label":"Single Responsibility Principle","href":"/docs/toolbox/softwaredesign.singleresponsibilityprinciple","docId":"toolbox/softwaredesign.singleresponsibilityprinciple","unlisted":false},{"type":"link","label":"Singleton","href":"/docs/toolbox/softwaredesign.singleton","docId":"toolbox/softwaredesign.singleton","unlisted":false},{"type":"link","label":"SOLID","href":"/docs/toolbox/softwaredesign.solid","docId":"toolbox/softwaredesign.solid","unlisted":false},{"type":"link","label":"Spanning Tree","href":"/docs/toolbox/graphtheory.spanningtree","docId":"toolbox/graphtheory.spanningtree","unlisted":false},{"type":"link","label":"Symptoms of Poor Design","href":"/docs/toolbox/softwaredesign.symptomsofpoordesign","docId":"toolbox/softwaredesign.symptomsofpoordesign","unlisted":false},{"type":"link","label":"Table Data Gateway","href":"/docs/toolbox/softwaredesign.tabledatagateway","docId":"toolbox/softwaredesign.tabledatagateway","unlisted":false},{"type":"link","label":"Ubiquitous Language","href":"/docs/toolbox/ddd.ubiquitouslanguage","docId":"toolbox/ddd.ubiquitouslanguage","unlisted":false},{"type":"link","label":"Use Case","href":"/docs/toolbox/uml.usecase","docId":"toolbox/uml.usecase","unlisted":false},{"type":"link","label":"Value Object","href":"/docs/toolbox/softwaredesign.valueobject","docId":"toolbox/softwaredesign.valueobject","unlisted":false},{"type":"link","label":"View Frustum","href":"/docs/toolbox/computergraphics.viewfrustum","docId":"toolbox/computergraphics.viewfrustum","unlisted":false},{"type":"link","label":"X.509 Certificate","href":"/docs/toolbox/csec.x509","docId":"toolbox/csec.x509","unlisted":false}],"collapsible":true,"collapsed":false,"href":"/docs/toolbox"},{"type":"link","label":"Bibliography","href":"/docs/bibliography","docId":"bibliography","unlisted":false}]},"docs":{"articles/a-fluent-interface-for-javascript-promises/index":{"id":"articles/a-fluent-interface-for-javascript-promises/index","title":"Fluent Interface for JavaScript Promises","description":"Use JavaScript Proxies to create fluent interfaces for Promises","sidebar":"docs"},"articles/agp-the-payroll-system/index":{"id":"articles/agp-the-payroll-system/index","title":"Introduction","description":"Agile Software Development Workshop","sidebar":"docs"},"articles/agp-the-payroll-system/use-case-1-adding-a-new-employee":{"id":"articles/agp-the-payroll-system/use-case-1-adding-a-new-employee","title":"Use Case 1 - Adding a new employee","description":"A new employee is added by the receipt of an AddEmp transaction. This transaction contains the employee\'s name, addess, and assigned employee number. The transaction has the following three forms:","sidebar":"docs"},"articles/computer-graphics/dot-product":{"id":"articles/computer-graphics/dot-product","title":"The Geometry of the Dot Product","description":"The Geometry of the Dot Product and Applications to Visibility Modeling","sidebar":"docs"},"articles/computer-graphics/img/dot-product/README":{"id":"articles/computer-graphics/img/dot-product/README","title":"README","description":"commandos_origins.png"},"articles/computer-graphics/index":{"id":"articles/computer-graphics/index","title":"Computer Graphics","description":"","sidebar":"docs"},"articles/contracted-events-for-micro-frontend-communication/index":{"id":"articles/contracted-events-for-micro-frontend-communication/index","title":"Approaching Contracted Events for Micro Frontend Communication","description":"Non-breaking events for displaying information in distributed Frontend Fragments","sidebar":"docs"},"articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins":{"id":"articles/creating-extjs-applications-with-coon-js/configuration-details-and-plugins","title":"Part 3: Configuration Details and defining Plugins","description":"Managing and configuring Plugins","sidebar":"docs"},"articles/creating-extjs-applications-with-coon-js/index":{"id":"articles/creating-extjs-applications-with-coon-js/index","title":"Creating Ext JS Applications with coon.js","description":"Ext JS Application Development with npm and pluggable Packages","sidebar":"docs"},"articles/creating-extjs-applications-with-coon-js/introduction":{"id":"articles/creating-extjs-applications-with-coon-js/introduction","title":"Part 1: Introduction","description":"An introduction to the coon.js-Framework","sidebar":"docs"},"articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options":{"id":"articles/creating-extjs-applications-with-coon-js/packages-and-configuration-options","title":"Part 2: Packages and Configuration Options","description":"Managing and loading packages","sidebar":"docs"},"articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator":{"id":"articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator","title":"Part 4: Registering services and using the Service Locator","description":"Defining Services for Ext JS Applications","sidebar":"docs"},"articles/dependency-injection-in-javascript/index":{"id":"articles/dependency-injection-in-javascript/index","title":"Dependency Injection in JavaScript","description":"Implementing Constructor Injection with the help of JavaScript Proxies.","sidebar":"docs"},"articles/downloadable-assets-with-github-actions/index":{"id":"articles/downloadable-assets-with-github-actions/index","title":"Downloadable Assets with GitHub Actions","description":"Pack and publish your releases with GitHub Actions","sidebar":"docs"},"articles/getter-setter-automation-with-php-attributes/index":{"id":"articles/getter-setter-automation-with-php-attributes/index","title":"Accessor Automation with PHP Attributes","description":"Getters and Guarded Setters Automation with PHP attributes","sidebar":"docs"},"articles/index":{"id":"articles/index","title":"Articles","description":"A collection of articles about software development.","sidebar":"docs"},"articles/javascript-promises-return-values-and-error-handlers/index":{"id":"articles/javascript-promises-return-values-and-error-handlers/index","title":"JavaScript Promises \u2014 Return Values and Error Handlers","description":"Handling Errors and return values with JavaScript Promises","sidebar":"docs"},"articles/modeling-biological-neurons/index":{"id":"articles/modeling-biological-neurons/index","title":"[DE] Modeling Biological Neurons: Foundations of Neural Networks in Healthcare","description":"Eine Einf\xfchrung in mathematische Modelle der biologischen Nervenzelle als Bausteine k\xfcnstlicher neuronaler Netze und deren Anwendung im Gesundheitswesen","sidebar":"docs"},"articles/php-default-time-zones-and-dst/index":{"id":"articles/php-default-time-zones-and-dst/index","title":"PHP, default time zones and DST","description":"Preparing your PHP Application to support different time zones","sidebar":"docs"},"articles/sencha-extjs-beyond-es5/index":{"id":"articles/sencha-extjs-beyond-es5/index","title":"Ext JS - Beyond ES5","description":"Use latest ECMA Script versions with Sencha Ext JS","sidebar":"docs"},"articles/software-craftsmanship/index":{"id":"articles/software-craftsmanship/index","title":"On Software Craftsmanship","description":"Reflecting on the role and meaning of software development as **craftsmanship**.","sidebar":"docs"},"articles/using-php-enums-as-method-calls/index":{"id":"articles/using-php-enums-as-method-calls/index","title":"Using PHP enums as method calls","description":"Dynamically mapping method calls to existing typed values.","sidebar":"docs"},"bibliography":{"id":"bibliography","title":"Bibliography","description":"Akenine-M\xf6ller, Thomas et al.","sidebar":"toolbox"},"toolbox":{"id":"toolbox","title":"Catalogue","description":"This catalogue shows some tools of my ever-growing toolbox.","sidebar":"toolbox"},"toolbox/computergraphics.viewfrustum":{"id":"toolbox/computergraphics.viewfrustum","title":"View Frustum","description":"A frustum is a geometric shape representing a truncated pyramid with a rectangular base.","sidebar":"toolbox"},"toolbox/computerscience.aliasing":{"id":"toolbox/computerscience.aliasing","title":"Aliasing","description":"Aliasing in Object-Oriented Programming is a synonym for two (or more) variables referencing the same instance.","sidebar":"toolbox"},"toolbox/computerscience.firstclasscitizen":{"id":"toolbox/computerscience.firstclasscitizen","title":"First-Class Citizen","description":"In programming, an entity is called First-Class Citizen if all of the following apply:","sidebar":"toolbox"},"toolbox/computerscience.higherorderfunction":{"id":"toolbox/computerscience.higherorderfunction","title":"Higher-Order Function","description":"In programming, a function is called a Higher-Order Function, if any of the following applies:","sidebar":"toolbox"},"toolbox/computerscience.lambdacalculus":{"id":"toolbox/computerscience.lambdacalculus","title":"\u03bb Calculus","description":"Lambda Calculus is a formal definition for expressing functional computational operations based on variable binding and substitution.","sidebar":"toolbox"},"toolbox/computerscience.metaclass":{"id":"toolbox/computerscience.metaclass","title":"Metaclass","description":"A Metaclass in Object-oriented programming is a class whose instances contain class-definitions. Metaclasses can","sidebar":"toolbox"},"toolbox/computerscience.methodsignature":{"id":"toolbox/computerscience.methodsignature","title":"Method Signature","description":"A Method Signature identifies a method. It consists of the method\'s name and its formal parameter list.","sidebar":"toolbox"},"toolbox/computerscience.purefunction":{"id":"toolbox/computerscience.purefunction","title":"Pure Function","description":"A function is considered a Pure Function if","sidebar":"toolbox"},"toolbox/computerscience.referentialtransparency":{"id":"toolbox/computerscience.referentialtransparency","title":"Referential Transparency","description":"If an expression can be substituted for a value without changing the program\'s computational result, the expression is referential transparent.","sidebar":"toolbox"},"toolbox/csec.x509":{"id":"toolbox/csec.x509","title":"X.509 Certificate","description":"The X.509 Certificate is a standardised certificate format and is commonly used by Public Key Infrastructures (PKI) to ensure interoperability between systems.","sidebar":"toolbox"},"toolbox/ddd.aggregate":{"id":"toolbox/ddd.aggregate","title":"Aggregate","description":"An Aggregate is an abstraction for an object that is important and of value to the business of its domain. It is often referred to as a \\"cluster\\" of objects, because it is modelled as a whole/parts-relationship holding  between  and .","sidebar":"toolbox"},"toolbox/ddd.anemicdomainmodel":{"id":"toolbox/ddd.anemicdomainmodel","title":"Anemic Domain Model","description":"An Anemic Domain Model is a domain model that contains little or no business logic, and whose  mainly consists of getters and setters. Specification and invariants regarding the domain logic are controlled through layers and upstream components.","sidebar":"toolbox"},"toolbox/ddd.boundedcontext":{"id":"toolbox/ddd.boundedcontext","title":"BoundedContext","description":"A Bounded Context  is a part of a software system that contains the semantics of a","sidebar":"toolbox"},"toolbox/ddd.coredomain":{"id":"toolbox/ddd.coredomain","title":"Core Domain","description":"In a software system, a Core Domain is the part of the software that holds all functionality innate to the","sidebar":"toolbox"},"toolbox/ddd.domaindrivendesign":{"id":"toolbox/ddd.domaindrivendesign","title":"Domain Driven Design","description":"Domain Driven Design [DDD] is a software development methodology that focuses on","sidebar":"toolbox"},"toolbox/ddd.domainlayer":{"id":"toolbox/ddd.domainlayer","title":"Domain Layer","description":"The Domain Layer is a layer in  a  and holds all implementation related to the business of the software, such as rules and concepts, manifesting in , expressed through a  and bounded by .","sidebar":"toolbox"},"toolbox/ddd.domainmodel":{"id":"toolbox/ddd.domainmodel","title":"Domain Model","description":"A Domain Model is an abstraction of a (part of a)  in a software system.","sidebar":"toolbox"},"toolbox/ddd.ubiquitouslanguage":{"id":"toolbox/ddd.ubiquitouslanguage","title":"Ubiquitous Language","description":"A Ubiquitous Language is a vocabulary established by (software development) teams that provides semantic contexts","sidebar":"toolbox"},"toolbox/graphtheory.spanningtree":{"id":"toolbox/graphtheory.spanningtree","title":"Spanning Tree","description":"If $G$ is a connected graph, then the Spanning Tree $T \\\\sube G$  is a minimal connected graph with $V(T) = V(G)$.","sidebar":"toolbox"},"toolbox/Java/index":{"id":"toolbox/Java/index","title":"Java","description":"This section focuses on Java language specifics.","sidebar":"toolbox"},"toolbox/Java/java.constructors":{"id":"toolbox/Java/java.constructors","title":"Constructors","description":"Some authors treat the term default constructor equal to parameterless constructor.","sidebar":"toolbox"},"toolbox/linux.drivertypes":{"id":"toolbox/linux.drivertypes","title":"System Driver Types","description":"User Space Driver","sidebar":"toolbox"},"toolbox/refactoring.separatequeryfrommodifier":{"id":"toolbox/refactoring.separatequeryfrommodifier","title":"Separate Query From Modifier","description":"Separate Query From Modifier is a refactoring that helps with creating side effect free functions.","sidebar":"toolbox"},"toolbox/softwarearchitecture.applicationlayer":{"id":"toolbox/softwarearchitecture.applicationlayer","title":"Application Layer","description":"The Application Layer is an abstract functional division in a  that serves as the interface between the client and layers beneath the Application Layer, primarily the software system\'s Domain and Infrastructure Layer.","sidebar":"toolbox"},"toolbox/softwarearchitecture.layeredarchitecture":{"id":"toolbox/softwarearchitecture.layeredarchitecture","title":"Layered Architecture","description":"A Layered Architecture is a design paradigm for creating abstract divisions from related functionality in a software system.","sidebar":"toolbox"},"toolbox/softwaredesign.bigballofmud":{"id":"toolbox/softwaredesign.bigballofmud","title":"Big Ball of Mud","description":"A \\"Big Ball of Mud\\" is a historically grown software system (or a part of it) often characterized through lack of modularization, missing , redundant code and information leaking through various levels of abstractions.","sidebar":"toolbox"},"toolbox/softwaredesign.dependencyinjection":{"id":"toolbox/softwaredesign.dependencyinjection","title":"Dependency Injection","description":"Dependency Injection (DI) is a design pattern that helps with decoupling dependencies.","sidebar":"toolbox"},"toolbox/softwaredesign.dependencyinversionprinciple":{"id":"toolbox/softwaredesign.dependencyinversionprinciple","title":"Dependency-Inversion Principle","description":"The Dependency Inversion Principle (DIP) is a principle in Agile Software Development that helps with","sidebar":"toolbox"},"toolbox/softwaredesign.domain":{"id":"toolbox/softwaredesign.domain","title":"Domain","description":"The term Domain in Software Design stands for a business which processes are implemented in a software system","sidebar":"toolbox"},"toolbox/softwaredesign.entity":{"id":"toolbox/softwaredesign.entity","title":"Entity","description":"An Entity is a specification of a uniquely identifiable (abstract) object and its properties and behavior in a","sidebar":"toolbox"},"toolbox/softwaredesign.eventualconsistency":{"id":"toolbox/softwaredesign.eventualconsistency","title":"Eventual Consistency","description":"An Eventual Consistency is a consistency model that guarantees the consistent state of data.","sidebar":"toolbox"},"toolbox/softwaredesign.facade":{"id":"toolbox/softwaredesign.facade","title":"Facade","description":"A Facade is an object based Structural Pattern .","sidebar":"toolbox"},"toolbox/softwaredesign.factorymethod":{"id":"toolbox/softwaredesign.factorymethod","title":"Factory Method","description":"A Factory Method is a method for creating a new object for a given type.","sidebar":"toolbox"},"toolbox/softwaredesign.liskovsubstitutionprinciple":{"id":"toolbox/softwaredesign.liskovsubstitutionprinciple","title":"Liskov Substitution Principle","description":"The Liskov Substitution Principle (LSP) governs design rules for object oriented languages and states that \\"subtypes must be substitutable for their base types.\\" :","sidebar":"toolbox"},"toolbox/softwaredesign.repository":{"id":"toolbox/softwaredesign.repository","title":"Repository","description":"A Repository provides an interface for persisting and retrieving data, while hiding the implementation details of","sidebar":"toolbox"},"toolbox/softwaredesign.separationofconcerns":{"id":"toolbox/softwaredesign.separationofconcerns","title":"Separation of Concerns","description":"Separation of Concerns is a design principle in software development and can be considered fundamental for creating","sidebar":"toolbox"},"toolbox/softwaredesign.singleresponsibilityprinciple":{"id":"toolbox/softwaredesign.singleresponsibilityprinciple","title":"Single Responsibility Principle","description":"The Single Responsibility Principle (SRP) is a Software Design Principle that states that there should never be","sidebar":"toolbox"},"toolbox/softwaredesign.singleton":{"id":"toolbox/softwaredesign.singleton","title":"Singleton","description":"A Singleton is an object that uniquely exists for a class: Creating new instances of this class always restrict to this one object.","sidebar":"toolbox"},"toolbox/softwaredesign.solid":{"id":"toolbox/softwaredesign.solid","title":"SOLID","description":"SOLID is an acronym for five principles in Software Development and Software Design. They were introduced by","sidebar":"toolbox"},"toolbox/softwaredesign.symptomsofpoordesign":{"id":"toolbox/softwaredesign.symptomsofpoordesign","title":"Symptoms of Poor Design","description":"The Symptoms of Poor Design are a collection of symptoms that appear in software systems where poor design choices - or none at all -","sidebar":"toolbox"},"toolbox/softwaredesign.tabledatagateway":{"id":"toolbox/softwaredesign.tabledatagateway","title":"Table Data Gateway","description":"A Table Data Gateway provides an interface to the table of a database.","sidebar":"toolbox"},"toolbox/softwaredesign.valueobject":{"id":"toolbox/softwaredesign.valueobject","title":"Value Object","description":"In Object-Oriented Programming, a Value Object is an abstraction of a value belonging to a particular domain.","sidebar":"toolbox"},"toolbox/uml.actor":{"id":"toolbox/uml.actor","title":"Actor","description":"An Actor is an entity that interacts with a system.","sidebar":"toolbox"},"toolbox/uml.aggregation":{"id":"toolbox/uml.aggregation","title":"Aggregation","description":"An Aggregation is a form of an  with extended notation to emphasize on whole/part-relationships.","sidebar":"toolbox"},"toolbox/uml.association":{"id":"toolbox/uml.association","title":"Association","description":"An Association between entities can be illustrated in UML with a solid line connecting the entities that are related.","sidebar":"toolbox"},"toolbox/uml.composition":{"id":"toolbox/uml.composition","title":"Composition","description":"A Composition is an  and designates a special form of an . It is used in cases where the abstraction of a model requires a strong emphasis on the whole/part-relationship, approximately corresponding to denoting a parent/child-relationship of the elements within the Composition.","sidebar":"toolbox"},"toolbox/uml.dependency":{"id":"toolbox/uml.dependency","title":"Dependency","description":"A Dependency between a client (dependent) and a supplier (dependee) can be illustrated with a dashed line with its tail starting at the client and an open arrowhead ending at the supplier.","sidebar":"toolbox"},"toolbox/uml.keyword":{"id":"toolbox/uml.keyword","title":"Keyword","description":"A Keyword in UML is a predefined and reserved word available with the meta-model of UML.","sidebar":"toolbox"},"toolbox/uml.usecase":{"id":"toolbox/uml.usecase","title":"Use Case","description":"A Use Case represents a description of a functionality or requirement of a software system.","sidebar":"toolbox"}}}}')}}]);