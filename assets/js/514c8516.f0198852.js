"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[7094],{4458:e=>{e.exports=JSON.parse('{"permalink":"/blog/2023/03/20/horde-mail-ignores-bcc","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-03-20-horde-mail-ignores-bcc/index.md","source":"@site/blog/2023-03-20-horde-mail-ignores-bcc/index.md","title":"bcc-header issues with Horde_Mime_Mail","description":"bcc-header issues with HordeMimeMail","date":"2023-03-20T00:00:00.000Z","tags":[{"inline":true,"label":"php","permalink":"/blog/tags/php"},{"inline":true,"label":"horde","permalink":"/blog/tags/horde"},{"inline":true,"label":"bug","permalink":"/blog/tags/bug"}],"readingTime":2.69,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow","page":null}],"frontMatter":{"title":"bcc-header issues with Horde_Mime_Mail","authors":["thorstensuckow"],"tags":["php","horde","bug"],"enableComments":true},"unlisted":false,"prevItem":{"title":"[DE] Verf\xe4llt ein Big Ball of Mud?","permalink":"/blog/2023/04/14/big-ball-of-mud-decay"},"nextItem":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs"}}')},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var i=n(6540);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}},9435:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=n(4458),t=n(4848),r=n(8453);const o={title:"bcc-header issues with Horde_Mime_Mail",authors:["thorstensuckow"],tags:["php","horde","bug"],enableComments:!0},c=void 0,a={authorsImageUrls:[void 0]},d=[{value:"<code>bcc</code>-header issues with <code>Horde_Mime_Mail</code>",id:"bcc-header-issues-with-horde_mime_mail",level:2}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h2,{id:"bcc-header-issues-with-horde_mime_mail",children:[(0,t.jsx)(s.code,{children:"bcc"}),"-header issues with ",(0,t.jsx)(s.code,{children:"Horde_Mime_Mail"})]}),"\n",(0,t.jsxs)(s.p,{children:["This issue caused some uncertainty since I was not sure if the headers were broken due to missing quotes.\nSee ",(0,t.jsx)(s.a,{href:"https://github.com/conjoon/php-lib-conjoon/issues/17",children:"https://github.com/conjoon/php-lib-conjoon/issues/17"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Turns out that the way I assembled an email from a full text and converting it back to an instance of ",(0,t.jsx)(s.code,{children:"Horde_Mime_Mail"}),"\ndoes not consider the type of the internal representation of the ",(0,t.jsx)(s.code,{children:"bcc"}),"-field properly. It's related to\n",(0,t.jsx)(s.code,{children:"Horde_Mail_Rfc822_List::_normalize"})," and how values passed from ",(0,t.jsx)(s.code,{children:"Horde_Mime_Mail::send()"})," are processed by it."]}),"\n",(0,t.jsxs)(s.p,{children:["Here's a code snippet that shows how I use a full text message as input, then converting it back to an instance of ",(0,t.jsx)(s.code,{children:"Horde_Mime_Mail"}),"\nwith headers processed by ",(0,t.jsx)(s.code,{children:"Horde_Mime_Headers::parseHeaders()"}),".\nThe original message has a ",(0,t.jsx)(s.code,{children:"bcc"})," header-field:"]}),"\n",(0,t.jsxs)(s.p,{children:["(Original code ",(0,t.jsx)(s.a,{href:"https://github.com/conjoon/php-lib-conjoon/blob/ec170f351c0ff8dbdc390c8712dc24c47745abf6/src/Horde/Mail/Client/Imap/HordeClient.php#L648",children:"can be found here"}),")."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",metastring:'title="HordeClient.php"',children:"         $target = $item->getFullMsg(false);\n         // ... \n         $headers = Horde_Mime_Headers::parseHeaders($target);\n\n         $mail = new Horde_Mime_Mail($headers);\n         $part = Horde_Mime_Part::parseMessage($target);\n         $mail->setBasePart($part);\n\n         $mailer = $this->getMailer($account);\n         $mail->send($mailer);   \n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Horde_Mime_Mail"})," temporarily removes the ",(0,t.jsx)(s.code,{children:"bcc"})," header and stores it in a property named ",(0,t.jsx)(s.code,{children:"_bcc"}),", then uses this value to add\nit to the recipients' addresses later on in ",(0,t.jsx)(s.code,{children:"send()"}),". This is so the ",(0,t.jsx)(s.code,{children:"bcc"}),"-header is not appearing in the source of the message\nthe recipients receive (see ",(0,t.jsx)(s.a,{href:"https://www.ietf.org/rfc/rfc2822.txt",children:"https://www.ietf.org/rfc/rfc2822.txt"}),", Section ",(0,t.jsx)(s.strong,{children:"3.6.3"})," and ",(0,t.jsx)(s.strong,{children:"5"}),"):"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.em,{children:'"The "Bcc:" field (where the "Bcc" means "Blind Carbon Copy") contains\naddresses of recipients of the message whose addresses are not to be\nrevealed to other recipients of the message."'})," ",(0,t.jsxs)(s.a,{href:"https://www.ietf.org/rfc/rfc2822.txt",children:["https://www.ietf.org/rfc/rfc2822.txt, Section ",(0,t.jsx)(s.strong,{children:"3.6.3"})]})]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["This is a part of ",(0,t.jsx)(s.a,{href:"https://github.com/horde/Mime/blob/d9c11439bd82b7887b03271d595b998123b9fa0a/lib/Horde/Mime/Mail.php#L463",children:(0,t.jsx)(s.code,{children:"Horde_mime_Mail::send()"})}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",metastring:'title="Horde/Mime/Mail.php"',children:"\n        /* Build recipients. */\n        $recipients = clone $this->_recipients;\n        foreach (array('to', 'cc') as $header) {\n            if ($h = $this->_headers[$header]) {\n                $recipients->add($h->getAddressList());\n            }\n        }\n        if ($this->_bcc) {\n            $recipients->add($this->_bcc);\n        }\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The source above shows that for ",(0,t.jsx)(s.code,{children:"to"})," / ",(0,t.jsx)(s.code,{children:"cc"})," the method ",(0,t.jsx)(s.code,{children:"getAddressList()"})," is being called, while the value of ",(0,t.jsx)(s.code,{children:"_bcc"})," gets\npassed to the ",(0,t.jsx)(s.code,{children:"add()"})," method.  However, ",(0,t.jsx)(s.code,{children:"_bcc"})," holds in this case an instance of ",(0,t.jsx)(s.code,{children:"Horde_Mime_Headers_Addresses"}),",\nwhich ",(0,t.jsx)(s.code,{children:"Horde_Mail_Rfc822_List::_normalize()"})," does not consider. The value is ultimately ignored, Emails are not being\nsent to the addresses mentioned in the ",(0,t.jsx)(s.code,{children:"bcc"})," header."]}),"\n",(0,t.jsxs)(s.p,{children:["Here's the implementation of ",(0,t.jsx)(s.a,{href:"https://github.com/horde/Mail/blob/5458e457a2b6c333a7aed8cd2d720e83aae2f381/lib/Horde/Mail/Rfc822/List.php#L302",children:(0,t.jsx)(s.code,{children:"normalize()"})}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",metastring:'title="Horde/Mail/Rfc822/List.php"',children:"\n    protected function _normalize($obs)\n    {\n        $add = array();\n\n        if (!($obs instanceof Horde_Mail_Rfc822_List) &&\n            !is_array($obs)) {\n            $obs = array($obs);\n        }\n\n        foreach ($obs as $val) {\n            if (is_string($val)) {\n                $rfc822 = new Horde_Mail_Rfc822();\n                $val = $rfc822->parseAddressList($val);\n            }\n\n            if ($val instanceof Horde_Mail_Rfc822_List) {\n                $val->setIteratorFilter(self::BASE_ELEMENTS);\n                foreach ($val as $val2) {\n                    $add[] = $val2;\n                }\n            } elseif ($val instanceof Horde_Mail_Rfc822_Object) {\n                $add[] = $val;\n            }\n        }\n\n        return $add;\n    }\n\n"})}),"\n",(0,t.jsxs)(s.p,{children:["A possible fix is to call ",(0,t.jsx)(s.code,{children:"getAddressList()"})," on ",(0,t.jsx)(s.code,{children:"_bcc"})," in ",(0,t.jsx)(s.code,{children:"Horde_Mime_Mail::send()"})," or check for this type in the\n",(0,t.jsx)(s.code,{children:"normalize()"}),"-method of ",(0,t.jsx)(s.code,{children:"Horde_Mail_Rfc822_List"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-diff",metastring:'title="Horde/Mail/Rfc822/List.php.diff"',children:"\n    protected function _normalize($obs)\n    {\n        $add = array();\n\n\n+       if ($obs instanceof Horde_Mime_Headers_Addresses) {\n+           $obs = $obs->getAddressList();\n+       }\n     \n        if (!($obs instanceof Horde_Mail_Rfc822_List) &&\n            !is_array($obs)) {\n            $obs = array($obs);\n        }\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Fixing this in ",(0,t.jsx)(s.code,{children:"Horde/Mime/Mail.php"})," is also possible, although I do not know if that would cause any side effect since I\ncould not find the expected type of ",(0,t.jsx)(s.code,{children:"_bcc"}),". It gets checked in '_normalize()' (see above) so I guess this would be the\nbetter place to apply the fix, instead of doing this:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-diff",metastring:'title="Horde/Mime/Mail.php.diff"',children:"\n        /* Build recipients. */\n        $recipients = clone $this->_recipients;\n        foreach (array('to', 'cc') as $header) {\n            if ($h = $this->_headers[$header]) {\n                $recipients->add($h->getAddressList());\n            }\n        }\n        if ($this->_bcc) {\n-            $recipients->add($this->_bcc);\n+            $recipients->add($this->_bcc->getAddressList()); \n        }\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsxs)(s.p,{children:["Update 21.03.2023: PR available ",(0,t.jsx)(s.a,{href:"https://github.com/maintaina-com/Mail/pull/3",children:"here"})]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);