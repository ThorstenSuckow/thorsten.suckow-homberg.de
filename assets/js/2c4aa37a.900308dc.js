(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[187],{477:()=>{},874:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>d,bibRefs:()=>h,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"articles/dependency-injection-in-javascript/index","title":"Dependency Injection in JavaScript","description":"Implementing Constructor Injection with the help of JavaScript Proxies.","source":"@site/docs/articles/dependency-injection-in-javascript/index.mdx","sourceDirName":"articles/dependency-injection-in-javascript","slug":"/articles/dependency-injection-in-javascript/","permalink":"/docs/articles/dependency-injection-in-javascript/","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/articles/dependency-injection-in-javascript/index.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1752568225000,"frontMatter":{"title":"Dependency Injection in JavaScript"},"sidebar":"docs","previous":{"title":"Use Case 1 - Adding a new employee","permalink":"/docs/articles/agp-the-payroll-system/Use-Case-1-Adding-a-new-employee"},"next":{"title":"Ext JS - Beyond ES5","permalink":"/docs/articles/sencha-extjs-beyond-es5/"}}');var i=t(4848),r=t(8453),o=t(2172),a=t(3271);const c={title:"Dependency Injection in JavaScript"},l=void 0,d={},h=["ASD"],p=[{value:"Motivation",id:"motivation",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"Metadata: Static builds vs. runtime configuration",id:"metadata-static-builds-vs-runtime-configuration",level:3},{value:"Creating the Bindings",id:"creating-the-bindings",level:2},{value:"Finding a common language",id:"finding-a-common-language",level:3},{value:"Use Case: Injecting Authentication Methods",id:"use-case-injecting-authentication-methods",level:3},{value:"Bindings explained",id:"bindings-explained",level:3},{value:"Resolving dependencies \u2014 trapping the Factories",id:"resolving-dependencies--trapping-the-factories",level:2},{value:"Proxying the constructors",id:"proxying-the-constructors",level:2},{value:"Dependency Injection in Angular",id:"dependency-injection-in-angular",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implementing Constructor Injection with the help of JavaScript Proxies."}),"\n",(0,i.jsx)(n.em,{children:"Remove hardcoded dependencies in Code and provide interchangeable strategies for algorithms by injecting dependencies using an Inversion of Control-Container."})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(o.ZX,{when:"December 2022",where:["medium.com","https://medium.com/@thorstensuckow/dependency-injection-in-javascript-7f85dae43121"]})}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Low coupling"})," and ",(0,i.jsx)(n.em,{children:"high cohesion"})," does not imply the total absence of associations: The usage of abstraction layers rightfully demands specifics that provide concrete implementations satisfying contracts between parts of a system. After all, a program doesn\u2019t work if there is nothing that conforms to its ",(0,i.jsx)(n.em,{children:"Interfaces"})," and ",(0,i.jsx)(n.em,{children:"Abstract Classes"}),"."]}),"\n",(0,i.jsx)(o.$z,{url:"https://cdn-images-1.medium.com/max/2000/1*uKWFPsl49H9ZNyJaEzsrwA.png",figure:1,title:"The most basic expectation regarding a computer program is that a given input produces some output."}),"\n",(0,i.jsxs)(n.p,{children:["However, the way these dependencies are wired throughout source code often comes with a bitter taste: Dependencies are found in convoluted and deeply nested program code, effectively violating ",(0,i.jsx)(a.lA,{name:"SRP",file:"sd.singleresponsibilityprinciple"}),"  and ",(0,i.jsx)(a.lA,{name:"DIP",file:"sd.dependencyinversionprinciple"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["We are in the need of tools and design patterns that can help us with detangling the code, or we will end up with a program that has intricate boilerplate code for setting up mocks and stubs for testing, or worse: Becomes a nightmare to integrate with different environments and infrastructures. Granted, languages like ",(0,i.jsx)(n.em,{children:"JavaScript"})," makes it easy to mock dependencies during tests, but other languages are not so forgiving and test cases tend to get more complicated the more dependencies are hardwired."]}),"\n",(0,i.jsxs)(n.p,{children:["The following source code was taken from a ",(0,i.jsx)(n.em,{children:"REPOSITORY"}),"-implementation that uses a concrete Storage-class that hides away infrastructure that is used for writing data:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    class DataRepository {\n\n        async storeData(data) {\n             const  {Storage} = await import("storageApi");\n\n             const store = new Storage(...);\n\n             store.save(data);\n        }\n\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"It seems to align nicely with our code standards \u2014 it\u2019s small, it explains its intends clearly without additional comments, and it delegates to a sub-program responsible for communicating with infrastructure that is not of interest to us."}),"\n",(0,i.jsxs)(n.p,{children:["However, this method uses a hardwired dependency to storageApi which gets imported as a ",(0,i.jsx)(n.em,{children:"module"}),". Even more, everything the constructor of Storage requires has to be handled from inside the storeData()-method. For testing this code, the developer has to create a *Mock *not only for Storage, but also needs to stub the call to import. The ",(0,i.jsx)(n.em,{children:"DataRepository"})," directly accesses the low-level API from within its boundaries, which results in strong coupling between two different layers. This should not happen in the given storeData()-method, although the *DataRepository *obviously has to know that there must be some kind of infrastructure-layer."]}),"\n",(0,i.jsx)(o.$z,{figure:2,title:"The \u201cDataRepository\u201d directly accessing \u201cStorage\u201d creates strong coupling between two concretes that should be unaware of each other.",url:"https://cdn-images-1.medium.com/max/2000/1*_WhWG5I4xXz4VNE1qGT4YA.png"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.em,{children:["The Dependency Inversion Principle requires high-level modules to not import anything from low-level modules. This is one of the ",(0,i.jsx)(a.lA,{name:"SOLID",file:"sd.solid"})," design principles."]})," ",(0,i.jsx)(a.R5,{name:"ASD"})]}),"\n"]}),"\n",(0,i.jsx)(o.$z,{figure:3,title:"The \u201cDataRepository\u201d is configured with the \u201cStorage\u201d-instance. Now, the repository can focus on using the Storage\u2019s public API and doesn\u2019t have to take care of importing and configuring it. In tests, the API of the \u201cStorage\u201d-instance can easily be mocked.",url:"https://cdn-images-1.medium.com/max/2000/1*DtDuuhsU0sCrZpiDas0fYg.png"}),"\n",(0,i.jsxs)(n.p,{children:["This article introduces an ",(0,i.jsx)(n.a,{href:"https://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer",children:"Inversion of Control"})," (",(0,i.jsx)(n.em,{children:"IoC"}),")-Container that decides *during runtime *if code has additional dependencies defined, and if any existing dependency should be resolved by the IoC-Container. This is realised through *bindings *configured by a client and passed to the the IoC-Container: These provide information for the *concrete *that has to be instantiated for a *type, *i.e. an *Interface, ",(0,i.jsxs)(n.em,{children:["or any ",(0,i.jsx)(n.em,{children:"(Abstract) Class"}),","]})," *required by an arbitrary host."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Bindings"})," can be used and adjusted application-wide, but it\u2019s good practice to provide them during bootstrapping. This makes it easy to run programs with different implementations for selected clients, contexts or environments, and this all works without having to change a single line of low/high-level code at all."]}),"\n",(0,i.jsx)(o.$z,{figure:4,title:"Our Proxy wraps the constructors of selected target classes and injects dependencies with arguments as needed.",url:"https://cdn-images-1.medium.com/max/2000/1*-a6VVDQmBS0RqfQcg5RI_g.png"}),"\n",(0,i.jsxs)(n.p,{children:["*Proxies *help with the implementation of resolving objects and dependencies, and this approach is not exclusive to JavaScript: For example, ",(0,i.jsx)(n.a,{href:"https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/Proxy.html",children:"Java"})," has Proxies, ",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html",children:"Spring"})," uses them for its IoC and ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Aspect-oriented_programming",children:"AOP"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need to catch up with the concept of Proxies and how they work in JavaScript, I recommend you read through ",(0,i.jsx)(n.a,{href:"/docs/articles/a-fluent-interface-for-javascript-promises/",children:"this elaborate article"})," that provides details on how to use Proxies with ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"*Promises"}),"* to create ",(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/FluentInterface.html",children:"Fluent Interfaces"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For the following examples, I will constantly refer to the IoC-Container implementation of ",(0,i.jsx)(n.a,{href:"https://github.com/coon-js/extjs-lib-core/tree/main/src/ioc",children:"coon.core.ioc"}),": This is an implementation specific for the Sencha Ext JS framework, but it\u2019s concepts can easily be carried over to other frameworks or framework-agnostic code."]}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsxs)(n.p,{children:["Target classes need to provide information if they are ",(0,i.jsx)(n.em,{children:"injectable"}),", i.e. if they should be considered by the ",(0,i.jsx)(n.em,{children:"IoC-Container"})," during instantiation. This is needed because we want to auto-wire dependencies to keep our program as flexible as possible: The IoC-Container gets configured with bindings during the startup sequence, then takes care of publishing the configured types with their concrete implementations during the runtime of the application."]}),"\n",(0,i.jsx)(o.$z,{figure:5,title:"The IoC-Container will take care of dynamically resolving dependencies for a concrete instance that is required by the client.",url:"https://cdn-images-1.medium.com/max/2072/1*Fp-tQqL8FkovoZCInq0jCw.png"}),"\n",(0,i.jsxs)(n.p,{children:["Most programming languages and their platforms already provide the tools for handling additional information written with source code: *Metadata *is often created with the help of ",(0,i.jsx)(n.a,{href:"https://jcp.org/en/jsr/proposalDetails?id=175",children:"annotations in Java"}),", or ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/language.attributes.overview.php",children:"Attributes in PHP8"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"metadata-static-builds-vs-runtime-configuration",children:"Metadata: Static builds vs. runtime configuration"}),"\n",(0,i.jsx)(n.p,{children:"With the almost incomprehensible amount of tooling options for JavaScript, using annotations would probably cost little effort; however, it would most certainly mean that the build stack of our project changes: An additional tool that has the implementation for parsing our source code also extracts and translates metadata and makes sure that the resulting build does not break during runtime."}),"\n",(0,i.jsx)(n.p,{children:"An annotation in the form of"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"    /**\n     * @injectable store:Storage\n     */\n    class Repository {\n       // ...\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"would be useful, and additional annotations can be defined in some sort of dictionary."}),"\n",(0,i.jsx)(n.p,{children:"The parser could then build configuration files out of the metadata found in the sources, connect them with the names of the target classes (and the paths to the imports), along with the properties (i.e. names of the instance variables of the target classes) which expect a particular type, and then plug it all together by applying the bindings configured by the developers and stored in the IoC-Container."}),"\n",(0,i.jsx)(o.$z,{figure:6,title:"Using annotations with JavaScript code would require a separate build step in the ci/cd pipeline.",url:"https://cdn-images-1.medium.com/max/2000/1*6vbAE-JdDqXnQ-4swvadLw.png"}),"\n",(0,i.jsx)(n.p,{children:"We strive for an implementation that does not need such additional tooling: We will provide the **metadata **as **static class members on top of the injectable classes."}),"\n",(0,i.jsxs)(n.p,{children:["The following source code demonstrates the use of the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static?retiredLocale=de",children:"static-property"}),": A property named required is the root for the *meta information *looked up by the IoC-Container and its ",(0,i.jsx)(n.em,{children:"Dependency Resolver"}),": It holds all the names of the instance variables that expect specifics of a given type: In the example, an instance of Repository only works with a store-member that holds a reference to an instance of Storage."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    class Repository {\n        static required = {\n            store: "Storage"\n        }\n\n       //...\n    }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["With the help of the ",(0,i.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy",children:[(0,i.jsx)(n.strong,{children:"Proxy"}),"-Api"]}),", we can then ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct",children:"add a trap for the calls to the constructor"})," of the ",(0,i.jsx)(n.em,{children:"injectable"})," classes, in this case the Repository-class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    class Repository {\n       static required = {\n           store: "Storage"\n       };\n\n       constructor({store}) {\n           this.store = store;\n       }\n\n       //...\n    }\n\n\n    const constructorHandler = {\n\n        construct (target, argumentsList, newTarget) {\n            if (target.required) {\n                // container holds a reference to the ioc-container\n                container.inject(argumentsList, target.require);\n            }\n\n            return new target(...argumentsList);\n        }\n\n    };\n\n\n    Repository = new Proxy(Repository, constructorHandler)\n'})}),"\n",(0,i.jsx)(n.p,{children:"The handler will delegate to the IoC-Container before the instance of the target class is created: The IoC-Container then inspects the argument-list and looks for any missing properties in a previously contracted argument-object that\u2019s used to configure the instance. Denoted by the required-property, the instance variable\u2019s name must be the same as the configuration object containing the property needed by the constructor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    // IoC-container will not inject anything, since the instance gets configured\n    // with a "store"-property\n    new Repository({store: new Storage(), uri: "/resourceUri"});\n\n\n    // since the "store"-property is missing, the IoC-container will\n    // inject a concrete of "Storage" according to the available bindings\n    new Repository({uri: "/resourceUri"});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-the-bindings",children:"Creating the Bindings"}),"\n",(0,i.jsxs)(n.p,{children:["Bindings are the Point of Truth for our application since we rely on builders and resolvers that are configured upfront and take care of assembling associations during runtime. ",(0,i.jsx)(n.em,{children:"Bindings"})," map concrete ",(0,i.jsx)(n.em,{children:"Sub Types"})," to *Types, *means: They \u201cbind\u201d a ",(0,i.jsx)(n.em,{children:"typed"})," variable to the specific implementation of the ",(0,i.jsx)(n.em,{children:"Type"}),", so our IoC-Container knows ",(0,i.jsx)(n.em,{children:"what"})," to apply and ",(0,i.jsx)(n.em,{children:"where"})," to apply it (the *when *is implied by the usage of a ",(0,i.jsx)(n.em,{children:"Constructor Injector"}),"). The requested ",(0,i.jsx)(n.em,{children:"specific"})," implements an interface or extends an (abstract) class and the ",(0,i.jsx)(a.lA,{name:"LSP",file:"sd.liskovsubstitutionprinciple"})," gives us the freedom to provide arbitrary implementations of this given ",(0,i.jsx)(n.em,{children:"Type"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Since we are loosely typed, our ",(0,i.jsx)(n.em,{children:"Dependency Resolver"})," (think of it as sort of a *Builder, *) must and will make sure that our specifics are indeed instances of the required type."]}),"\n",(0,i.jsx)(n.h3,{id:"finding-a-common-language",children:"Finding a common language"}),"\n",(0,i.jsx)(n.p,{children:"We will introduce a model language that will help us with formulating the bindings needed throughout our program."}),"\n",(0,i.jsxs)(n.p,{children:["We have a class ",(0,i.jsx)(n.strong,{children:"A"})," that uses an instance of a class ",(0,i.jsx)(n.strong,{children:"B"}),":"]}),"\n",(0,i.jsx)(o.$z,{figure:7,title:"A needs B.",url:"https://cdn-images-1.medium.com/max/2000/1*g1Xsof_xlXjjIEcZ5q1WZQ.png"}),"\n",(0,i.jsx)(n.p,{children:"The code for"}),"\n",(0,i.jsxs)(n.p,{children:["\u201c",(0,i.jsx)(n.strong,{children:"A"})," has a dependency to Type ",(0,i.jsx)(n.strong,{children:"B"}),", and this dependency is reflected in ",(0,i.jsx)(n.strong,{children:"A"}),"\u2019s instance variable ",(0,i.jsx)(n.strong,{children:"b"}),"\u201d"]}),"\n",(0,i.jsx)(n.p,{children:"could look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    // Pseudo code\n\n    abstract class B {\n        abstract calculate();\n    }\n\n\n    class A {\n\n        constructor (B b)\n        {\n          this.b = b;\n        }\n\n\n        calculation()\n        {\n            this.b.calculate();\n        }\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Obviously, sources that rely on ",(0,i.jsx)(n.strong,{children:"A"})," will not work without an ",(0,i.jsx)(n.strong,{children:"[instanceof A].b"})," \u2014 as soon as calculation() delegates to b.calculate()and ",(0,i.jsx)(n.strong,{children:"b"})," is undefined, an exception will be thrown."]}),"\n",(0,i.jsx)(n.p,{children:"We are looking for a formal (yet simple) definition that can be used with JavaScript to configure these dependencies: We\u2019ll agree on JSON as the format, since it allows for key/value-pairs whereas the keys are of type string and their values can be any of string, integer, boolean, NULL, object and array \u2014 we\u2019ll make use of string and object."}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s refine the task for resolving the dependencies of ",(0,i.jsx)(n.strong,{children:"A"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    **when** A\n      **requires** B\n      **give** *new instance* of B\n"})}),"\n",(0,i.jsxs)(n.p,{children:["That\u2019s a rather simple term which will be translated later into an assignment by the ",(0,i.jsx)(n.em,{children:"Dependency Resolver"}),". For now, this is how it\u2019s transposed to JSON (don\u2019t mind the explanatory comments):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'     {\n        /* when */\n        "A": {\n          /* "needs": "give" */\n          "B" : "InstanceOfB"\n        }\n    }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"use-case-injecting-authentication-methods",children:"Use Case: Injecting Authentication Methods"}),"\n",(0,i.jsx)(n.p,{children:"With coon.core.ioc as part of a coon.js-application, here\u2019s a typical call to coon.core.ioc.Container.bind():"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    // Some class names have been shortened in favor of\n    // readability.\n    coon.core.ioc.Container.bind({\n            "conjoon.dev.cn_mailsim": {\n                "conjoon.SimletAdapter": "conjoon.BasicAuthSimletAdapter"\n            },\n            "conjoon.cn_mail": {\n                "coon.core.data.request.Configurator": {\n                    "$ref": "#/$defs/RequestConfiguratorSingleton"\n                }\n            },\n            "$defs": {\n                "RequestConfiguratorSingleton": {\n                    "xclass": "conjoon.cn_imapuser.data.request.Configurator",\n                    "singleton": true\n                }\n            }\n\n    });\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This configuration represents bindings of the ",(0,i.jsx)(n.a,{href:"https://github.com/conjoon/extjs-app-imapuser",children:"extjs-app-imapuser"}),"-package, an npm package providing user authentication for ",(0,i.jsx)(n.a,{href:"https://www.conjoon.org/",children:"conjoon\u2019s"})," ",(0,i.jsx)(n.a,{href:"https://github.com/conjoon/extjs-app-webmail",children:"extjs-app-webmail"}),", which is an email client written in JavaScript."]}),"\n",(0,i.jsx)(o.$z,{title:"The Login-Screen for the JavaScript webmail client used in conjoon, depending on the authentication module configured with this instance.",url:"https://cdn-images-1.medium.com/max/2634/1*OQUlvC7__3fRJwEaY90G7w.png"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"extjs-app-webmail"})," communicates with a backend that is agnostic of the authentication being used \u2014 its architecture allows for guarding the endpoints with arbitrary authentication methods: It could be ",(0,i.jsx)(n.em,{children:"Basic"})," access authentication, or the API could use a guard that relies on token based authentication. That is why the requesting client \u2014 in this case ",(0,i.jsx)(n.strong,{children:"extjs-app-webmail"})," \u2014 needs to be configured with the proper security technique the backend understands. This is done by using ",(0,i.jsx)(n.em,{children:"Request Configurators"})," that hook into (some/all/none at all) outgoing requests and add the authentication information if required by the backend, e.g. a Authorization-header field, holding Bearer- ,Basic- or other information."]}),"\n",(0,i.jsx)(n.h3,{id:"bindings-explained",children:"Bindings explained"}),"\n",(0,i.jsxs)(n.p,{children:["Let\u2019s have a detailed look at the given binding configuration. First of, the bindings configured here are introduced with namespaces instead of class names. This is just another way of defining bindings for a ",(0,i.jsx)(n.strong,{children:"set"})," of classes owned by a namespace (i.e. a whole ",(0,i.jsx)(n.em,{children:"module"}),"): Instead of individually defining dependencies for"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"conjoon.dev.cn_mailsim.A, conjoon.dev.cn_mailsim.B, conjoon.dev.cn_mailsim.C, \u2026\n"})}),"\n",(0,i.jsxs)(n.p,{children:["we fall back to their common namespace, so the ",(0,i.jsx)(n.em,{children:"Dependency Resolver"})," can look up bindings configured for this module when a target class is not explicitly specified in the configuration. Target classes are always given precedence, then namespaces are queried."]}),"\n",(0,i.jsxs)(n.p,{children:["The same goes for the following section, albeit the value of the ",(0,i.jsx)(n.em,{children:"give"}),"- implication is not the name of a class: It\u2019s a configuration that ",(0,i.jsx)(n.em,{children:"references"})," another ",(0,i.jsx)(n.em,{children:"section"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'      "conjoon.cn_mail": {\n          "coon.core.data.request.Configurator": {\n             "$ref": "#/$defs/RequestConfiguratorSingleton"\n         }\n      }\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Based on the ",(0,i.jsx)(n.a,{href:"https://json-schema.org/draft/2020-12/json-schema-core.html#name-schema-references",children:"JSON-schema specification"}),", $ref uses an ",(0,i.jsx)(n.em,{children:"URI"})," to reference another section of the document it\u2019s embedded in, which allows for defining a reusable, complex configuration at one place, then re-use this configuration throughout the document by referencing it."]}),"\n",(0,i.jsx)(n.p,{children:"The (resolved)$ref in the above example states that"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    when any class of conjoon.cn_mail\n      requires coon.core.data.request.Configurator\n      give Singleton of conjoon.cn_imapuser.data.request.Configurator\n"})}),"\n",(0,i.jsx)(n.p,{children:"Singletons are great when stateless objects are needed, and reduce the memory footprint in a target application."}),"\n",(0,i.jsx)(n.h2,{id:"resolving-dependencies--trapping-the-factories",children:"Resolving dependencies \u2014 trapping the Factories"}),"\n",(0,i.jsxs)(n.p,{children:["The class-system of Sencha Ext JS makes \u2014 almost exclusively \u2014 use of Factories when instances are created. This is useful for dynamically loading classes: Its ",(0,i.jsx)(n.em,{children:"microloader"})," will take care of mapping class-names to the existing directory-structure of a project, but loading happens synchronously (in the worst case, if a class was not pre-loaded). Using Sencha Ext JS without it\u2019s own class system is almost impossible. In some cases, this is an unpleasant surprise for users starting with Ext JS in 2022."]}),"\n",(0,i.jsx)(o.$z,{figure:8,title:"Sencha Ext JS Factory methods take care of resolving dependencies and instantiating objects.",url:"https://cdn-images-1.medium.com/max/2212/1*3b_FAuDIUOwN6Q97LzIWBw.png"}),"\n",(0,i.jsx)(n.p,{children:"However, the use of factories and factory methods throughout the framework makes it really easy to apply Proxies to them and plays into our hands with our constructor injection approach. Carefully selecting constructors of injectable target classes becomes obsolete and we can rely on the interiors of the framework when we have to decide if dependencies need to be injected."}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"Wrapper"}),"-Proxy is installed as soon as coon.core.ioc.Container.bind() is called:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'     installProxies () {\n            const me = this;\n\n            Ext.Factory = new Proxy(\n                Ext.Factory,\n                Ext.create("coon.core.ioc.sencha.resolver.FactoryHandler")\n            );\n\n            Ext.create = new Proxy(\n                Ext.create,\n                Ext.create("coon.core.ioc.sencha.resolver.CreateHandler")\n            );\n        },\n'})}),"\n",(0,i.jsx)(n.p,{children:"There are two Proxy-Handlers that serve two different purposes. Let\u2019s have a look at them:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Handler for Ext.create"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"CreateHandler"})," is a method that traps calls to Ext.create. It checks if the argument passed to Ext.create() is"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["a ",(0,i.jsx)(n.em,{children:"String"}),": If that is the case, it\u2019s assumed to be the name of the class an instance should be created for"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["an ",(0,i.jsx)(n.em,{children:"Object"}),": This generally indicates that the client submits a configuration, holding an xtype or xclass providing further details on the class that serves as the template. All the properties the object contains are usually passed to the constructor of the target class, except for xtype/ xclass"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'{\n"xtype": "alias-of-class",\n// or "xclass": "fqn.of.class"\n"cArg1": "foo",\n"cArg2": "bar"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As **Figure 9 **shows, once the target class was successfully resolved given the internals of Ext JS, the handler fires the classresolved-event, along with information about the class name and the JavaScript ",(0,i.jsx)(n.em,{children:"prototype"})," of the resolved class."]}),"\n",(0,i.jsx)(o.$z,{figure:9,title:"The Handler installed for Ext.create fires an event as soon as a class was successfully resolved.",url:"https://cdn-images-1.medium.com/max/2460/1*xXGjuVpZtsf6QmLiivrC7A.png"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Handler for Ext.Factory"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"FactoryHandler"})," implements traps for properties requested by a client (using ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get",children:"get"}),") and a trap for any method that could possibly be a ",(0,i.jsx)(n.em,{children:"factory method"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:['Factory methods are based on types that get published with class definitions. Aliases are constantly used throughout Sencha Ext JS and facilitate lazy instantiation. Those aliases are using prefixes which represent the domain they serve, for example, aliases for Ext.data.Store have the prefix "store.\u201d, Ext.app.Controller use the prefix "controller.\u201d ',(0,i.jsx)(n.a,{href:"https://docs.sencha.com/extjs/7.6.0/classic/Ext.Class.html#cfg-alias",children:"and so on"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Ext.Factory"})," wires these configurations through to the corresponding ",(0,i.jsx)(n.em,{children:"factory methods"}),", and that\u2019s where the apply-handler previously installed by the get-handler comes into play: It works just like the ",(0,i.jsx)(n.strong,{children:"CreateHandler"})," and differs only in subtle details when arguments to the factory methods are scrutinized. In the end, this proxy will trigger the classresolved-event for the same reason as its complement."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'    if (cls) {\n        const className = Ext.ClassManager.getName(cls);\n        me.fireEvent("classresolved", me, className, cls);\n    }\n'})}),"\n",(0,i.jsx)(n.h2,{id:"proxying-the-constructors",children:"Proxying the constructors"}),"\n",(0,i.jsxs)(n.p,{children:["It all boils down to the ",(0,i.jsx)(n.strong,{children:"ConstructorInjector"}),": Once the classresolved-event is published, the ",(0,i.jsx)(n.strong,{children:"ConstructorInjector"})," is used with an observer to decide whether it should inject dependencies into the target class\u2019 constructor (the information about the target class is exposed with the ",(0,i.jsx)(n.em,{children:"event details"}),"). It checks whether the class is *injectable *and if that\u2019s the case, it will apply a trap for the target class\u2019 constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["Think of the ",(0,i.jsx)(n.em,{children:"Strategy Pattern"})," here that allows us to dynamically change implementation details. It should be noted that the ",(0,i.jsx)(n.strong,{children:"ConstructorInjector"})," is working on ",(0,i.jsx)(n.em,{children:"objects"})," passed to the ",(0,i.jsxs)(n.em,{children:["constructor ",(0,i.jsxs)(n.em,{children:["as ",(0,i.jsx)(n.em,{children:"arguments"}),", rather than a list of arguments"]}),". ",(0,i.jsxs)(n.em,{children:["So the ",(0,i.jsx)(n.strong,{children:"ConstructorInjector"})," is more of a ",(0,i.jsx)(n.em,{children:"Property Injector"}),". The name was chosen since"]})]})," ConstructorInjector** better reflects the step in the build chain the injector is woven into: The implementation for the Sencha Ext JS framework is kept simple and provides mainly (but not less than) qol-improvements for this framework."]}),"\n",(0,i.jsxs)(n.p,{children:["The trap for the constructor will probe the target class for all the dependencies required (defined as ",(0,i.jsx)(n.em,{children:"metainformation"}),"), then use the ",(0,i.jsx)(n.em,{children:"Dependency Resolver"})," to create something useful out of the binding definition that was previously registered with coon.core.io.Container.bind()."]}),"\n",(0,i.jsx)(o.$z,{figure:10,title:"When the client requests a new instance, the ConstructorInjector will make sure that dependencies required by the target instance are created and injected, if not already specified by the client.",url:"https://cdn-images-1.medium.com/max/2362/1*bKdGtQiwoy8a3W-a4cmDXQ.png"}),"\n",(0,i.jsx)(n.h2,{id:"dependency-injection-in-angular",children:"Dependency Injection in Angular"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.a,{href:"https://angular.io",children:(0,i.jsx)(n.strong,{children:"Angular"})}),", ",(0,i.jsx)(n.strong,{children:"Dependency Injection"})," is already built into the framework. Conversely to\nthe approach above where we set up the injectable classes in a global configuration file, ",(0,i.jsx)(n.strong,{children:"Angular"})," lets you decorate a\nclass as ",(0,i.jsx)(n.strong,{children:"Injectable"})," by using the ",(0,i.jsx)(n.a,{href:"https://angular.io/api/core/Injectable",children:"@Injectable()"}),"-Decorator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="Image.service.ts [Angular]"',children:"@Injectable({\n  providedIn: 'root'\n})\nclass ImageService {}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If we had such a class that provides an abstraction to an ",(0,i.jsx)(n.code,{children:"ImageService"}),", registering the service as an injectable ",(0,i.jsx)(a.lA,{name:"Singleton",file:"sd.singleton"})," in an ",(0,i.jsx)(n.code,{children:"extjsapp"})," namespaced ",(0,i.jsx)(n.strong,{children:"Ext JS"}),"-application\nwould translate to the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'"title=extjsapp.core.conf [Ext JS]"',children:'{\n     "ioc": {\n        "bindings": {\n            "extjsapp": {\n                "ImageService": {\n                    "xclass": "ImageService",\n                    "singleton": true\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Constructor-binding works out-of the box with ",(0,i.jsx)(n.strong,{children:"Angular"}),". To register the ",(0,i.jsx)(n.code,{children:"ImageService"})," with a host, simply add the ",(0,i.jsx)(n.code,{children:"ImageService"})," as an argument for the host's constructor:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="Host.component.ts [Angular]"',children:'import {ImageService} from "./Image.service";\n\nclass HostComponent {\n    constructor (private imageService: ImageService) {}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["whereas we'd have to denote the requirement in the ",(0,i.jsx)(n.code,{children:"statics.required"}),"-property to realize constructor injection:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",metastring:'title="HostComponent.js [Ext JS]"',children:'Ext.define("HostComponent", {\n    statics: {\n        required: {\n            imageService: "ImageService"\n        }\n    },\n    // ....\n})\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsxs)(n.p,{children:["The repository for coon.js and the IoC-Container implementation is located at ",(0,i.jsx)(n.a,{href:"https://github.com/coon-js/extjs-lib-core",children:"Github"}),". It\u2019s already used in the newest version of ",(0,i.jsx)(n.a,{href:"https://www.conjoon.org/blog/2022/12/17/1.0.4-release",children:"conjoon 1.0.4"})," which is an interim release that paves the way for additional authentication plugins planned for ",(0,i.jsx)(n.a,{href:"https://github.com/orgs/conjoon/projects/6",children:"1.1.0"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Significant Revisions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'30 March 2023: Add section "Dependency Injection in Angular"'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"05 March 2023: Merged article into this site"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"16 January 2023: Minor wording and content updates while working on the german translation"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"17 December 2022: Published first installment"}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},2172:(e,n,t)=>{"use strict";t.d(n,{$z:()=>p,C9:()=>d,IX:()=>g,ZX:()=>m,eJ:()=>h,uR:()=>u});var s=t(6540),i=t(4882),r=t(8069),o=t(4945),a=t.n(o),c=t(2897),l=(t(3271),t(4848));function d(e){let{width:n,children:t,title:s,figure:r,figref:o,modeAware:a}=e;return(0,l.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,l.jsxs)("div",{style:{maxWidth:n,textAlign:"center",margin:20},children:[o&&(0,l.jsx)("a",{name:`fig_${o}`}),(0,l.jsx)("div",{className:!1!==a?"umlImg":"",children:t}),(0,l.jsx)("div",{style:{textAlign:"center"},children:(0,l.jsxs)("sup",{children:[(0,l.jsx)("b",{children:i.A.isString(r)?r:`Figure ${r??o??1}`})," ",(0,l.jsx)("span",{dangerouslySetInnerHTML:{__html:s}})]})})]})})}function h(e){let{id:n,source:t,title:s}=e;return(0,l.jsx)(d,{modeAware:!1,title:s,figure:`Source ${t}`,children:(0,l.jsx)(c.A,{id:n})})}function p(e){let{url:n,figure:t,title:s}=e;return(0,l.jsx)(d,{modeAware:!1,figure:t,title:s,children:(0,l.jsx)("img",{alt:"{title}",src:n})})}function u(e){let{children:n,figure:t,title:s}=e;return(0,l.jsx)(d,{modeAware:!0,figure:t,title:s,children:n})}function m(e){let{when:n,where:t}=e;const[s,i]=t;return(0,l.jsxs)("div",{children:["This article was originally published in ",n," at ",(0,l.jsx)("a",{target:"_blank",href:i,children:s}),". Some formatting might have get lost during the migration to this site: If you think you spotted an issue caused by malformed formatting, feel free to open a ",(0,l.jsx)("a",{href:"https://github.com/ThorstenSuckow/thorsten.suckow-homberg.de",children:"Pull Request"})," or ",(0,l.jsx)("a",{href:"mailto:thorsten@suckow-homberg.de",children:"send me an Email"}),"."]})}function g(e){let{url:n}=e;const[t,i]=s.useState("");return a()(n).then((e=>{e.text().then((e=>i(e)))})),(0,l.jsx)(r.A,{language:"php",children:t})}},3271:(e,n,t)=>{"use strict";t.d(n,{R5:()=>i,I8:()=>i,Dn:()=>r,lA:()=>o,E4:()=>i,$1:()=>o});t(6540);var s=t(4848);function i(e){let{name:n,pp:t,add:i}=e;const r=`#bibref-${n.toLowerCase()}`;return(0,s.jsxs)("a",{href:r,children:["[",(0,s.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",n]}),i?`, ${i} `:"",t?`, ${t.includes("-")?"pp":"p"}. ${t}`:"","]"]})}function r(e){let{idx:n}=e;return(0,s.jsx)("a",{href:`#fig_${n}`,children:(0,s.jsxs)("span",{className:"bibRef",children:["Figure ",n]})})}function o(e){let{name:n,file:t,url:i}=e;t=t||(i||""),Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((e=>{let[n,s]=e;if(t.startsWith(`${n}.`))return t=t.replace(`${n}.`,`${s}.`),!0}));const r=`/docs/wiki/${t}`;return(0,s.jsx)("a",{href:r,className:"glosRef",children:n})}},8453:(e,n,t)=>{"use strict";t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);