"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[6406],{1564:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"wiki/computerscience.aliasing","title":"Aliasing","description":"Aliasing in Object-Oriented Programming is a synonym for two (or more) variables referencing the same instance.","source":"@site/docs/wiki/computerscience.aliasing.mdx","sourceDirName":"wiki","slug":"/wiki/computerscience.aliasing","permalink":"/docs/wiki/computerscience.aliasing","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/wiki/computerscience.aliasing.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1752785748000,"frontMatter":{"title":"Aliasing"},"sidebar":"wiki","previous":{"title":"Aggregation","permalink":"/docs/wiki/uml.aggregation"},"next":{"title":"Anemic Domain Model","permalink":"/docs/wiki/ddd.anemicdomainmodel"}}');var i=s(4848),r=s(8453),a=s(3271);s(5142);const l={title:"Aliasing"},c="Aliasing (Computer Science)",o={},d=[{value:"Aliasing Bug",id:"aliasing-bug",level:2},{value:"Example",id:"example",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"aliasing-computer-science",children:"Aliasing (Computer Science)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Aliasing"})," in Object-Oriented Programming is a synonym for two (or more) variables referencing the same instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="$ref and $alias referencing the same instance"',children:"$ref = new \\stdClass();\n$alias = $ref;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"aliasing-bug",children:"Aliasing Bug"}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"Aliasing Bug"})," denotes an issue when two (or more) objects reference an object, and the intentional change of the\nstate of this instance causes unexpected behavior with one of the objects referencing this instance."]}),"\n",(0,i.jsxs)(n.p,{children:["This often happens with ",(0,i.jsx)(n.strong,{children:"mutable"}),"  ",(0,i.jsx)(a.lA,{name:"Value Objects",file:"sd.valueobject"}),", where instances are shared across a number of objects, each having (indirect) access to the fields of the ",(0,i.jsx)(n.strong,{children:"Value Object"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:'"A class of subtle programming errors that can arise in code that does dynamic allocation, esp. via malloc(3) or equivalent. If several pointers address (are aliases for) a given hunk of storage, it may happen that the storage is freed or reallocated (and thus moved) through one alias and then referenced through another, which may lead to subtle (and possibly intermittent) lossage depending on the state and the allocation history of the malloc arena."'})," ",(0,i.jsx)(n.a,{href:"http://www.catb.org/jargon/html/A/aliasing-bug.html",children:"http://www.catb.org/jargon/html/A/aliasing-bug.html"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="privateAddress gets changed unintentionally"',children:'class Employee\n{\n    public Address privateAddress;\n    public Address shippingAddress;\n}\n\nclass Address\n{\n    public String street;\n    public String city;\n\n    public Address(String street, String city)\n    {\n        this.street = street;\n        this.city = city;\n    }\n\n    public String toString()\n    {\n        return this.street + " in " + this.city;\n    }\n}\n\npublic static void main(String []args)\n{\n\n    Employee employee = new Employee();\n\n    Address address = new Address("East 74th Street", "New York");\n\n    // privateAddress and shippingAddress are aliasing "address"\n    employee.privateAddress = address;\n    employee.shippingAddress = address;\n\n    // the street of the shippingAddress is changed to "36 Fuller Place"\n    employee.shippingAddress.street = "36 Fuller Place";\n\n    System.out.println(employee.shippingAddress);\n    // since privateAddress is an alias for address, which was just changed (through accessing it with the alias\n    // shippingAddress), privateAddress is now also updated.\n    System.out.println(employee.privateAddress);\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Aliasing Bugs"})," can be prevented by using ",(0,i.jsx)(n.strong,{children:"immutable"})," ",(0,i.jsx)(a.lA,{name:"Value Objects",file:"sd.valueobject"}),", where changing the state of such an object results in a new object replacing the previous one."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="Address is immutable "',children:'\nclass Address\n{\n    public String street;\n    public String city;\n\n    public Address(String street, String city)\n    {\n        this.street = street;\n        this.city = city;\n    }\n\n    public Address setStreet(String street)\n    {\n        return new Address(street, this.city);\n    }\n\n    public String toString()\n    {\n        return this.street + " in " + this.city;\n    }\n}\n\n public static void main(String []args){\n\n    Employee employee = new Employee();\n\n    Address address = new Address("East 74th Street", "New York");\n\n    employee.privateAddress = address;\n    employee.shippingAddress = address;\n\n    // changing the address does not change the state of "address", instead it\n    // returns a new object with the updated state\n    employee.shippingAddress = address.setStreet("36 Fuller Place");\n\n    System.out.println(employee.shippingAddress);\n    System.out.println(employee.privateAddress);\n }\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/AliasingBug.html",children:"Martin Fowler, Aliasing Bug"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3271:(e,n,s)=>{s.d(n,{R5:()=>i,I8:()=>i,Dn:()=>r,lA:()=>a,E4:()=>i,$1:()=>a});s(6540);var t=s(4848);function i(e){let{name:n,pp:s,add:i}=e;const r=`#bibref-${n.toLowerCase()}`;return(0,t.jsxs)("a",{href:r,children:["[",(0,t.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",n]}),i?`, ${i} `:"",s?`, ${s.includes("-")?"pp":"p"}. ${s}`:"","]"]})}function r(e){let{idx:n}=e;return(0,t.jsx)("a",{href:`#fig_${n}`,children:(0,t.jsxs)("span",{className:"bibRef",children:["Figure ",n]})})}function a(e){let{name:n,file:s,url:i}=e;s=s||(i||""),Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((e=>{let[n,t]=e;if(s.startsWith(`${n}.`))return s=s.replace(`${n}.`,`${t}.`),!0}));const r=`/docs/wiki/${s}`;return(0,t.jsx)("a",{href:r,className:"glosRef",children:n})}},5142:(e,n,s)=>{s.d(n,{o:()=>i});s(6540);var t=s(4848);function i(){return(0,t.jsx)("div",{style:{width:"100%",textAlign:"right"},children:(0,t.jsx)("a",{style:{textDecoration:"underline"},onClick:()=>history.go(-1),href:"#",children:"Back"})})}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);