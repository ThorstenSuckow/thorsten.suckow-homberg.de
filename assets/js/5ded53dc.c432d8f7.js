(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[2748],{477:()=>{},2172:(e,t,s)=>{"use strict";s.d(t,{$z:()=>u,C9:()=>d,IX:()=>f,ZX:()=>m,eJ:()=>h,uR:()=>p});var i=s(6540),n=s(4882),o=s(8069),r=s(4945),a=s.n(r),l=s(2897),c=(s(3271),s(4848));function d(e){let{width:t,children:s,title:i,figure:o,figref:r,modeAware:a}=e;return(0,c.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,c.jsxs)("div",{style:{maxWidth:t,textAlign:"center",margin:20},children:[r&&(0,c.jsx)("a",{name:`fig_${r}`}),(0,c.jsx)("div",{className:!1!==a?"umlImg":"",children:s}),(0,c.jsx)("div",{style:{textAlign:"center"},children:(0,c.jsxs)("sup",{children:[(0,c.jsx)("b",{children:n.A.isString(o)?o:`Figure ${o??r??1}`})," ",(0,c.jsx)("span",{dangerouslySetInnerHTML:{__html:i}})]})})]})})}function h(e){let{id:t,source:s,title:i}=e;return(0,c.jsx)(d,{modeAware:!1,title:i,figure:`Source ${s}`,children:(0,c.jsx)(l.A,{id:t})})}function u(e){let{url:t,figure:s,title:i}=e;return(0,c.jsx)(d,{modeAware:!1,figure:s,title:i,children:(0,c.jsx)("img",{alt:"{title}",src:t})})}function p(e){let{children:t,figure:s,title:i}=e;return(0,c.jsx)(d,{modeAware:!0,figure:s,title:i,children:t})}function m(e){let{when:t,where:s}=e;const[i,n]=s;return(0,c.jsxs)("div",{children:["This article was originally published in ",t," at ",(0,c.jsx)("a",{target:"_blank",href:n,children:i}),". Some formatting might have get lost during the migration to this site: If you think you spotted an issue caused by malformed formatting, feel free to open a ",(0,c.jsx)("a",{href:"https://github.com/ThorstenSuckow/thorsten.suckow-homberg.de",children:"Pull Request"})," or ",(0,c.jsx)("a",{href:"mailto:thorsten@suckow-homberg.de",children:"send me an Email"}),"."]})}function f(e){let{url:t}=e;const[s,n]=i.useState("");return a()(t).then((e=>{e.text().then((e=>n(e)))})),(0,c.jsx)(o.A,{language:"php",children:s})}},3271:(e,t,s)=>{"use strict";s.d(t,{R5:()=>n,I8:()=>n,Dn:()=>o,lA:()=>r,E4:()=>n,$1:()=>r});s(6540);var i=s(4848);function n(e){let{name:t,pp:s,add:n}=e;const o=`#bibref-${t.toLowerCase()}`;return(0,i.jsxs)("a",{href:o,children:["[",(0,i.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",t]}),n?`, ${n} `:"",s?`, ${s.includes("-")?"pp":"p"}. ${s}`:"","]"]})}function o(e){let{idx:t}=e;return(0,i.jsx)("a",{href:`#fig_${t}`,children:(0,i.jsxs)("span",{className:"bibRef",children:["Figure ",t]})})}function r(e){let{name:t,file:s,url:n}=e;s=s||(n||""),Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((e=>{let[t,i]=e;if(s.startsWith(`${t}.`))return s=s.replace(`${t}.`,`${i}.`),!0}));const o=`/docs/wiki/${s}`;return(0,i.jsx)("a",{href:o,className:"glosRef",children:t})}},8453:(e,t,s)=>{"use strict";s.d(t,{R:()=>r,x:()=>a});var i=s(6540);const n={},o=i.createContext(n);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},8621:(e,t,s)=>{"use strict";s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"articles/downloadable-assets-with-github-actions/index","title":"Downloadable Assets with GitHub Actions","description":"Pack and publish your releases with GitHub Actions","source":"@site/docs/articles/downloadable-assets-with-github-actions/index.mdx","sourceDirName":"articles/downloadable-assets-with-github-actions","slug":"/articles/downloadable-assets-with-github-actions/","permalink":"/docs/articles/downloadable-assets-with-github-actions/","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/articles/downloadable-assets-with-github-actions/index.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1748086498000,"frontMatter":{"title":"Downloadable Assets with GitHub Actions","description":"Pack and publish your releases with GitHub Actions"},"sidebar":"docs","previous":{"title":"Using PHP enums as method calls","permalink":"/docs/articles/using-php-enums-as-method-calls/"},"next":{"title":"Creating Ext JS Applications with coon.js","permalink":"/docs/articles/creating-extjs-applications-with-coon-js/"}}');var n=s(4848),o=s(8453),r=s(2172);const a={title:"Downloadable Assets with GitHub Actions",description:"Pack and publish your releases with GitHub Actions"},l=void 0,c={},d=[{value:"Motivation",id:"motivation",level:2},{value:"Basic Build",id:"basic-build",level:2},{value:"Intermission: Providing Repository Secrets",id:"intermission-providing-repository-secrets",level:2},{value:"Onboarding the Build Software",id:"onboarding-the-build-software",level:2},{value:"Preparing the build",id:"preparing-the-build",level:3},{value:"Adding the build as an asset to the Release",id:"adding-the-build-as-an-asset-to-the-release",level:3},{value:"The Final Build Script",id:"the-final-build-script",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(r.ZX,{when:"May 2022",where:["medium.com","https://medium.com/@thorstensuckow/downloadable-assets-with-github-actions-e39b76371337"]})}),"\n",(0,n.jsxs)(t.p,{children:["GitHub Actions is (",(0,n.jsx)(t.em,{children:"sic!"}),") a great tool to automate the build process of your software projects. Providing a configurable and extensible CI/CD-platform, developers can test, build and deploy their projects by writing a few lines of YAML."]}),"\n",(0,n.jsx)(t.p,{children:"This article demonstrates how to add downloadable assets to a release when using GitHub Actions with a Sencha Ext JS project. The implementation of the actions is \u2014 of course \u2014 applicable with any other project."}),"\n",(0,n.jsx)(t.p,{children:"The article assumes you are already familiar with the concept of CI/CD and that you have used GitHub Actions (or any other build tool) before. If not, the two following resources should get you started:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://martinfowler.com/delivery.html",children:"Software Delivery Guide (martinfowler.com)"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.github.com/en/actions",children:"GitHub Actions Documentation"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,n.jsx)(t.p,{children:"A regular build pipeline for creating a release with GitHub Actions looks like this:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/4096/1*lQpJIwGP9fC_ojUzLQgAJQ.jpeg",alt:""})}),"\n",(0,n.jsx)(t.p,{children:"This is a very optimistic approach to a build pipeline as this assumes that each step succeeds. We will also not go into detail of each build step since various sub-tasks might be involved. However, when working with Sencha Ext JS projects (or any other project available via NPM), we can unfold the build pipeline a little bit more:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/4096/1*aSnJkpYzfInBGwTFvogWEg.jpeg",alt:""})}),"\n",(0,n.jsx)(t.p,{children:"Of interest for us is the part where the downloads are created. actions/create-release@1 usually provides a tar- and a zip-file of the project-files as found in the repository, representing a git-tagged snapshot of the project."}),"\n",(0,n.jsx)(t.p,{children:"However, we want to also include a build of the NPM project itself. If we only provide the downloads as created by actions/create-release@1, the user would still have to build the project on his own. Our ideal and final build pipeline would look like this:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/4096/1*1vx-hEy4z-KWugaTBKG9mQ.jpeg",alt:""})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/2000/1*_2Ty-TpS8Dj1HIiKiyi7rg.png",alt:"Our goal is to automate the deployment of our project hosted at GitHub \u2014 including the repository contents as well as a zipped build available for downloading."})}),"\n",(0,n.jsx)(t.h2,{id:"basic-build",children:"Basic Build"}),"\n",(0,n.jsx)(t.p,{children:"The basic script for creating a release with GitHub Actions looks like this:"}),"\n",(0,n.jsx)(r.eJ,{id:"1e1e3e59ee8ac6d3ee8aef317d21b3f8",source:1}),"\n",(0,n.jsxs)(t.p,{children:["This script is invoked whenever we git push origin v1.2.3 to our repository (\u201cv1.2.3\u201d as a mere example for a version tag given the ",(0,n.jsx)(t.a,{href:"https://semver.org/",children:"semver-syntax"}),"). workflow_dispatch allows us to run the script manually."]}),"\n",(0,n.jsxs)(t.p,{children:["We then define the build-job, consisting of two steps: ",(0,n.jsx)(t.strong,{children:"checkout"})," and ",(0,n.jsx)(t.strong,{children:"create release"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Two pre-defined actions are used here: ",(0,n.jsx)(t.a,{href:"https://github.com/actions/checkout",children:"actions/checkout@v2"})," and ",(0,n.jsx)(t.a,{href:"https://github.com/actions/create-release",children:"actions/create-release@v1"}),". They should be self explanatory: The first one simply checks out the code of our repository, the second one creates the ",(0,n.jsx)(t.em,{children:"tar"})," and ",(0,n.jsx)(t.em,{children:"zip"})," for this checkout and adds them as downloads to the ",(0,n.jsx)(t.strong,{children:"Releases"}),"-page of the GitHub repository we\u2019re working with."]}),"\n",(0,n.jsxs)(t.p,{children:["*Note: At this point, the **checkout **action is not really necessary, since the **create-release *",(0,n.jsx)(t.em,{children:"action does not depend on it and will work just fine without it. We\u2019ll get back to it shortly."})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/3030/1*MlCXqk5owtwU6eDjJaccjg.png",alt:"Releases are ordered by their most recent date. A Release\u2019s downloadable assets can be found here, by default providing a tar and a zip of the checked out repository-contents."})}),"\n",(0,n.jsxs)(t.p,{children:["We\u2019re missing a few more steps \u2014 the ",(0,n.jsx)(t.strong,{children:"build"})," and the ",(0,n.jsx)(t.strong,{children:"upload"})," of a deployable build so we can access it as a downloadable asset. Let\u2019s add these steps now."]}),"\n",(0,n.jsx)(t.h2,{id:"intermission-providing-repository-secrets",children:"Intermission: Providing Repository Secrets"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"The following explains how to provide a repository secret with GitHub for authentication with the Sencha NPM repository. Although the Sencha NPM is used here, the concept is the same for any other private NPM repository where authentication is required during the build process."})}),"\n",(0,n.jsxs)(t.p,{children:["Some NPM repositories are private and require a registered user when npm i one of its packages. This is usally done by using the cli command ",(0,n.jsx)(t.a,{href:"https://docs.npmjs.com/cli/v8/commands/npm-adduser",children:"npm adduser/login"}),":"]}),"\n",(0,n.jsx)(t.p,{children:"$ npm login \u2014 -registry=[registry_url]"}),"\n",(0,n.jsxs)(t.p,{children:["\u2026 which triggers a sign-in process that allows you to provide a username and a password to sign in at the specified registry. However, our build script does not run in an interactive environment (hence the buzzword \u201cautomation\u201d), and that is why we have to provide a ",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.strong,{children:"secret"})}),". A secret \u2014 in terms of our CI/CD environment \u2014 is simply a variable (a ",(0,n.jsx)(t.em,{children:"template placeholder"})," would also be a valid description for it) that gets replaced during the build with its actual value \u2014 hidden from everyone except for the build system itself. We do not want anyone to be able to read our passwords, do we?"]}),"\n",(0,n.jsxs)(t.p,{children:["The Sencha NPM-repository is private and requires a registered user for downloading the Ext JS SDK. A registered user is either the owner of a commercial license of the SDK, or a user registered for a 30-days trial version of the framework (more info ",(0,n.jsx)(t.a,{href:"https://www.sencha.com/products/extjs/evaluate/",children:"here"}),"). To actually resolve the dependencies for our project during npm ci, we need to provide our Sencha NPM credentials during the automated build process. It must be part of the build script itself, but how do we keep it secret?"]}),"\n",(0,n.jsx)(t.p,{children:"It all boils down to the following two commands that have to be executed before npm ciis invoked:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"   $ npm config set @sencha:registry [https://npm.sencha.com](https://npm.sencha.com)\n   $ npm config set //npm.sencha.com/:_authToken=${{secrets.TOKEN}}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["\u2026 whereas ",(0,n.jsx)(t.code,{children:"${{secrets.TOKEN}}"})," is the authentication token that can be used for authenticating a registered user with the Sencha NPM repository. The variable makes sure that no login credentials (better: the token) is stored as cleartext in the build script. We now have to tell the GitHub Actions where it can find the secret."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Active and valid tokens can be found in the users ",(0,n.jsx)(t.a,{href:"https://docs.npmjs.com/cli/v8/configuring-npm/npmrc",children:".npmrc"})," on the user\u2019s machine. The first step would be to locate the ",(0,n.jsx)(t.em,{children:".npmrc"}),"-file (on Windows, it\u2019s usually store under %HOMEPATH%) and find the authentication token used with the Sencha NPM repository. Copy it to the clipboard."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"We now return to our respository over at GitHub.com and navigate to the settings of our repository (that would be the repository for which we\u2019re writing the action)."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/2000/1*R7gKeTZea0QjtpB_TP6mfg.png",alt:"Settings can be found at the left side of the tab bar of a GitHub.com-repository."})}),"\n",(0,n.jsxs)(t.ol,{start:"3",children:["\n",(0,n.jsxs)(t.li,{children:["Once we have clicked the Settings tab and the page content\u2019s have been loaded, we\u2019re presented with a menu on the left side of the screen. Find the entry ",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.strong,{children:"Secrets"})})," from the menu, and activate it so its sub menu gets shown. Then click its entry ",(0,n.jsx)(t.strong,{children:"Actions"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/2000/1*6u37VDIVDHeuSOqEf2_grA.png",alt:"Part of the menu when visiting the Settings of a GitHub repository. We need to activate Secrets > Actions."})}),"\n",(0,n.jsxs)(t.ol,{start:"4",children:["\n",(0,n.jsx)(t.li,{children:"The right side of the screen will now load any existing secret for updating or removing its value. We choose to add a new secret so we can store the authentication token for the private NPM repository."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/2000/1*mhE0tgpym--6r82ncLRBZw.png",alt:"No secrets for this repository so far. Click New repository secret for adding the authentication token for the private NPM repository."})}),"\n",(0,n.jsxs)(t.ol,{start:"5",children:["\n",(0,n.jsxs)(t.li,{children:["In out build script, we want to refer to the authentication token with the variable ",(0,n.jsx)(t.code,{children:"${{secrets.TOKEN}}"})," ( since TOKEN is very generic, you\u2019re free to choose any other name)."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{src:"https://cdn-images-1.medium.com/max/2000/1*T067fFJW8DHjRznd3l8hqQ.png",alt:"\u2026 finally, we can add the secret by providing a name \u2014 and the token itself (screenshot shows a randomized token)"})}),"\n",(0,n.jsxs)(t.ol,{start:"6",children:["\n",(0,n.jsxs)(t.li,{children:["Click ",(0,n.jsx)(t.strong,{children:"Add secret"})]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Et voila, ",(0,n.jsx)(t.strong,{children:"Settings > Secrets > Actions"})," will now list your recently added secret token. You can now use it for this repository\u2019s build scripts."]}),"\n",(0,n.jsx)(t.h2,{id:"onboarding-the-build-software",children:"Onboarding the Build Software"}),"\n",(0,n.jsxs)(t.p,{children:["Finally, let\u2019s add the ",(0,n.jsx)(t.strong,{children:"checkout"})," build step to good use."]}),"\n",(0,n.jsx)(t.p,{children:"If a new developer joins an ongoing software project, he/she has to set up his/her local development environment, clone the repository and build the project. That\u2019s exactly what\u2019s happening now: A new dev joins the tem, if only briefly and in the form of an automated process: Let\u2019s onboard the GitHub Action!"}),"\n",(0,n.jsx)(t.h3,{id:"preparing-the-build",children:"Preparing the build"}),"\n",(0,n.jsx)(t.p,{children:"We require several more actions:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Install Node.js"})," \u2014 in order to use ",(0,n.jsx)(t.em,{children:"npm"}),", our build environment needs of course Node.js. Luckily, there is already ",(0,n.jsx)(t.a,{href:"https://github.com/actions/setup-node",children:"actions/setup-node@v2"})," available, so we simply have to tell our script to use it. With the help of ",(0,n.jsx)(t.a,{href:"https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs",children:"matrix strategies"})," we\u2019re also able to run the build with different versions of Node.js to guarantee (backwards) compability \u2014v16 will do for now"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Provide an authentication token"})," for the private NPM repository \u2014 as explained in the previous section of this article, ",(0,n.jsx)(t.a,{href:"https://npm.sencha.com",children:"https://npm.sencha.com"})," requires a valid user. With the help of ",(0,n.jsx)(t.strong,{children:"Repository Secrets"}),", we\u2019re able to provide this token for the automated build process now"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Install dependencies"})," with npm ci \u2014 this will make sure all libraries required for our project are installed. Once this process finishes, we can run the *actual build script *defined for our project"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Create a deployable build"})," with npm run build \u2014 this is the build script locally available ",(0,n.jsx)(t.em,{children:"for our project"})]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"**Create a zip file **\u2014 pack the files created with npm run build and create a zip-file from it. This will be the asset that gets added to the release in the next step"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Here are the additional steps we have just described. The indentation is off for a few lines to remain readability. Also note the path used at the end of this build step: We assume the project build to be bundled in the directory ./build/myproject \u2014 of course, you\u2019d have to adjust the path here to make sure the correct files end up in release.zip \u2014 which is saved relative to the build-directory at the same location where the script was invoked from."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"    steps:\n      - uses: actions/checkout@v2\n      - name: npm (Node.js ${{ matrix.node-version }})\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n       - name: npm ci\n         run: |\n           npm config set @sencha:registry [https://npm.sencha.com/](https://npm.sencha.com/)\n         npm config set //npm.sencha.com/:_authToken=${{secrets.TOKEN}}\n           npm ci --save-dev\n       - name: Build Ext JS & zip build\n         run: |\n          npm run build\n          cd ./build/myproject && zip -r ../../release.zip ./*\n"})}),"\n",(0,n.jsx)(t.h3,{id:"adding-the-build-as-an-asset-to-the-release",children:"Adding the build as an asset to the Release"}),"\n",(0,n.jsx)(t.p,{children:"The build pipeline is almost ready to go \u2014 one last step is missing: The action to upload the previously created zipped build along with the release we\u2019re just creating."}),"\n",(0,n.jsxs)(t.p,{children:["We have previously seen how to use actions/create-release- a predefined action from GitHub. We have also defined an id for this: id",":create_release",". This can now be used for querying properties published by the build step."]}),"\n",(0,n.jsxs)(t.p,{children:["Again, GitHub provides the necessary action so we do not have to write it ourselves: ",(0,n.jsx)(t.a,{href:"https://github.com/actions/upload-release-asset",children:"actions/upload-release-asset"})," is now used with a few additional configurations:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["upload_url \u2014 the url to upload the asset to. This is the location of the release we have created with our create-release-step, and can be identified by ",(0,n.jsx)(t.code,{children:"${{steps.create_release.outputs.upload_url}}"})]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"asset_path \u2014 the path to the asset we want to upload"}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["asset_name \u2014 the name used for the asset. It\u2019s a good practice to refer to the tag used with this release in its name: ",(0,n.jsx)(t.code,{children:"myproject.build.${{github.ref}}.zip"})]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"asset_content_type \u2014 the content-type of the asset. In our case, it will be application/zip"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Here\u2019s the build step in detail:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"    - name: Upload assets\n      uses: actions/upload-release-asset@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        upload_url: ${{ steps.create_release.outputs.upload_url }}\n        asset_path: ./release.zip\n        asset_name: myproject.build.${{ github.ref }}.zip\n        asset_content_type: application/zip\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["Note: We\u2019re using the GITHUB_TOKENin this build step to make sure our read/write-operations succeed. The GITHUB_TOKEN is also used in the create-release build step.This token is an authentication token to make sure the build script and its actions may read from/write to a given repository. To learn more about this environment-secret, refer to its ",(0,n.jsx)(t.a,{href:"https://docs.github.com/en/actions/security-guides/automatic-token-authentication",children:"documentation"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"the-final-build-script",children:"The Final Build Script"}),"\n",(0,n.jsxs)(t.p,{children:["This is the final build script. If you want to use it in your project, make sure to adjust paths and names, as this script uses an environment defined within the ",(0,n.jsx)(t.a,{href:"https://github.com/conjoon",children:"conjoon"}),"-organization of GitHub."]}),"\n",(0,n.jsx)(r.eJ,{id:"f289a4b483b97706808fd72588385952",source:2})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);