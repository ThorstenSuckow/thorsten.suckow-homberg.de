"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/02/19/fix-missing-favicon-in-extjs","metadata":{"permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2023-02-19-fix-missing-favicon-in-extjs/index.md","source":"@site/blog/2023-02-19-fix-missing-favicon-in-extjs/index.md","title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","description":"Fix: Missing favicon.ico in Sencha ExtJS production builds","date":"2023-02-19T00:00:00.000Z","formattedDate":"February 19, 2023","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"sencha","permalink":"/blog/tags/sencha"},{"label":"extjs","permalink":"/blog/tags/extjs"}],"readingTime":2.045,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","authors":["thorstensuckow"],"tags":["javascript","sencha","extjs"]},"nextItem":{"title":"Releasing conjoon V1.0","permalink":"/blog/Releasing-conjoon-V1.0"}},"content":"## Fix: Missing favicon.ico in Sencha ExtJS production builds\\n\\nFixing missing favicon.ico in Ext JS applications.\\n\\n*The original issue is tracked here: [https://github.com/conjoon/conjoon/issues/24](https://github.com/conjoon/conjoon/issues/24)*\\n\\n### The issue\\n\\nI\u2019m not quite sure *when *and *why *it broke, but it looks like production builds of Sencha Ext JS applications do not contain any **favicon.ico** originally existing in the development build (*anymore*).\\n\\nWhile everything seems to be okay with development builds (that\u2019s easy, they refer to the development\u2019s root folder in most cases and do not copy and move files around like the production build does), deploying to production will show the default icon coming with your vendor\u2019s browser for any Sencha ExtJS application, at least when your environment is using the following package versions:\\n\\n```\\n    webpack v4.39.3n/a\\n    ext-webpack-plugin v7.6.0 \\n    Ext JS v7.6.0.41 \\n    Sencha Cmd v7.6.0.87\\n``\\n\\nA call to\\n\\n```bash\\n    $ cross-env webpack \\n          --env.profile=desktop \\n          --env.environment=production \\n          --env.treeshake=yes \\n          --env.cmdopts=--uses\\n```\\n\\nwill produce the production build, but the production build will not contain the favicon.ico. Here\u2019s proof (\u2026 sort of):\\n\\n![](https://cdn-images-1.medium.com/max/2000/1*XGxSX1p43oVtk3cif5mE2Q.png)\\n\\n### The fix\\n\\nI did not invest too much investigating the reason why this file is omitted. Instead, I added the copy-webpack-plugin to the project and made sure the the favicon is copied over when running npm run build.\\n\\nIf you\u2019re reading this post, you most likely stumbled across the same issue. Here\u2019s how to fix it.\\n\\n1. Add copy-webpack-plugin to your project\\n\\nI\u2019m still sporting **webpack v4.39.3 **so I had to fall back to an older version of the plugin. I\u2019m using **copy-webpack-plugin@6.4.1** in this case:\\n\\n```bash\\n    $ npm i -D copy-webpack-plugin@6.4.1\\n```\\n\\n2. Add a few more modules to your project\u2019s webpack.config.js\\n\\nAdd the following two lines to the head of the file:\\n\\n```javascript\\n    // ....\\n    const CopyWebpackPlugin = require(\\"copy-webpack-plugin\\");\\n    const fs = require(\\"fs\\");\\n    //...\\n```\\n\\nWhy fs? I couldn\u2019t find an easy way to access the application\u2019s name at this point of the build step through the variables available, so I\u2019m using fs to parse the project\'s app.json. The value of its name-property is then used for computing the destination folder for the *copy*-operation.\\n\\n3. Add the **copy-webpack-plugin** to the list of plugins in the script\\n\\nYou\u2019ll easily find the location that has to be edited when looking for the **@sencha/ext-webpack-plugin**-configuration:\\n\\n```javascript\\n    const plugins = [\\n      new ExtWebpackPlugin({\\n        // ...\\n      }),\\n      new CopyWebpackPlugin({\\n        patterns: [{\\n          from: path.resolve(__dirname, \'./favicon.ico\'),\\n          to: path.join(\\n              __dirname,\\n              \\"build\\",\\n              environment,\\n              JSON.parse(\\n                fs.readFileSync(\\n                  path.resolve(__dirname, \'./app.json\')\\n                )\\n              ).name\\n          )\\n        }]\\n      })\\n    ]\\n```\\n\\nSubsequent builds will now contain the **favicon.ico**."},{"id":"Releasing-conjoon-V1.0","metadata":{"permalink":"/blog/Releasing-conjoon-V1.0","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-11-16-releasing-conjoon-v1.0/index.md","source":"@site/blog/2022-11-16-releasing-conjoon-v1.0/index.md","title":"Releasing conjoon V1.0","description":"Releasing conjoon V1.0","date":"2022-11-16T00:00:00.000Z","formattedDate":"November 16, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"conjoon","permalink":"/blog/tags/conjoon"},{"label":"open source","permalink":"/blog/tags/open-source"},{"label":"email","permalink":"/blog/tags/email"}],"readingTime":1.125,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"slug":"Releasing-conjoon-V1.0","title":"Releasing conjoon V1.0","authors":["thorstensuckow"],"tags":["release","conjoon","open source","email"]},"prevItem":{"title":"Fix: Missing favicon.ico in Sencha ExtJS production builds","permalink":"/blog/2023/02/19/fix-missing-favicon-in-extjs"},"nextItem":{"title":"Easily create Siesta tests for your applications","permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application"}},"content":"## Releasing conjoon V1.0\\n\\nI\u2019m happy to announce conjoon 1.0, the very first major release of the Open Source JavaScript Email client.\\n\\nFor updating to the latest version, simply use our [installer](https://www.conjoon.org/blog/2022/11/14/docs/api/misc/@conjoon/create-conjoon). It will let you select the latest release when opting for the version to install.\\n\\n![](https://cdn-images-1.medium.com/max/3126/0*0A2MPF6zRkH3ks2E.png)\\n\\n## Highlights[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#highlights)\\n\\nv1.0.0 marks the first major release for our JavaScript Email frontend, over 100 tickets related to [bugfixes, optimizations and minor features](https://github.com/orgs/conjoon/projects/3) across all projects where closed.\\n\\nThis release focuses on providing a stable frontend in conjunction with [lumen-app-email](https://www.conjoon.org/docs/api/backends/@conjoon/lumen-app-email).\\n\\nBesides the features already introduced with the release candidates, the following features have been added:\\n\\n### Plugins[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#plugins)\\n\\n* Plugin [mail-internal-mailtohandler](https://www.conjoon.org/docs/api/plugins/@conjoon/extjs-app-webmail/mail-internal-mailtohandler): Plugin for registering conjoon as the protocol handler for mailto-links\\n\\n![](https://cdn-images-1.medium.com/max/2004/0*iehzFekzIAWO5vfh.png)\\n\\n### Installer and CLI actions for lumen-app-email[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#installer-and-cli-actions-for-lumen-app-email)\\n\\nThe installation for lumen-app-email has been simplified with the help of Artisan and CLI commands. To get an instance of lumen-app-email running, use\\n\\n    $ composer create-project conjoon/lumen-app-email {targetDir} {version}\\n\\nwhich will start the installation process. For more information, refer to the [official guide](https://www.conjoon.org/docs/api/backends/@conjoon/lumen-app-email#installation-1).\\n\\n![](https://cdn-images-1.medium.com/max/3218/0*X1lMoQ8gvmbMwhAF.png)\\n\\n### Docker Container[\u200b](https://www.conjoon.org/blog/2022/11/14/1.0.0-release#docker-container)\\n\\n[ddev-ms-email](https://www.conjoon.org/docs/api/backends/@conjoon/ddev-ms-email) has been updated to utilize the installer of lumen-app-email and additionally provides integration options for conjoon so that the container can be used for serving both the backend and the frontend.\\n\\n    $ ddev create-conjoon\\n\\nwill start the installation of conjoon. For more information, refer to the [official guide](https://www.conjoon.org/docs/api/backends/@conjoon/ddev-ms-email).\\n\\nHappy coding! \ud83c\udf88"},{"id":"/2022/07/15/easily-create-siesta-tests-for-your-application","metadata":{"permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-07-15-easily-create-siesta-tests-for-your-application/index.md","source":"@site/blog/2022-07-15-easily-create-siesta-tests-for-your-application/index.md","title":"Easily create Siesta tests for your applications","description":"Easily create Siesta tests for your applications","date":"2022-07-15T00:00:00.000Z","formattedDate":"July 15, 2022","tags":[{"label":"npm","permalink":"/blog/tags/npm"},{"label":"tooling","permalink":"/blog/tags/tooling"},{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":2.485,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"Easily create Siesta tests for your applications","authors":["thorstensuckow"],"tags":["npm","tooling","javascript"]},"prevItem":{"title":"Releasing conjoon V1.0","permalink":"/blog/Releasing-conjoon-V1.0"},"nextItem":{"title":"JavaScript, function-as-object and the internet","permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet"}},"content":"## Easily create Siesta tests for your applications\\n\\n[Siesta](https://www.bryntum.com/products/siesta/) is a JavaScript unit and UI testing tool originally written by [Mats Bryntse](https://bryntum.com) which allows for running tests (for **Ext JS** (view-) components, amongst others) directly in the web browser (or headless in case you want to use it with your ci tools).\\n\\nIt is [conjoon](https://conjoon.org)\u2019s favorite among the various testing tools out there (we\u2019re also working with [**Jest**\ud83c\udccf](https://jestjs.io/) when there\u2019s no **Ext JS** involved) and without it, it\u2019s clear that End-to-End tests of some of the features and changes that have made it into conjoon would have slowed the project down due to their cyclic complexity \u2014 or even worse, make the software stuck in regression.\\n\\n[extjs-app-webmail](https://www.conjoon.org/docs/api/packages/@conjoon/extjs-app-webmail) alone sports more than 5000 unit and ui tests created with Siesta and they all make sure that the frontend behaves as intended and is free from unwelcomed side effects for any edge case that might occur (we know that\u2019s a [bold statement](https://dilbert.com/strip/2017-10-02?creator=Dilbert_Daily)).\\n\\nTo ease the process of setting up a functional **Siesta** environment, we\u2019re introducing the cli tool create-siesta which can be used with any JavaScript framework that requires a functional **Siesta** application running in a web browser, or at least a fully fledged infrastructure for running Siesta tests. However, by providing integrated build options for the **Ext JS** SDK, it is best suited for environments where the **Sencha** framework is already being used or will be used.\\n\\nFor using the tool, all that is required is a working [Node.js](https://node.js/) installation on your machine. The scaffolding process can then be started by typing\\n\\n```bash\\n$ npx create-siesta@latest\\n```\\n\\non the console. create-siesta will then guide you through the installation process and also consider the environment (aka *current working directory*) it was invoked in, by falling back to already existing **Ext JS** sources for example, or any other package requirements already available.\\n\\n![](https://cdn-images-1.medium.com/max/2400/1*ZOS1V_X-mg5T0ohzpH7GKg.gif)\\n\\nOnce create-siesta is finished, a folder (defaulting to tests) will be available with your project that contains a scaffolded **Siesta** environment with templates for additional and future tests you and your team can implement. Tests can then be started with\\n\\n```bash\\n$ npm run siesta:test\\n```\\n\\ncreate-siesta builds upon an already available helper tool for creating tests with Siesta, namely [**@coon-js/siesta-lib-helper](https://github.com/coon-js/siesta-lib-helper)** which is already widely used throughout the **conjoon** project and the packages it depends on. This means that you will have an additional control at hand with the Siesta application that allows for switching between toolkit dependent tests and dynamically changing timeout values used with\\n\\n```javascript\\n    t.waitForMs()\\n```\\n\\nin tests.\\n\\n![*The additional control made available by siesta-lib-helper allows for switching between the modern M and classic C toolkit and provides a list of timeout values that can be globally used with t.waitForMs() in tests.*](https://cdn-images-1.medium.com/max/2000/1*ThrsLBT_i7hVXw7df_kmtg.png)\\n\\n## Documentation[\u200b](http://localhost:3000/blog/2022/07/15/create-siesta#documentation)\\n\\nThe documentation for create-siesta can be found [here](https://www.conjoon.org/docs/api/misc/@coon-js/create-siesta), the sources are available with the [coon.js](https://github.com/coon-js) organization at **GitHub**, which provides a collection of useful tools for rapid **Sencha Ext JS** application development, and spawned from the [conjoon open source project](https://conjoon.org)."},{"id":"/2022/06/14/javascript-function-as-object-and-the-internet","metadata":{"permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-14-javascript-function-as-object-and-the-internet/index.md","source":"@site/blog/2022-06-14-javascript-function-as-object-and-the-internet/index.md","title":"JavaScript, function-as-object and the internet","description":"JavaScript, function-as-object and the internet","date":"2022-06-14T00:00:00.000Z","formattedDate":"June 14, 2022","tags":[{"label":"social","permalink":"/blog/tags/social"},{"label":"internet","permalink":"/blog/tags/internet"},{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":0.595,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"JavaScript, function-as-object and the internet","authors":["thorstensuckow"],"tags":["social","internet","javascript"]},"prevItem":{"title":"Easily create Siesta tests for your applications","permalink":"/blog/2022/07/15/easily-create-siesta-tests-for-your-application"},"nextItem":{"title":"conjoon installer updates","permalink":"/blog/2022/06/08/conjoon-installer-updates"}},"content":"## JavaScript, function-as-object and the internet\\n\\nThe internet \u2122\ufe0f has caught up on an ad by [FERCHAU](https://www.linkedin.com/company/ferchau/), found \u2014 amongst others \u2014 somewhere within the depths of the Berlin subway.\\n\\n[![](./img/kitze-twitter.png)](https://twitter.com/thekitze/status/1535951647477846016)\\n\\n\\nSome devs cringe at the code used with the ad \u2014 turns out it can easily get de-mystified with JavaScript\u2019s [function-as-object](http://www.cs.uni.edu/~wallingf/patterns/envoy.pdf) style:\\n\\n[![](./img/twitter-thorstensuckow.png)](https://twitter.com/thorstensuckow/status/1536479447234248708)\\n\\n```javascript\\n    const careerStuck = () => {};\\n    careerStuck.stop = () => {};\\n```\\n\\nOpinions regarding semantics may differ:\\n\\n\\n```javascript\\n    if (careerStuck() === true) {\\n        careerStuck.stop();\\n        beSmart(); // \ud83d\udc40\\n    }\\n```\\n\\n### Further reading\\n\\nMartin Fowler on **FunctionAsObject** in an [article from 2017](https://martinfowler.com/bliki/FunctionAsObject.html). The pattern goes back to the last century when Eugene Wallingford coined the name \u201cFunction as Object\u201d in his [1999 pattern language \u201cEnvoy\u201d](http://www.cs.uni.edu/~wallingf/patterns/envoy.pdf)."},{"id":"/2022/06/08/conjoon-installer-updates","metadata":{"permalink":"/blog/2022/06/08/conjoon-installer-updates","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-08-conjoon-installer-updates/index.md","source":"@site/blog/2022-06-08-conjoon-installer-updates/index.md","title":"conjoon installer updates","description":"conjoon installer updates","date":"2022-06-08T00:00:00.000Z","formattedDate":"June 8, 2022","tags":[{"label":"npm","permalink":"/blog/tags/npm"},{"label":"tooling","permalink":"/blog/tags/tooling"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"conjoon","permalink":"/blog/tags/conjoon"}],"readingTime":1.02,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"conjoon installer updates","authors":["thorstensuckow"],"tags":["npm","tooling","javascript","conjoon"]},"prevItem":{"title":"JavaScript, function-as-object and the internet","permalink":"/blog/2022/06/14/javascript-function-as-object-and-the-internet"},"nextItem":{"title":"Releasing conjoon 1.0.0-beta.0","permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta"}},"content":"![](https://cdn-images-1.medium.com/max/2186/1*jfdWSDOHVoTAkKJmlsSYqQ.gif)\\n\\n## conjoon installer updates\\n\\nCreating a custom labeled version of [conjoon](https://conjoon.org) has never been easier.\\n\\nThe installer (i.e. [initializer](https://docs.npmjs.com/cli/v8/commands/npm-init)) for conjoon received an update to make setting up a local installation of the frontend more convenient and more intuitive.\\n\\nThe installer requires [Node.js](https://nodejs.org/) 16.14 or above and is started by typing\\n\\n```bash\\n$ npx create-conjoon@latest\\n```\\n\\non the command line. Additionally, you have the option to initiate the [quick install](https://www.conjoon.org/assets/files/create-conjoon-ceb95c48fd2585e918c38d15f61bebca.md#install-type) right away by providing the name and the target directory for the installation:\\n\\n```bash\\n$ npx create-conjoon@latest \\"my webmail\\" ~/webmail\\n```\\n\\nThe *quick install* will continue the installation process by picking **the latest release** from the package registry (**including **pre-releases) and configure the installation with fake endpoints returning demo data. You can still connect to production systems later on by using appropriate settings.\\n\\n>  _If you prefer a guided installation for configuring endpoints for existing [backends](https://www.conjoon.org/assets/files/overview-8db4359943e06906e553f7195535e9dd.md) right away, you can omit any of the arguments. The installer will then present various options to make sure your requirements are met!_\\n\\nIn both cases, target directory will contain the files required for developing conjoon and a production build available in the build folder, which is served by typing npm run stage in the target directory."},{"id":"/2022/06/07/releasing-conjoon-1-0-0-beta","metadata":{"permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-06-07-releasing-conjoon-1-0-0-beta/index.md","source":"@site/blog/2022-06-07-releasing-conjoon-1-0-0-beta/index.md","title":"Releasing conjoon 1.0.0-beta.0","description":"Releasing conjoon 1.0.0-beta.0","date":"2022-06-07T00:00:00.000Z","formattedDate":"June 7, 2022","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"conjoon","permalink":"/blog/tags/conjoon"},{"label":"open source","permalink":"/blog/tags/open-source"},{"label":"email","permalink":"/blog/tags/email"}],"readingTime":0.635,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"Releasing conjoon 1.0.0-beta.0","authors":["thorstensuckow"],"tags":["release","conjoon","open source","email"]},"prevItem":{"title":"conjoon installer updates","permalink":"/blog/2022/06/08/conjoon-installer-updates"},"nextItem":{"title":"Fix: Ext JS Simlets and omitting the status code","permalink":"/blog/2022/04/15/extjs-simlets-and-omitting-the-status-code"}},"content":"![](https://cdn-images-1.medium.com/max/2736/0*HWdUhNVaz3OI-bRw.png)\\n\\n## Releasing conjoon 1.0.0-beta.0\\n\\n\ud83c\udf89 5 years after the (almost) [first commit](https://github.com/conjoon/conjoon/commit/ca075e548a644011e0d9fbaa3321bcff7aa8f998) to conjoon\u2019s [new home](https://github.com/conjoon/conjoon), I\u2019m happy to announce the immediate availability of the first public pre-release of [**conjoon](https://conjoon.org)**, an open source email client built with JavaScript, PHP and great tools from the open source community.\\n\\nTo install the latest release on your local machine, type\\n\\n```bash\\n$ npx create-conjoon@latest\\n```\\n\\nthen follow the instructions on screen.\\n\\nDon\u2019t miss out on the [documentation](https://www.conjoon.org/docs) for more information about available install and build types.\\n\\nWhile I\u2019m confident that conjoon can take its first steps in a production environment, expect a stable first release to be available in the coming days. Until then, a few additions to the documentation and the [guides](https://www.conjoon.org/docs/category/guides) will be made.\\n\\nHappy coding! \ud83c\udf88"},{"id":"/2022/04/15/extjs-simlets-and-omitting-the-status-code","metadata":{"permalink":"/blog/2022/04/15/extjs-simlets-and-omitting-the-status-code","editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/blog/2022-04-15-extjs-simlets-and-omitting-the-status-code/index.md","source":"@site/blog/2022-04-15-extjs-simlets-and-omitting-the-status-code/index.md","title":"Fix: Ext JS Simlets and omitting the status code","description":"Fix: Ext JS Simlets and omitting the status code","date":"2022-04-15T00:00:00.000Z","formattedDate":"April 15, 2022","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"sencha","permalink":"/blog/tags/sencha"},{"label":"extjs","permalink":"/blog/tags/extjs"}],"readingTime":2.505,"hasTruncateMarker":false,"authors":[{"name":"Thorsten Suckow-Homberg","url":"https://thorsten.suckow-homberg.de","imageURL":"https://avatars.githubusercontent.com/u/823135","key":"thorstensuckow"}],"frontMatter":{"title":"Fix: Ext JS Simlets and omitting the status code","authors":["thorstensuckow"],"tags":["javascript","sencha","extjs"]},"prevItem":{"title":"Releasing conjoon 1.0.0-beta.0","permalink":"/blog/2022/06/07/releasing-conjoon-1-0-0-beta"}},"content":"## Fix: Ext JS Simlets and omitting the status code\\n\\nI recently stumbled upon a mean error that was hard to track down. Luckily, the issue was caused by a simple carelessness regarding fully configured response-objects of Simlets used in the dev-environment of the conjoon-project and did not require any large refactoring.\\n\\n*The original issue is tracked here: [https://github.com/conjoon/extjs-app-webmail/issues/196](https://github.com/conjoon/extjs-app-webmail/issues/196)*\\n\\n### The issue\\n\\nThe problem was related to batch-operations in Ext JS: When any operation of the batch fails, the pauseonexception-setting is considered and further processing of any remaining operation is halted. The user then has the option to retry the last failed operation, continuing with the remaining operations if this was finally successful.\\nHowever, retrying some of the failed operations gave the following error:\\n\\n![](https://cdn-images-1.medium.com/max/2000/0*_Lq8JlNRBBEutuGY.png)\\n\\nThe operation that failed \u2014 and which is now about to be retried \u2014 was already destroyed by Ext JS internal garbage-collector.\\n\\n### The fix\\n\\nIt took some time to find out that the operation was destroyed and that some of the properties required for re-running it were already de-referenced. This took me to the internals of response-handling of XMLHttpRequests of Ext JS and finally to the code where the HTTP status of a request was inspected. Take note that I\u2019m mainly developing with Simlets to avoid costly network roundtrips to any backend.\\n\\n> _It is mandatory for the Simlets to properly treat mocked backend-errors by also providing the appropriate status-code._\\n\\nIt was assumed that simply setting the success-property in any of the delete/put/...-methods of a simlet treating the request would later on be parsed internally; setting the status-code of the response automatically to anything other than 200. That is not the case. It is mandatory for the Simlets to properly treat mocked backend-errors by also providing the appropriate status-code.\\n\\nThe flaw was too often overseen since the status-field was **not set,** as the following code examples show (examples represent code in any of the delete/post/put/...-methods of a Json-Simlet; see Ext.ux.ajax.Simlet):\\n\\nThe following leaves the ret.status-property undefined:\\n\\n```javascript\\n    //....\\n    const ret = {};\\n    ret.responseText = Ext.JSON.encode({\\n        success: false\\n    });\\n    return ret;\\n```\\n\\n\u2026 while the following re-uses the predefined value of 200 for the status, even if success=false should indicate that the request could not be processed as expected:\\n\\n```javascript\\n    const \\n        me = this,\\n        ret = {};\\n\\n    Ext.Array.forEach(me.responseProps, function (prop) {\\n        if (prop in me) {\\n            ret[prop] = me[prop];\\n        }\\n    });\\n\\n    ret.responseText = Ext.JSON.encode({\\n        success: false\\n    });\\n\\n    return ret;\\n```\\n\\nIn both cases, Ext.data.request.Ajax would parse the response and its status in the onComplete-method:\\n\\n```javascript\\n    result = Ext.data.request.Ajax.parseStatus(xhr.status, xhr);\\n```\\n\\nAn undefined status would cause the response to be treated as **not successful** (example 1), while anything other than undefined would be parsed and interpreted according to its HTTP-status representative (successful: 200; failure: 404, 500 etc.).\\n\\nExtJS would assume that a successful operation is not needed anymore; it is automatically destroyed then. This was unexpected behavior in this case, since the code marked the operation as a failure, but not via the status-code, which was required."}]}')}}]);