"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[6598],{4843:(e,n,t)=>{t.d(n,{R5:()=>i,lA:()=>s});t(6540);var o=t(4848);function i(e){let{name:n,pp:t}=e;const i=`/docs/bibliography#${n.toLowerCase()}`;return(0,o.jsxs)("a",{href:i,children:["[",(0,o.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",n]}),t?`, ${t.includes("-")?"pp":"p"}. ${t}`:"","]"]})}function s(e){let{name:n,file:t}=e;Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((e=>{let[n,o]=e;if(t.startsWith(`${n}.`))return t=t.replace(`${n}.`,`${o}.`),!0}));const i=`/docs/toolbox/${t}`;return(0,o.jsx)("a",{href:i,className:"glosRef",children:n})}},5142:(e,n,t)=>{t.d(n,{o:()=>i});t(6540);var o=t(4848);function i(){return(0,o.jsx)("div",{style:{width:"100%",textAlign:"right"},children:(0,o.jsx)("a",{style:{textDecoration:"underline"},onClick:()=>history.go(-1),href:"#",children:"Back"})})}},5589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"toolbox/ddd.anemicdomainmodel","title":"Anemic Domain Model","description":"An Anemic Domain Model is a domain model that contains little or no business logic, and whose  mainly consists of getters and setters. Specification and invariants regarding the domain logic are controlled through layers and upstream components.","source":"@site/docs/toolbox/ddd.anemicdomainmodel.mdx","sourceDirName":"toolbox","slug":"/toolbox/ddd.anemicdomainmodel","permalink":"/docs/toolbox/ddd.anemicdomainmodel","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/toolbox/ddd.anemicdomainmodel.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1746093778000,"frontMatter":{"title":"Anemic Domain Model"},"sidebar":"toolbox","previous":{"title":"Aliasing","permalink":"/docs/toolbox/computerscience.aliasing"},"next":{"title":"Application Layer","permalink":"/docs/toolbox/softwarearchitecture.applicationlayer"}}');var i=t(4848),s=t(8453),a=t(5142),r=t(4843);const d={title:"Anemic Domain Model"},l="Anemic Domain Model (DDD)",c={},h=[];function m(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",em:"em",h1:"h1",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"anemic-domain-model-ddd",children:"Anemic Domain Model (DDD)"})}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.strong,{children:"Anemic Domain Model"})," is a domain model that contains little or no business logic, and whose ",(0,i.jsx)(r.lA,{name:"Aggregates",file:"ddd.aggregate"})," mainly consists of getters and setters. Specification and invariants regarding the domain logic are controlled through layers and upstream components."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Anemic Domain Model"})," is considered to be an ",(0,i.jsx)(n.em,{children:"Anti Pattern"})," to ",(0,i.jsx)(r.lA,{name:"Domain Model",file:"ddd.domainmodel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(r.lA,{name:"DDD",file:"ddd.domaindrivendesign"}),", the ",(0,i.jsx)(n.strong,{children:"Domain Layer"})," has ",(0,i.jsx)(n.strong,{children:"Domain models"})," that contain ",(0,i.jsx)(r.lA,{name:"Aggregates",file:"ddd.aggregate"}),", which represent conceptual whole objects of the context of a domain. They should also contain behavior and logic intrinsic to the concept they abstract, within their applicable boundaries. Without this, the meaning and the role of such domain models is diluted, since ",(0,i.jsx)(n.strong,{children:"Domain Logic"})," is then often to be found in the various layers that ",(0,i.jsx)(n.em,{children:"access"})," or ",(0,i.jsx)(n.em,{children:"control"})," such ",(0,i.jsx)(n.strong,{children:"Anemic Domain Models"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:'"[...]you realize that there is hardly any behavior on these objects, making them little more than bags of getters and setters. [...] Instead there are a set of service objects which capture all the domain logic, carrying out all the computation and updating the model objects with the results. These services live on top of the domain model and use the domain model for data."'})," ",(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/AnemicDomainModel.html",children:"Martin Fowler, Anemic Domain Model"})]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"What causes Anemic Domain Models",type:"tip",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Anemic Domain Models"})," happen when there is high technical and little domain knowledge. Designing a ",(0,i.jsx)(n.strong,{children:"Domain Model"})," closely with ",(0,i.jsx)(n.strong,{children:"Doman Experts"})," can help with identifying ",(0,i.jsx)(n.strong,{children:"Domain Logic"})," that should be made available within the ",(0,i.jsx)(n.strong,{children:"Domain Model"}),", and that should be part of ",(0,i.jsx)(n.strong,{children:"Aggregates"}),"."]}),(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(r.R5,{name:"IDDD",pp:"14-19"}),", Vaughn Vernon gives a brief overview why ",(0,i.jsx)(n.strong,{children:"Anemic Domain Models"})," happen, and why they are seldomly recognized as a problem, by arguing that developers are mainly used to implement data structures upfront, then behavior. He also mentions historic reasons why ",(0,i.jsx)(n.strong,{children:"Anemic Domain Models"})," are not identified as problematic: Due to the popularity of shared systems in the late 1990's, serializing data for communication  became an important aspect of software design. Often, systems where designed with a strong focus on the portability of data, rather than its behavior given the domain context it should exist in."]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"references"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/AnemicDomainModel.html",children:"Martin Fowler: Anemic Domain Model"})}),"\n"]}),"\n",(0,i.jsx)(a.o,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);