"use strict";(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[5511],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,c=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(c,r(r({ref:t},h),{},{components:n})):a.createElement(c,r({ref:t},h))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6279:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const i={title:"PHP, default time zones and DST",description:"Preparing your PHP Application to support different time zones"},r=void 0,s={unversionedId:"articles/php-default-time-zones-and-dst/index",id:"articles/php-default-time-zones-and-dst/index",title:"PHP, default time zones and DST",description:"Preparing your PHP Application to support different time zones",source:"@site/docs/articles/php-default-time-zones-and-dst/index.mdx",sourceDirName:"articles/php-default-time-zones-and-dst",slug:"/articles/php-default-time-zones-and-dst/",permalink:"/docs/articles/php-default-time-zones-and-dst/",draft:!1,editUrl:"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/articles/php-default-time-zones-and-dst/index.mdx",tags:[],version:"current",lastUpdatedBy:"Thorsten Suckow-Homberg",lastUpdatedAt:1704821398,formattedLastUpdatedAt:"Jan 9, 2024",frontMatter:{title:"PHP, default time zones and DST",description:"Preparing your PHP Application to support different time zones"},sidebar:"docs",previous:{title:"Fluent Interface for JavaScript Promises",permalink:"/docs/articles/a-fluent-interface-for-javascript-promises/"}},l={},d=[{value:"<strong>Intended Audience &amp; other Notes</strong>",id:"intended-audience--other-notes",level:3},{value:"Michael, Tim and an 8 hour offset",id:"michael-tim-and-an-8-hour-offset",level:2},{value:"Preparing your application",id:"preparing-your-application",level:2},{value:"Make the time zone globally configurable",id:"make-the-time-zone-globally-configurable",level:3},{value:"Let the user choose a time zone",id:"let-the-user-choose-a-time-zone",level:3},{value:"Set up the time zone for each request",id:"set-up-the-time-zone-for-each-request",level:3},{value:"The 0 meridian for your data storage",id:"the-0-meridian-for-your-data-storage",level:2},{value:"Choosing the MySQL data type for our dates",id:"choosing-the-mysql-data-type-for-our-dates",level:3},{value:"Unix Timestamp",id:"unix-timestamp",level:3},{value:"datetime Fields",id:"datetime-fields",level:3},{value:"Getting that UTC date ready for Mysql",id:"getting-that-utc-date-ready-for-mysql",level:3},{value:"Being soft and flexible",id:"being-soft-and-flexible",level:2},{value:"Wrapping things up",id:"wrapping-things-up",level:2}],h={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This article originally appeared on the ",(0,o.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20120731100935/http://thorsten.suckow-homberg.de/2011/11/17/zend_date-default-timezones-and-dst/"},"17th of November, 2011")," on my ",(0,o.kt)("a",{parentName:"p",href:"https://thorsten.suckow-homberg.de"},"personal website")," under the title \u201cZend_Date, default time zones and DST\u201d and was later translated to german and published in the ",(0,o.kt)("a",{parentName:"p",href:"https://entwickler.de/php/mittag-in-san-francisco-abend-in-london"},"PHP Magazin"),". Some frameworks I\u2019m mentioning in this article are outdated. The challenge to properly calculating dates for an international operating web-application still persist, though. The formatting of the original article was slightly changed for this website.")),(0,o.kt)("p",null,"Is your application prepared to support different locales? Do you provide translations and different number formats based on a user\u2019s regional conditions? If so, how about time and calendar dates? Do you keep track of the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UTC_offset"},"UTC Offset")," and the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Daylight_saving_time"},"Daylight Saving Time (DST)")," relative to the time zone your users live in, and are you able to convert dates properly to different time zones? This article will show you how to utilize ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," to make your application aware of all this."),(0,o.kt)("h3",{id:"intended-audience--other-notes"},(0,o.kt)("strong",{parentName:"h3"},"Intended Audience & other Notes")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Are you working with PHP and Zend Framework, and share a hearty dislike for I18N? Then this article is for you.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This article was written for Zend Framework 1.11 and PHP >= 5.2. Database examples are using MySQL.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Working with time-related functions may cause problems on systems where PHP supports only timestamps as unsigned 32-bit integers. Since this problems should\u2019ve been fixed to a large degree with PHP 5.1.0, and the fact that even ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," silently assumes that working with dates in the range of 1901 and 2038 using PHP internal functions will succeed, we are not paying too much attention to this."))),(0,o.kt)("h2",{id:"michael-tim-and-an-8-hour-offset"},"Michael, Tim and an 8 hour offset"),(0,o.kt)("p",null,"Why would you want to convert dates to different time zones once they have been persisted in the data storage? Let\u2019s say you are a London based developer and one of your clients works with this software you\u2019ve written, a tool for creating, managing and sharing documents. This company is about to expand globally, and you\u2019re excited that they just ordered a few more licenses for their new office in San Francisco. Michael, the former head of the financial department and one of the core users of your document sharing tool, will be the company\u2019s first long time employee heading to the US, and a week before he moves, he introduces Tim \u2014 his replacement for the London based office \u2014 to the functionality of your software.\n\u201cSee\u201d, Michael says, \u201conce you have finished working with the document, you click the \u2018share\u2019 button and it will automatically end up in my inbox for pending reviews.\u201d He leans back, crossing the arms behind his head. \u201cIt\u2019s that easy!\u201d\nA few days later \u2014 Tim finally got his own user account set up by the company\u2019s admin \u2014 Michael moves from London to San Francisco. Your application did its job really good over the past months, and everyone\u2019s pleased with how smooth everything\u2019s working, and how convenient it is to access and manage documents from any computer with a working internet connection",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_1_"},(0,o.kt)("strong",{parentName:"a"},"[1]"))),".\nWhat nobody recognized yet \u2014 your application stored Michael\u2019s (and everyone else\u2019s) documents along with the absolute date of the time zone of London (",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Greenwich_Mean_Time"},"GMT"),", that is), and he now continues to use your software in San Francisco. And he\u2019s pretty confused about the strange dates that confront him now while looking at his document workspace. \u201cBananas\u201d, he thinks.\n\u201cThis one draft here\u201d, he takes a close look at the monitor while circling the mouse pointer over the document entry, \u201cI know Tim created it and shared it with me last monday, but that was clearly not at 08:00 PM.\u201d\nHe scratches his head. \u201cI remember receiving this draft around noon, or was it the other day? I went home around 07:00 PM, there\u2019s no way I could have received the draft later on. Something must be broken\u2026 Or am I stressed out?\u201d\nSo what\u2019s happening here? Well, he moved to the pacific time zone which relies upon",(0,o.kt)("strong",{parentName:"p"}," ",(0,o.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Pacific_Time_Zone"},"Pacific Standard Time (PST)")),". And this time zone is exactly 8 hours behind the time zone he previously lived in (ignoring ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Daylight_saving_time"},"Daylight Saving Time"))," for now).\nClicking somewhat lost through your application in search for a reasonable explanation, he notices that the software does not consider him being in a different time zone. Furthermore: He doesn\u2019t find any option that would let him select a different time zone other than the one he lived in \u2014 and obviously where the software was developed.\nIt\u2019s definitely time for some improvements. We all want our software to be used across the globe, don\u2019t we?"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," To clarify things: Yes, Tim actually saved the draft at 08:00 PM, but according to GMT. Since London is 8 hours ahead of San Francisco, Michael must have received the draft somewhen around 12:00 noon PST \u2014 the time Tim actually sent the draft from London minus the 8 hour offset to PST.")),(0,o.kt)("p",null,"Confused? Don\u2019t worry, ",(0,o.kt)("strong",{parentName:"p"},"Zend_Date")," is here to help. As part of the ",(0,o.kt)("strong",{parentName:"p"},"Zend Framework"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," allows for convenient access to operations related to calculations, formats and transformations of dates."),(0,o.kt)("h2",{id:"preparing-your-application"},"Preparing your application"),(0,o.kt)("p",null,"It is really important for software to be aware of the time zone it is currently serving as soon as there are any calculations related to dates and times involved.\nWondering whether your software is affected by this problem? Are dates and times part of any entity in your software which need to be persisted? If you can answer this question with \u201cYes!\u201d (or if your first thought was \u201cah, crap\u2026\u201d), then you have already given yourself the answer: To a certain degree, it is possible that your software messes with the users\u2019 feelings as soon as the time zone changes \u2014 whether it\u2019s the time zone of your PHP environment or the time zone a user lives in. The following will give you some food for thought for your next planning meeting","[2]","."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://cdn-images-1.medium.com/max/2000/0*m3vEwD83MqgYKGG2.png",alt:"Don\u2019t forget: Pain grows exponentially to the time spent deferring important decisions."})),(0,o.kt)("p",null,"There are a few steps you should take into account when adding time zone support to your application, and all of them should be implemented in one or another way in your software:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make the time zone globally configurable")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Provide a default time zone and let the user choose the timezone he currently lives in")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set the default time zone for further date calculations for each request"))),(0,o.kt)("h3",{id:"make-the-time-zone-globally-configurable"},"Make the time zone globally configurable"),(0,o.kt)("p",null,"The time zone setting should be globally configurable without even touching PHP\u2019s or the system\u2019s configuration. When working with Zend_Framework, this can easily be done by using ",(0,o.kt)("strong",{parentName:"p"},"Zend_Config"),", a powerful component which helps in parameterizing your software. There are a lot of good tutorials out there so I won\u2019t dive too deep into how to set up an application with Zend_Config, and give you a simple example instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini",metastring:'title="Configuration (ini-format) for a Zend_Framework application, defining the default time zone."',title:'"Configuration',"(ini-format)":!0,for:!0,a:!0,Zend_Framework:!0,"application,":!0,defining:!0,the:!0,default:!0,time:!0,'zone."':!0},"[environment]\n; Specify the default time zone for the application here. For a list of\n; timezones supported by PHP, see http://de.php.net/manual/en/timezones.php\ndate.timezone.default = Europe/Berlin\n")),(0,o.kt)("p",null,"You can access the configuration by simply loading the ini-File using Zend_Config_Ini, and then query the settings accordingly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Code snippet demonstrating how to load and read out an ini-configuration file using Zend_Config_Ini"',title:'"Code',snippet:!0,demonstrating:!0,how:!0,to:!0,load:!0,and:!0,read:!0,out:!0,an:!0,"ini-configuration":!0,file:!0,using:!0,'Zend_Config_Ini"':!0},"// load the configuration\n$config = new Zend_Config_Ini('/path/to/config/file');\n// read out the time zone setting\n$timezone = $config->environment->date->timezone->default;\n")),(0,o.kt)("p",null,"Following this approach, we are now able to easily specify a default time zone value for our application that should later be used. This is our very first step to gain more independence from our server\u2019s presets and escape the scourge of unwanted configuration locks."),(0,o.kt)("h3",{id:"let-the-user-choose-a-time-zone"},"Let the user choose a time zone"),(0,o.kt)("p",null,"There are a lot of ways we can map a time zone to a user: We could bind this property to a user object which is available through the request lifetime for each and every signed in user, or we could create an individual settings-object, which \u2014 again \u2014 can be mapped 1:1 to a user."),(0,o.kt)("p",null,"\u201cWhat about guests visiting the application\u201d, you ask? Remember that we have set up a default time zone, right? You can use this value for each visitor, or you could guess the time zone, for example based on locale informations available through HTTP headers (Accept-Language), or by using Javascript to examine a few available client properties. Heck, you could even let a visitor choose a time zone and save this value to a cookie."),(0,o.kt)("p",null,"For a list of available and supported time zones in PHP, you can visit ",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/timezones.php"},"http://de.php.net/manual/en/timezones.php"),". But if you want to create a drop-down box with a set of all time zones to choose from, it would be best to create this list automatically by using PHP\u2019s native ",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/class.datetimezone.php"},"DateTimeZone")," object, which is available for PHP >= 5.2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Code snippet to list all time zones supported by PHP. (PHP >= 5.2 required for DateTimeZone)."',title:'"Code',snippet:!0,to:!0,list:!0,all:!0,time:!0,zones:!0,supported:!0,by:!0,"PHP.":!0,"(PHP":!0,">":"",5.2:!0,required:!0,for:!0,'DateTimeZone)."':!0},'$timezones = DateTimeZone::listIdentifiers();\nfor ($i=0, $len = count($timezones); $i < $len; $i++) {\n    echo $timezones[$i] . "\\n";\n}\n')),(0,o.kt)("p",null,"The remaining work shouldn\u2019t be too much of a challenge \u2014 we provide a settings section in our application where the user can specify the desired time zone. It\u2019s simple as that."),(0,o.kt)("h3",{id:"set-up-the-time-zone-for-each-request"},"Set up the time zone for each request"),(0,o.kt)("p",null,"We\u2019re almost there \u2014 just one important step is missing: How do we tell which time zone the application should serve? Quite simple \u2014 put the application in a time zone context by applying best practices",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_3_"},(0,o.kt)("strong",{parentName:"a"},"[3]"))),"! And the best practice would be to call ",(0,o.kt)("a",{parentName:"p",href:"http://de.php.net/manual/en/function.date-default-timezone-set.php"},"date_default_timezone_set()")," in your bootstrapper, with the value of either the default time zone \u2014 or, if available \u2014 the user\u2019s manually chosen time zone or the one you tried to autodetect."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Specify a default time zone with a request. Make sure the setting is valid during the whole request and doesn\u2019t change unintentionally."',title:'"Specify',a:!0,default:!0,time:!0,zone:!0,with:!0,"request.":!0,Make:!0,sure:!0,the:!0,setting:!0,is:!0,valid:!0,during:!0,whole:!0,request:!0,and:!0,"doesn\u2019t":!0,change:!0,'unintentionally."':!0},'// code to read out the users time zone from his settings,\n// assuming that our user object provides a "getTimezone()" method\n$timezone = $user->getTimezone();\n$result   = @date_default_timezone_set($timezone);\n')),(0,o.kt)("p",null,"We are using ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," in front of date_default_timezone_set() to suppress any Notice thrown by PHP in case the passed argument is invalid. It is up to you to add appropriate error behavior at this point."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Q:")," ",(0,o.kt)("em",{parentName:"p"},"I don\u2019t need to handle different time zones. I think I\u2019m fine with adjusting the time zone in the "),"php.ini",(0,o.kt)("em",{parentName:"p"},", and reading it out accordingly, right?"),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," Sure, go ahead, but for portability reasons it's best practice to set the default time zone manually. Once you're moving your application to another server or the php.ini needs to be changed regarding date/time zone settings, you'll be probably out of luck and need to implement this feature to a time when there is already a large amount of user generated dates/times spread like crazy in your data storage."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Q:")," ",(0,o.kt)("em",{parentName:"p"},"I looked up the "),"date.timezone ",(0,o.kt)("em",{parentName:"p"},"setting in my")," php.ini",(0,o.kt)("em",{parentName:"p"},", but it's missing. So what timezone is my application running in if I do not set it manually?"),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," It largely depends on what framework/libraries you are using, but in the most cases the default time zone is read out by calling date_default_timezone_get() (even ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," uses it). According to the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.php.net/manual/en/function.date-default-timezone-get.php"},"PHP manual")),", the timezone is determined in the following order:"),(0,o.kt)("blockquote",null,(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"Reading the timezone set using the date_default_timezone_set() function (if any)"),(0,o.kt)("li",{parentName:"ul"},"Prior to PHP 5.4.0 only: Reading the TZ environment variable (if non empty)"),(0,o.kt)("li",{parentName:"ul"},"Reading the value of the date.timezone ini option (if set)"),(0,o.kt)("li",{parentName:"ul"},"Prior to PHP 5.4.0 only: Querying the host operating system (if supported and allowed by the OS). This uses an algorithm that has to guess the timezone. This is by no means going to work correctly for every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed correctly, and set date.timezone to the correct timezone instead. ",(0,o.kt)("br",null)," ",(0,o.kt)("br",null),"If none of the above succeed, date_default_timezone_get() will return a default timezone of UTC."))),(0,o.kt)("h2",{id:"the-0-meridian-for-your-data-storage"},"The 0 meridian for your data storage"),(0,o.kt)("p",null,"We have just enhanced our application with support for serving different time zones, but how exactly would we want to store the dates/times in the underlying data storage of our application? By storing the data without any time offset",(0,o.kt)("em",{parentName:"p"},"[4]"),"! We use ",(0,o.kt)("strong",{parentName:"p"},"UTC"),"/",(0,o.kt)("strong",{parentName:"p"},"GMT")," as the preferred time zone for all of our date values."),(0,o.kt)("p",null,"Looking at several dates marked with either GMT or UTC, users see no difference between them, so how do we distinguish them? And should we even care? Well, a fractional second difference exist between the two, but it is so small, that it won\u2019t affect your everyday work",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_5_"},(0,o.kt)("strong",{parentName:"a"},"[5]"))),". To be on the safe side: Use UTC when in doubt. It means almost the same as GMT and it\u2019s kind of its modern successor. Atomic age and stuff, you know?"),(0,o.kt)("p",null,"There are various steps involved in making sure we are putting the proper UTC date to our data storage \u2014 and to be able to serve this dates properly to different time zones:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Choosing the MySQL data type for our dates")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Converting user/system generated dates to UTC")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Converting UTC dates back to a specific time zone"))),(0,o.kt)("h3",{id:"choosing-the-mysql-data-type-for-our-dates"},"Choosing the MySQL data type for our dates"),(0,o.kt)("p",null,"Storing UTC dates in our data storage boosts the (locale) portability of our software. However, we have to think about how our dates will be stored. We will take a look at two common alternatives:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Saving dates and times as Unix timestamps")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Saving dates and times in a datetime field"))),(0,o.kt)("p",null,"Both of them have advantages and disadvantages:"),(0,o.kt)("h3",{id:"unix-timestamp"},"Unix Timestamp"),(0,o.kt)("p",null,"A Unix timestamp is an integer value which represents the elapsed seconds since ",(0,o.kt)("inlineCode",{parentName:"p"},"1970-01-01 00:00:00(GMT)"),". This is the so called \u201cUnix Epoch\u201d. On 32-bit systems, the valid range of values reach from ",(0,o.kt)("inlineCode",{parentName:"p"},"1970-01-01 00:00:00 UTC")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"2038-01-19 03:14:07 UTC")," (the upper limit denoted by the year 2038 is commonly referred to as the ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Year_2038_problem"},"Year 2038 problem"),"). The short range of 68 years which can be represented by unsigned 32-bit timestamps and the fact that you cannot use dates before 1970 (except for 64-bit systems where Unix timestamps are stored as signed 64-bit integers, or on most 32-bit systems where timestamps are stored as signed integers, supporting a range from ",(0,o.kt)("inlineCode",{parentName:"p"},"1901-12-13 20:45:54 UTC")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"2038-01-19 03:14:07 UTC"),") narrows the use cases for timestamps somewhat down",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_6_"},(0,o.kt)("strong",{parentName:"a"},"[6]"))),"."),(0,o.kt)("p",null,"An operating system with support for signed 32-bit timestamps should be one of the prerequisites for our application in this case. Since PHP made date_default_timezone_set() available with version 5.1.0, and this version fixed some issues with supporting only unsigned integers on some 32-bit systems when working with timestamps, this is mandatory."),(0,o.kt)("p",null,"However, when dealing with \u201ctransient\u201d dates, such as dates belonging to log entries or such, timestamps are proven to work. Oh, and it\u2019s hard to figure out what date exactly a 4-byte long value represents without doing some good old math, don\u2019t you think?",(0,o.kt)("em",{parentName:"p"},"[7]")),(0,o.kt)("p",null,"Unix timestamps are UTC dates. This means: They do not provide any offset to another timezone. You can simply add or subtract the needed offset in seconds from the timestamp",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_8_"},(0,o.kt)("strong",{parentName:"a"},"[8]"))),". Et voil\xe1 \u2014 you have your localized date."),(0,o.kt)("p",null,"Working with PHP on a 64-bit OS and using its functions to generate Unix timestamps? Beware, as timestamp-related functions in MySQL are not (yet) taking advantage of the large range of dates 64-bit timestamps can represent. See ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html"},"the manual"))," for more information. If you want to store 64-bit timestamps in a MySQL table, make sure you do choose the appropriate data type for the column and do not need to rely on any MySQL timestamp-related functions for generating or comparing the therein stored values."),(0,o.kt)("h3",{id:"datetime-fields"},"datetime Fields"),(0,o.kt)("p",null,"datetime fields in MySQL require dates to be in the format ",(0,o.kt)("inlineCode",{parentName:"p"},"YYYY-MM-dd HH:mm:ss")," (example: ",(0,o.kt)("inlineCode",{parentName:"p"},"1999-05-03 20:15:00"),") which makes it not only perfect readable, but also allows for complex date calculations by using MySQL\u2019s built in functionality. The supported range for datetime values is ",(0,o.kt)("inlineCode",{parentName:"p"},"1000-01-01 00:00:00")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"9999-12-31 23:59:59"),". This covers a wide range of dates",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_9_"},(0,o.kt)("strong",{parentName:"a"},"[9]")))," and is perfect for storing UTC datetime values."),(0,o.kt)("p",null,"Read more about MySQL\u2019s datetime ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://dev.mysql.com/doc/refman/8.0/en/datetime.html"},"here")),"."),(0,o.kt)("p",null,"Beware of using MySQL\u2019s date calculation-functions which rely upon timezone settings, such as ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now"},"NOW()")),", as computed results will depend on the time zone settings of the host system the method gets called on. You will find more information about MySQL time zone settings ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html"},"here")),"."),(0,o.kt)("p",null,"For another point of view regarding Unix timestamps and datetime fields in MySQL databases, see ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"http://billauer.co.il/blog/2009/03/mysql-datetime-epoch-unix-time/"},"this post by Eli Billauer")),"."),(0,o.kt)("h3",{id:"getting-that-utc-date-ready-for-mysql"},"Getting that UTC date ready for Mysql"),(0,o.kt)("p",null,"Since we\u2019ve decided to store only UTC dates in our database, we go now back to ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," and take a look at how we convert any date string to UTC date."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Converting a date of any time zone to a UTC date."',title:'"Converting',a:!0,date:!0,of:!0,any:!0,time:!0,zone:!0,to:!0,UTC:!0,'date."':!0},"// we assume that the variable $date holds the date we want to add in\n// UTC to the data storage\n// the following works with date formats that include time zone offsets,\n// e.g. Fri, 19 Jan 2007 22:08:13 +0100 (CET)\n// read out the currently used timezone\n$date    = 'Fri, 19 Jan 2007 22:08:13 +0100 (CET)';\n$oldZone = date_default_timezone_get();\n// set the new timezone to UTC to give PHP a hint what `strtotime()` has to\n// do\ndate_default_timezone_set('UTC');\nassert(date_default_timezone_get() === 'UTC');\n\n// `strtotime()` is much more forgiving to date strings which\n// do not comply to the exact standard\n$dvalue = @strtotime($date);\n\n// reset default timezone to previous value\ndate_default_timezone_set($oldZone);\nassert(date_default_timezone_get() === $oldZone);\n\n// get back to Zend Date\n$dateObject = new Zend_Date();\ntry {\n    $dateObject->set(($dvalue === false ? $date : $dvalue));\n} catch (Zend_Date_Exception $e) {\n     // fall back to default date to have a value at last\n     $dateObject->set('1970-01-01 00:00:00');\n}\n$dateObject->setTimezone('UTC');\n$result = $dateObject->get('YYYY-MM-dd HH:mm:ss');\nassert($result === '2007-01-19 21:08:13');\necho $result;\n")),(0,o.kt)("p",null,"Note our first call to ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()"),". This is a native PHP function which is much more forgiving than ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," when it comes to parsing date strings which do not comply to international standards. However, ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," can fail, and if it does, we delegate the parsing of the date to Zend_Date. It does not use ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," itself, but instead tokenizes the passed string for gathering all the information it needs. It even uses the BC Math extension (if available), which comes quite handy in case ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," failed with a date which is out of bounds. We\u2019ll get to that later."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Q:")," So if ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," does a better job when it comes to parsing malformed dates, why doesn't ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," use it? ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," Remember what we've just learned about the limited range of dates you can represent with a timestamp? If you specify a date before 1901 or after 2038 in the above example, you're most likely to fail on systems where PHP supports timestamps only as (signed) 32-bit integer. ",(0,o.kt)("strong",{parentName:"p"},"If your use case includes the option of handling dates prior to 1901 or after 2038, do not rely on")," ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," ",(0,o.kt)("strong",{parentName:"p"},"and use only "),"Zend_Date",(0,o.kt)("strong",{parentName:"p"},"!")," Although it uses ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.php.net/manual/en/function.mktime.php"},"mktime()"))," itself as long as the year is in between 1901 and 2038, it is able to fall back to internal calculations as soon as this value is out of bounds. See also the answer to the next question.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Q:")," I've read that ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," ",(0,o.kt)("strong",{parentName:"p"},"works internally with timestamps"),". If the range of dates which timestamps can represent is limited, what kind of workaround does ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," use itself? ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," None. Well, at least not directly. On 32-bit systems, timestamps represented as signed 32-bit integers (which we assume to be the lowest common denominator for our target system), can work with dates ranging from 1901-12-13 to 2038-01-19 (+ a few hours). Zend Framework suggests to make the ",(0,o.kt)("strong",{parentName:"p"},"BC Math extension")," available to your PHP installation if you want to support dates which are outside of this range.",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_10_"},(0,o.kt)("strong",{parentName:"a"},"[10]"))))),(0,o.kt)("p",null,"If parsing the date failed, we catch the exception and fall back to a default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"1970-01-01 00:00:00"),", but it\u2019s up to you if you let the exception bubble up or replace the date with any value you want. It mainly depends on your use case and how sensitive your data is to wrong date values",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_11_"},(0,o.kt)("strong",{parentName:"a"},"[11]"))),".\nThe last step is to put ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," into the UTC timezone, and \u2013 based on that \u2013 convert the string to the format YYYY-MM-dd HH:mm:ss, which is the required format for MySQL datetime fields.\nLet\u2019s go back to ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," for a second. You should\u2019ve noted that we temporarily set another timezone (UTC) so the internal date conversion knows what kind of output we expect.\nThis might confuse you at first, so let\u2019s go through it in detail: Let\u2019s assume we have the following date that needs to be converted to UTC: ",(0,o.kt)("inlineCode",{parentName:"p"},"Fri, 19 Jan 2007 22:08:13 +0100 (CET)"),". The last part of the string includes the offset to the UTC time zone \u201c",(0,o.kt)("inlineCode",{parentName:"p"},"+0100 (CET)"),"\u201d (means: CET is 1 hour ahead of UTC when no DST is available, otherwise it would be + 2 hrs), and the first part \u201c",(0,o.kt)("inlineCode",{parentName:"p"},"Fri, 19 Jan 2007 22:08:13"),"\u201d is actually the local date that should be put into the UTC time zone and stored to the data storage. By telling ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," it should generate a Unix timestamp from that date and setting the default timezone to UTC, the offset is calculated against the local date. If, however, you\u2019d set the default timezone to America/Los_Angeles, the offset to ",(0,o.kt)("inlineCode",{parentName:"p"},"UTC (-08:00)")," for this time zone (PST) is computed against the UTC date of the local date."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This following code snippet illustrates the interaction between default time zones and strtotime(). The comments explain how the calculation works. If you want to know more about this, follow ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.cl.cam.ac.uk/~mgk25/iso-time.html"},"this link")),".*")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"// show which timezone our script runs in\necho date_default_timezone_get() . \"\\n\";\n// outputs the converted date, depending on the timezone initially set\necho \"1: \".date(\"Y-m-d H:i:s\", strtotime('Fri, 19 Nov 2007 22:08:13 +0100 (CET)')) . \"\\n\";\n\n// lets have a look at DST. Set the timezone to a value of which we know\n// that it uses DST\ndate_default_timezone_set('Europe/Berlin');\nassert(date_default_timezone_get() === 'Europe/Berlin');\n\n// no DST from end of Okt to end of March in Europe/Berlin,\n// so the following will output 2007-01-19 22:08:13\n$d = date(\"Y-m-d H:i:s\", strtotime('Fri, 19 Jan 2007 22:08:13 +0100 (CET)'));\nassert($d === '2007-01-19 22:08:13');\necho \"2: $d \\n\";\n\n// summertime, i.e. CEST in Europe/Berlin, for example during August\n// the following will output 2007-08-19 23:08:13, since the timezone is specified\n// as CET, but during August, DST is active, so 1 hour wil be added\n$d = date(\"Y-m-d H:i:s\", strtotime('Sun, 19 Aug 2007 22:08:13 +0100 (CET)'));\nassert($d === '2007-08-19 23:08:13');\necho \"3: $d \\n\";\n\n// now specify CEST as a timezone - this tells that the date is in Central European\n// Summer Time (2 hrs ahead of UTC)\n// the output will be 2007-08-19 22:08:13\n$d = date(\"Y-m-d H:i:s\", strtotime('Sun, 19 Aug 2007 22:08:13 +0200 (CEST)'));\nassert($d === '2007-08-19 22:08:13');\necho \"4: $d \\n\";\n\n// changing the timezone to UTC\ndate_default_timezone_set('UTC');\nassert(date_default_timezone_get() === 'UTC');\n\n// ouputs 2007-01-19 21:08:13, the date converted to UTC time zone\n$d = date(\"Y-m-d H:i:s\", strtotime('Fri, 19 Jan 2007 22:08:13 +0100 (CET)'));\necho \"5: $d \\n\";\nassert($d === '2007-01-19 21:08:13');\n\n// changing the timezone to America/Los_Angeles\ndate_default_timezone_set('America/Los_Angeles');\nassert(date_default_timezone_get() === 'America/Los_Angeles');\n\n// outputs 2007-01-19 13:08:13, the specified date in the time\n// zone of Los Angeles (America)\n// calculate UTC date:\n// (Fri, 19 Jan 2007 22:08:13 - (+01:00)) =  Fri, 19 Jan 2007 21:08:13 +00:00 (UTC)\n// now substract 08:00 (PST is 8 hrs behind UTC) from the UTC date\n// (Fri, 19 Jan 2007 21:08:13 +00:00 (UTC)) - (08:00))\n// == Fri, 19 Jan 2007 13:08:13 -08:00 (PST)\n$d = date(\"Y-m-d H:i:s\", strtotime('Fri, 19 Jan 2007 22:08:13 +0100 (CET)'));\necho \"6:  $d \\n\";\nassert($d === '2007-01-19 13:08:13');\n\n// test this the same way around:\ndate_default_timezone_set('Europe/Berlin');\nassert(date_default_timezone_get() === 'Europe/Berlin');\n\n// outputs 2007-01-19 22:08:13\n$d = date(\"Y-m-d H:i:s\", strtotime('Fri, 19 Jan 2007 13:08:13 -08:00 (PST)'));\necho \"7: $d \\n\";\nassert($d === '2007-01-19 22:08:13');\n\n// Output generated:\n// [your timezone]\n// 1: [date based on your time zone]\n// 2: 2007-01-19 22:08:13\n// 3: 2007-08-19 23:08:13\n// 4: 2007-08-19 22:08:13\n// 5: 2007-01-19 21:08:13\n// 6: 2007-01-19 13:08:13\n// 7: 2007-01-19 22:08:13\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Rule of thumb"),": local date - ((-/+)time offset) = UTC date"),(0,o.kt)("p",null,"It\u2019s quite easy once you get the hang of it. The most important part is to relate to UTC all the time, and simply take the offsets of other time zones into account during converting. By using the UTC timezone, you can safely and easily display them in other time zones."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Q:")," When specifying the input date \u2014 why are we neither ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," nor ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," telling which timezone it belongs to?",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," Because we want PHP/Zend do the heavy lifting for us. See, sometimes we deal with date strings that come from resources we do not control, such as dates in email headers ",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_12_"},(0,o.kt)("strong",{parentName:"a"},"[12]"))),". Parsing a date string by hand involves a lot of work which was (thankfully) already done by other programmers, and this functionality is given to us by strtotime()/Zend_Date. You can, however, do a syntax check beforehand and disallow parsing for any date that looks fishy, e.g. if no offset information can be found.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Q:")," So what happens if there is no additional time zone information in the string I pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date"),"?",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," In this case, both functions will fall back to the default time zone previously set with ",(0,o.kt)("inlineCode",{parentName:"p"},"date_default_timezone_set()"),".")),(0,o.kt)("h2",{id:"being-soft-and-flexible"},"Being soft and flexible"),(0,o.kt)("p",null,"Now that you have prepared your application to store UTC dates in the format ",(0,o.kt)("inlineCode",{parentName:"p"},"YYYY-MM-dd HH:mm:ss"),", you are able to display them properly based on the time zone you have specified by using ",(0,o.kt)("inlineCode",{parentName:"p"},"date_default_timezone_set()"),". We return to ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," now to convert UTC dates to the default time zone cosen by you or your application\u2019s user, as mentioned above."),(0,o.kt)("p",null,"Let\u2019s first have a look at an error-prone solution and see why this is not the right way to do it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="How Zend_Date should not be used when converting datetime values to the application\'s time zone"',title:'"How',Zend_Date:!0,should:!0,not:!0,be:!0,used:!0,when:!0,converting:!0,datetime:!0,values:!0,to:!0,the:!0,"application's":!0,time:!0,'zone"':!0},"//creating `Zend_Date` and pass our datetime value from the data storage to\n// the constructor\n$dateObject = new Zend_Date('2007-01-19 14:08:13');\necho $date->get('YYYY-MM-dd HH:mm:ss');\n")),(0,o.kt)("p",null,"So why is this wrong? Well, first off we\u2019re simply passing a string to ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," which provides no further information about its time zone, and therefor its offset (remember our date string \u201c",(0,o.kt)("inlineCode",{parentName:"p"},"Fri, 19 Jan 2007 22:08:13 +0100 (CET)"),"\u201c? The timezone and offset information at its end helps functions like ",(0,o.kt)("inlineCode",{parentName:"p"},"strtotime()")," when they look for any additional information for which region in the world the date was created for). Thus, ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," will fall back to the timezone it has detected when it internally queried the return value of ",(0,o.kt)("inlineCode",{parentName:"p"},"date_default_timezone_get()"),", and uses this value for converting."),(0,o.kt)("p",null,"Secondly, we\u2019re not specifying the target time zone the date should be converted to. Guess what? By echoing the return value of ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_date::get()")," in this case, the converted value will be the same as the value we just passed to ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date::__construct()")," (whereas getting the same value is not an error: This happens when an input date with zero offset is converted to a timezone which in turn does not have an offset itself",(0,o.kt)("sup",null,(0,o.kt)("a",{parentName:"p",href:"#_13_"},(0,o.kt)("strong",{parentName:"a"},"[13]"))),").\nLet\u2019s have a look at another example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="How Zend_Date should not be used when converting UTC datetime values to the application\'s time zone"',title:'"How',Zend_Date:!0,should:!0,not:!0,be:!0,used:!0,when:!0,converting:!0,UTC:!0,datetime:!0,values:!0,to:!0,the:!0,"application's":!0,time:!0,'zone"':!0},"//create `Zend_Date` and pass the datetime value to the constructor\n$dateObject = new Zend_Date('2007-01-19 14:08:13');\n// set the time zone\n$dateObject->setTimezone(date_timezone_default_get());\necho $dateObject->get('YYYY-mm-dd HH:ii:ss');\n")),(0,o.kt)("p",null,"Well, we\u2019re not doing anything different here, are we? We simply do a call to Zend_Date::setTimezone() to set the Zend_Date-object to the time zone it was already set to. It already checks the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"date_timezone_default_get()")," internally. Relax. Take a break. And then have a look at a working example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="How to convert UTC datetime values to a specific time zone using Zend_Date"',title:'"How',to:!0,convert:!0,UTC:!0,datetime:!0,values:!0,a:!0,specific:!0,time:!0,zone:!0,using:!0,'Zend_Date"':!0},"// create `Zend_Date` object\n$dateObject = new Zend_Date();\n// put the Date_Object into the UTC time zone\n$dateObject->setTimezone('UTC');\n// set the UTC date the date object must work with\n$dateObject->set('2007-01-19 14:08:13');\n// now, set the time zone of the object to the time zone our application runs in\n$dateObject->setTimezone(date_default_timezone_get());\n// display the UTC date converted to our time zone\necho $dateObject->get('YYYY-MM-dd HH:mm:ss');\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Q:")," Can\u2019t ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," just guess which timezone the string belongs to? ",(0,o.kt)("br",null),"\n",(0,o.kt)("strong",{parentName:"p"},"A:")," No, that won't work, since there is no information about the time zone offset in a YYYY-MM-dd HH:mm:ss-formatted date string. We know that it's a UTC date, but we have to forward this information to Zend_Date.")),(0,o.kt)("h2",{id:"wrapping-things-up"},"Wrapping things up"),(0,o.kt)("p",null,"Adding time zone support to your PHP application isn\u2019t too much of a hassle, and not only will the user benefit from it, but so do you by eliminating a potential source for errors.\nThere aren\u2019t too many steps involved in adding time zone support, and it\u2019s best done at a very early implementation cycle to spare you the problems that occur when persisted data has to be converted back to UTC if you do not know which time zones the dates originally belong to."),(0,o.kt)("p",null,"As mentioned earlier \u2014 if you need to make your code work on each and every (32-bit) OS where PHP is available and you need to consider those OSs where PHP only supports unsigned 32-bit timestamps, you need to check whether dates which get processed with PHP internal functions are in between 1970-01-01 and 2038-01-19. In this case, you have to use a different approach than the one this article is about, since ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," assumes that your target system supports at least signed 32-bit integers when working time related functions (PHP supporting only timestamps as unsigned 32-bit timestamps is a known problem which has been fixed since 5.1.0).\nAn additional \u201csoft\u201d approach when deploying your application would be to require the availability of the BC Math extension, so ",(0,o.kt)("inlineCode",{parentName:"p"},"Zend_Date")," can take advantage of it.\nThe best configuration for a PHP system that covers a large range of dates would be a 64-bit OS. Your webpage should be guaranteed to run even in the far away future."),(0,o.kt)("p",null,"Oh, and did I mention the Unit Tests you should write for your date manipulating functions to get started in the first place?\nHappy PHPing!"),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Remarks:")),(0,o.kt)("sup",null,"[1]")," ",(0,o.kt)("a",{name:"_1_"}),"They were specially excited about phone calls during the weekends when their division manager would ask them to check a document for them. Write once, run anywhere.",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[2]")," ",(0,o.kt)("a",{name:"_2_"}),"You are an agilist, aren\u2019t you?",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[3]")," ",(0,o.kt)("a",{name:"_3_"}),"They are proven to work",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[4]")," ",(0,o.kt)("a",{name:"_4_"}),"You remember that 8 hour offset from San Francisco \u2014 London that ended up in the data storage? You don\u2019t want that!",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[5]")," ",(0,o.kt)("a",{name:"_5_"}),"Should you be working for the [LHC](https://en.wikipedia.org/wiki/Large_Hadron_Collider), then the fractional second difference should definitely matter to you.",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[6]")," ",(0,o.kt)("a",{name:"_6_"}),"Think about birthdates. Even Facebook\u2019s userbase does not only exist of people like \u201cawesomesauce_1988\u2033 and the like",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[7]")," ",(0,o.kt)("a",{name:"_7_"}),"Unless your first name is Sheldon and you tend to embrace your genius to the fullest",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[8]")," ",(0,o.kt)("a",{name:"_8_"}),"Assuming you converted the date to a timestamp properly",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[9]")," ",(0,o.kt)("a",{name:"_9_"}),"Watch out, PHP programmers working in history-related institutions!",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[10]")," ",(0,o.kt)("a",{name:"_10_"}),"Take a look at Zend_Locale_Math to understand how `Zend_Date` utilizes BC Math",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[11]")," ",(0,o.kt)("a",{name:"_11_"}),"Ever wondered how these emails from 1970 end up in your inbox?",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[12]")," ",(0,o.kt)("a",{name:"_12_"}),"How many email clients do you know, and how many of them are **looking out** to push their own proprietary standard through?",(0,o.kt)("br",null),(0,o.kt)("sup",null,"[13]")," ",(0,o.kt)("a",{name:"_13_"}),"London Calling",(0,o.kt)("br",null))}u.isMDXComponent=!0}}]);