(self.webpackChunkthorsten_suckow_homberg_de=self.webpackChunkthorsten_suckow_homberg_de||[]).push([[4568],{477:()=>{},2172:(e,n,t)=>{"use strict";t.d(n,{$z:()=>u,C9:()=>h,IX:()=>f,ZX:()=>p,eJ:()=>d,uR:()=>m});var r=t(6540),s=t(4882),i=t(8069),a=t(4945),o=t.n(a),l=t(2897),c=(t(4843),t(4848));function h(e){let{width:n,children:t,title:r,figure:i,modeAware:a}=e;return(0,c.jsxs)("div",{style:{width:n,textAlign:"center",margin:20},children:[(0,c.jsx)("div",{className:!1!==a?"umlImg":"",children:t}),(0,c.jsx)("div",{style:{textAlign:"center"},children:(0,c.jsxs)("sup",{children:[(0,c.jsx)("b",{children:s.A.isString(i)?i:`Figure ${i??1}`})," ",(0,c.jsx)("span",{dangerouslySetInnerHTML:{__html:r}})]})})]})}function d(e){let{id:n,source:t,title:r}=e;return(0,c.jsx)(h,{modeAware:!1,title:r,figure:`Source ${t}`,children:(0,c.jsx)(l.A,{id:n})})}function u(e){let{url:n,figure:t,title:r}=e;return(0,c.jsx)(h,{modeAware:!1,figure:t,title:r,children:(0,c.jsx)("img",{alt:"{title}",src:n})})}function m(e){let{children:n,figure:t,title:r}=e;return(0,c.jsx)(h,{modeAware:!0,figure:t,title:r,children:n})}function p(e){let{when:n,where:t}=e;const[r,s]=t;return(0,c.jsxs)("div",{children:["This article was originally published in ",n," at ",(0,c.jsx)("a",{target:"_blank",href:s,children:r}),". Some formatting might have get lost during the migration to this site: If you think you spotted an issue caused by malformed formatting, feel free to open a ",(0,c.jsx)("a",{href:"https://github.com/ThorstenSuckow/thorsten.suckow-homberg.de",children:"Pull Request"})," or ",(0,c.jsx)("a",{href:"mailto:thorsten@suckow-homberg.de",children:"send me an Email"}),"."]})}function f(e){let{url:n}=e;const[t,s]=r.useState("");return o()(n).then((e=>{e.text().then((e=>s(e)))})),(0,c.jsx)(i.A,{language:"php",children:t})}},4843:(e,n,t)=>{"use strict";t.d(n,{Dn:()=>i,R5:()=>s,lA:()=>a});t(6540);var r=t(4848);function s(e){let{name:n,pp:t}=e;const s=`/docs/bibliography#${n.toLowerCase()}`;return(0,r.jsxs)("a",{href:s,children:["[",(0,r.jsxs)("span",{className:"bibRef",children:["\ud83d\udcd6",n]}),t?`, ${t.includes("-")?"pp":"p"}. ${t}`:"","]"]})}function i(e){let{idx:n}=e;return(0,r.jsx)("a",{href:`#fig_${n}`,children:(0,r.jsxs)("span",{className:"bibRef",children:["Figure ",n]})})}function a(e){let{name:n,file:t}=e;Object.entries({sd:"softwaredesign",sa:"softwarearchitecture",cs:"computerscience"}).some((e=>{let[n,r]=e;if(t.startsWith(`${n}.`))return t=t.replace(`${n}.`,`${r}.`),!0}));const s=`/docs/toolbox/${t}`;return(0,r.jsx)("a",{href:s,className:"glosRef",children:n})}},6754:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"articles/javascript-promises-return-values-and-error-handlers/index","title":"JavaScript Promises \u2014 Return Values and Error Handlers","description":"Handling Errors and return values with JavaScript Promises","source":"@site/docs/articles/javascript-promises-return-values-and-error-handlers/index.mdx","sourceDirName":"articles/javascript-promises-return-values-and-error-handlers","slug":"/articles/javascript-promises-return-values-and-error-handlers/","permalink":"/docs/articles/javascript-promises-return-values-and-error-handlers/","draft":false,"unlisted":false,"editUrl":"https://github.com/thorstensuckow/thorsten.suckow-homberg.de/tree/main/docs/articles/javascript-promises-return-values-and-error-handlers/index.mdx","tags":[],"version":"current","lastUpdatedBy":"Thorsten Suckow-Homberg","lastUpdatedAt":1746637308000,"frontMatter":{"title":"JavaScript Promises \u2014 Return Values and Error Handlers","description":"Handling Errors and return values with JavaScript Promises"},"sidebar":"docs","previous":{"title":"Part 4: Registering services and using the Service Locator","permalink":"/docs/articles/creating-extjs-applications-with-coon-js/registering-services-and-using-the-service-locator"},"next":{"title":"Fluent Interface for JavaScript Promises","permalink":"/docs/articles/a-fluent-interface-for-javascript-promises/"}}');var s=t(4848),i=t(8453),a=t(2172);const o={title:"JavaScript Promises \u2014 Return Values and Error Handlers",description:"Handling Errors and return values with JavaScript Promises"},l=void 0,c={},h=[{value:"The Loader",id:"the-loader",level:2},{value:"Successful file loading",id:"successful-file-loading",level:2},{value:"async/ await",id:"async-await",level:3},{value:"<code>then()</code>",id:"then",level:3},{value:"Exception Handling",id:"exception-handling",level:2},{value:"Calling <code>load()</code> w/o an argument \u2014 async/await",id:"calling-load-wo-an-argument--asyncawait",level:3},{value:"Calling <code>load()</code> w/o an argument \u2014 <code>then()</code>",id:"calling-load-wo-an-argument--then",level:3},{value:"\u2026 when you say nothing at all",id:"-when-you-say-nothing-at-all",level:3},{value:"Treatment of asynchronous return values",id:"treatment-of-asynchronous-return-values",level:2},{value:"Rejected Promises",id:"rejected-promises",level:3},{value:"An elegant weapon for a more civilized age",id:"an-elegant-weapon-for-a-more-civilized-age",level:2},{value:"Closing Notes",id:"closing-notes",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(a.ZX,{when:"October 2021",where:["medium.com","https://medium.com/@thorstensuckow/javascript-promises-return-values-and-errors-handlers-19b6de4320ff"]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"A clear rejection is better than a fake Promise."})}),"\n",(0,s.jsxs)(n.p,{children:["Handling errors in JavaScript-Promises might seem confusing at first: Not only are there different ways to make an asynchronous Function work by either using the ",(0,s.jsx)(n.em,{children:"duo infernale"})," async*/*await or chaining ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Higher-order_function",children:"Higher Order"})," functions in the form of ",(0,s.jsx)(n.code,{children:"then()"})," and passing callback functions for processing a Promise\u2019s outcome \u2014 no, you also have to take care of proper exception handling or else cryptic errors will start to bubble up if something goes wrong (and it will, ",(0,s.jsx)(n.a,{href:"https://softwareengineering.stackexchange.com/questions/195571/is-it-possible-to-reach-absolute-zero-bug-state-for-large-scale-software",children:"no matter what"}),"!)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://cdn-images-1.medium.com/max/2000/1*B5VUiFT9KenPSFQ9dNXHNQ.png",alt:"No one likes the looks of these."})}),"\n",(0,s.jsx)(n.p,{children:"Actually, Promises provide a pretty smart approach to error handling, and it\u2019s easy once you get the hang of it."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["If you need to catch up on Promises and ",(0,s.jsx)(n.em,{children:"async"}),"/",(0,s.jsx)(n.em,{children:"await"}),", head up to the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",children:"MDN"}),"!"]})}),"\n",(0,s.jsx)(n.h2,{id:"the-loader",children:"The Loader"}),"\n",(0,s.jsxs)(n.p,{children:["This is the class we\u2019re using for our asynchronous showcases. There is nothing fancy going on here \u2014 quite the opposite, we\u2019re using a traditional ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",children:"XMLHttpRequest"})," (instead of the ",(0,s.jsx)(n.em,{children:"en vogue"})," ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/fetch",children:"fetch"}),") to demonstrate the process of *promisifying *an API that does not provide native Promise-support."]}),"\n",(0,s.jsxs)(n.p,{children:["The implementation will ",(0,s.jsx)(n.strong,{children:"resolve"})," to the responseText-property of the object available with the response, if, and only if no error occurred \u2014 anything else (including an ",(0,s.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc7231#section-6.1",children:"HTTP status"})," other than 200) will ",(0,s.jsx)(n.strong,{children:"reject"})," the Promise."]}),"\n",(0,s.jsxs)(n.p,{children:["An error is thrown if the argument passed to ",(0,s.jsx)(n.code,{children:"load()"})," is not of the type string."]}),"\n",(0,s.jsx)(n.p,{children:"Take your time and go through the source, notice the lines where reject/ throw is used and then continue with the following paragraphs."}),"\n",(0,s.jsx)(a.eJ,{id:"325f319f82fb73ecdc564ab98cf16eac",source:1}),"\n",(0,s.jsx)(n.h2,{id:"successful-file-loading",children:"Successful file loading"}),"\n",(0,s.jsxs)(n.p,{children:["The following shows two different approaches to utilize the Promise-interface given with the ",(0,s.jsx)(n.code,{children:"load()"}),"-method. Both examples are doing the same, although a different syntax is used."]}),"\n",(0,s.jsx)(n.h3,{id:"async-await",children:"async/ await"}),"\n",(0,s.jsx)(n.p,{children:"We are using await to make sure we are properly waiting for the Promise to resolve."}),"\n",(0,s.jsx)(a.eJ,{id:"655cd833d28fe6bf85034d988c74c2f6",source:2}),"\n",(0,s.jsx)(n.h3,{id:"then",children:(0,s.jsx)(n.code,{children:"then()"})}),"\n",(0,s.jsxs)(n.p,{children:["We are using ",(0,s.jsx)(n.code,{children:"then()"})," to chain method calls on Promise-objects. As soon as the Promise is resolved, the function resolve is called. If this looks familiar to you: It is a similar approach comparable to all the wiring we can do when using traditional ",(0,s.jsx)(n.a,{href:"https://medium.com/free-code-camp/javascript-from-callbacks-to-async-await-1cc090ddad99",children:"callbacks"}),"."]}),"\n",(0,s.jsx)(a.eJ,{id:"9408b42868ddffc8dc795ea5f2072e49",source:3}),"\n",(0,s.jsx)(n.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,s.jsxs)(n.p,{children:["Let\u2019s have a look at how we can catch errors when using Promises \u2014 again, by looking at async/await and ",(0,s.jsx)(n.code,{children:"then()"}),". Again, both examples fulfill the same purpose."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Using the async-keyword in front of a function magically turns it into an asynchronous function."})}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"calling-load-wo-an-argument--asyncawait",children:["Calling ",(0,s.jsx)(n.code,{children:"load()"})," w/o an argument \u2014 async/await"]}),"\n",(0,s.jsxs)(n.p,{children:["Although the location where the exception is thrown is not part of the Promise we\u2019re explicitly creating in ",(0,s.jsx)(n.code,{children:"load()"}),", ",(0,s.jsx)(n.strong,{children:"the async keyword makes sure that the method returns a Promise"})," (yes, you\u2019ve read this right. We\u2019ll refer to this later). We\u2019re wrapping the call in a try/catch-block, making sure we\u2019re not letting the error slip."]}),"\n",(0,s.jsx)(a.eJ,{id:"7854e3e540b85841843c19deb64e3c77",source:4}),"\n",(0,s.jsxs)(n.h3,{id:"calling-load-wo-an-argument--then",children:["Calling ",(0,s.jsx)(n.code,{children:"load()"})," w/o an argument \u2014 ",(0,s.jsx)(n.code,{children:"then()"})]}),"\n",(0,s.jsxs)(n.p,{children:["Let this one soak in , one more time: Methods marked as async return a Promise Object, no matter the return value that was originally used for the implementation. This in turn means that ",(0,s.jsx)(n.code,{children:"then()"})," can be used on the return-value of the async method, and we can conveniently pass a onFulfilled- or onReject-callback to it."]}),"\n",(0,s.jsx)(a.eJ,{id:"31079a63ed691c60e5b53a9433b63f7a",source:5}),"\n",(0,s.jsx)(n.h3,{id:"-when-you-say-nothing-at-all",children:"\u2026 when you say nothing at all"}),"\n",(0,s.jsxs)(n.p,{children:["Here\u2019s what happens when we\u2019re neither using async/await nor ",(0,s.jsx)(n.code,{children:"then()"}),". The exception won\u2019t be caught and bubbles all the way up, no matter the try/catch-block. Why\u2019s that so? It\u2019s because ",(0,s.jsx)(n.code,{children:"load()"})," spawns an asynchronous process that\u2019ll be doing its work (in this case: won\u2019t) sitting somewhere in the ",(0,s.jsx)(n.a,{href:"https://felixgerschau.com/javascript-memory-management/",children:"Heap"})," before catch is even aware of itself (I might be exaggerating with this for the dramatic purpose)."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"\u201cYou can\u2019t get away from yourself by moving from one place to another.\u201d"}),"\n",(0,s.jsxs)(n.em,{children:["(The Promise reflecting the abundance of the async-keyword. Originally a quote from Ernest Hemingway\u2019s \u201c",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/The_Sun_Also_Rises",children:"The Sun also rises"}),"\u201d.)"]})]}),"\n"]}),"\n",(0,s.jsx)(a.eJ,{id:"282ea6e15ed11d0f7723afbd110c0af8",source:6}),"\n",(0,s.jsx)(n.h2,{id:"treatment-of-asynchronous-return-values",children:"Treatment of asynchronous return values"}),"\n",(0,s.jsx)(n.p,{children:"Once more: Using the async-keyword in front of a function magically turns this function into an asynchronous function. It does not matter how the function is implemented, the return value will (almost always \u2014 see below) be a Promise! Understanding this will make working with Promises much, much easier."}),"\n",(0,s.jsx)(a.eJ,{id:"fc7668c12a11f0b94d2685b1b9c92399",source:7}),"\n",(0,s.jsxs)(n.p,{children:["In our example, the not-so-familiar-with-Promises developer might assume that the value returned by ",(0,s.jsx)(n.code,{children:"load()"})," is already the responseText of the XMLHttpRequest. But, this is not how async ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await",children:"does it job"}),". General rule of thumb:"]}),"\n",(0,s.jsx)(n.p,{children:"If"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"you come across a method tagged with the async-keyword"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"AND"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"you\u2019re not using await when calling it"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"then treat the return value like a Promise."}),"\n",(0,s.jsx)(a.eJ,{id:"6291980d502a448363479e152af93457",source:8}),"\n",(0,s.jsx)(a.eJ,{id:"79d027c69981a614f8184bb438a6f8d5",source:9}),"\n",(0,s.jsx)(n.h3,{id:"rejected-promises",children:"Rejected Promises"}),"\n",(0,s.jsxs)(n.p,{children:["Likewise, an async method not called with the await-keyword will ",(0,s.jsx)(n.em,{children:"always"})," wrap an exception thrown in a Promise, and this Promise\u2019s state will be set to rejected."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Half the promises people say were never kept, were never made."}),"\n",(0,s.jsx)(n.em,{children:"(Edgar Watson Howe)"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Without using await, we\u2019re not able to catch (read: try/catch) an exception that was thrown by the async function. In this case, we need to write an error handler: An onReject-callback, passed to ",(0,s.jsx)(n.code,{children:"then()"})," as the second argument and chain it to the Promise that may or may not get rejected:"]}),"\n",(0,s.jsx)(a.eJ,{id:"395451fc3e5695859da9fc86b234aae4",source:10}),"\n",(0,s.jsx)(n.h2,{id:"an-elegant-weapon-for-a-more-civilized-age",children:"An elegant weapon for a more civilized age"}),"\n",(0,s.jsxs)(n.p,{children:["If you still feel like you\u2019re more into chaining your Promises by using ",(0,s.jsx)(n.code,{children:"then()"}),", a more subtle approach towards defining error handlers would be to be using ",(0,s.jsx)(n.code,{children:"catch()"})," , that behaves just like ",(0,s.jsx)(n.code,{children:"then()"})," with an onReject -callback defined:"]}),"\n",(0,s.jsx)(a.eJ,{id:"02672144b3a994b4f81282ec6e15ebff",source:11}),"\n",(0,s.jsxs)(n.p,{children:["The first ",(0,s.jsx)(n.code,{children:"catch()"})," (or ",(0,s.jsx)(n.code,{children:"then()"})," using an onReject-callback as its second argument) makes sure that errors are handled and not bubble up. Just like you would process resolved Promises with your onFulfilled-callbacks, a Promise chain would branch into the error-handlers as soon as the first Promise gets rejected."]}),"\n",(0,s.jsx)(a.eJ,{id:"e7f154ac118aa236cee12233d9193053",source:12}),"\n",(0,s.jsxs)(n.p,{children:["A Promise chain makes sure that the very first ",(0,s.jsx)(n.code,{children:"catch()"})," or onReject-callback found is used for the most recent error being thrown. Just because we define an error-handler at the very bottom of the chain does not mean we\u2019re creating a direct association exclusively to the Promise object we\u2019re expecting from this call. More exactly, this behavior is the same for onFulfilled -callbacks."]}),"\n",(0,s.jsx)(a.eJ,{id:"fb2ec47943b47c8d60fc9001b1445c68",source:13}),"\n",(0,s.jsx)(n.h3,{id:"closing-notes",children:"Closing Notes"}),"\n",(0,s.jsxs)(n.p,{children:["Similar to the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror",children:"onerror"}),"-handler defined with the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers",children:"GlobalEventHandlers"})," mixin, there is the onunhandledrejection-handler that will take care of unhandled Promise rejections. It is part of the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers",children:"WindowEventHandlers"})," mixin, and you can read more about it at ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection",children:"MDN"}),"; here\u2019s an ",(0,s.jsx)(n.a,{href:"https://medium.com/@petermikitsh/logging-client-side-javascript-stack-traces-86921532589",children:"article"})," by ",(0,s.jsx)(n.a,{href:"https://medium.com/@petermikitsh",children:"Peter Mikitsh"}),", showcasing its usage."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{"use strict";t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);